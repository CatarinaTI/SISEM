
SISEM_2024_2DB_02_D.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00007f10  08000000  0c000000  00008000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .eh_frame     00000000  08007f10  0c007f10  0000ff10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 Stack         00000800  1fffc000  1fffc000  0001c000  2**0
                  ALLOC
  3 .data         000002ac  1fffc800  0c007f10  00014800  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          0000008c  1fffcaac  0c0081bc  00014aac  2**2
                  ALLOC
  5 .no_init      00000020  20005fc0  20005fc0  0001c000  2**2
                  ALLOC
  6 .debug_aranges 00001680  00000000  00000000  00014ab0  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0002a201  00000000  00000000  00016130  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000058e9  00000000  00000000  00040331  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000be1d  00000000  00000000  00045c1a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  0000627c  00000000  00000000  00051a38  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000e164  00000000  00000000  00057cb4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000bdcc  00000000  00000000  00065e18  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001308  00000000  00000000  00071be4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .build_attributes 00000fef  00000000  00000000  00072eec  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

08000000 <__Vectors>:
 8000000:	00 c8 ff 1f 01 02 00 08 91 02 00 08 91 02 00 08     ................
 8000010:	91 02 00 08 91 02 00 08 91 02 00 08 00 00 00 00     ................
	...
 800002c:	91 02 00 08 91 02 00 08 00 00 00 00 91 02 00 08     ................
 800003c:	91 02 00 08 91 02 00 08 91 02 00 08 91 02 00 08     ................
 800004c:	91 02 00 08 91 02 00 08 f9 4b 00 08 91 02 00 08     .........K......
 800005c:	91 02 00 08 91 02 00 08 00 00 00 00 00 00 00 00     ................
 800006c:	00 00 00 00 91 02 00 08 00 00 00 00 91 02 00 08     ................
 800007c:	91 02 00 08 91 02 00 08 91 02 00 08 91 02 00 08     ................
 800008c:	91 02 00 08 91 02 00 08 91 02 00 08 91 02 00 08     ................
 800009c:	91 02 00 08 91 02 00 08 91 02 00 08 00 00 00 00     ................
	...
 80000e8:	91 02 00 08 91 02 00 08 91 02 00 08 91 02 00 08     ................
 80000f8:	dd 4b 00 08 91 02 00 08 91 02 00 08 91 02 00 08     .K..............
 8000108:	91 02 00 08 91 02 00 08 00 00 00 00 00 00 00 00     ................
	...
 8000130:	91 02 00 08 91 02 00 08 91 02 00 08 25 48 00 08     ............%H..
	...
 8000150:	91 02 00 08 91 02 00 08 00 00 00 00 00 00 00 00     ................
 8000160:	91 02 00 08 91 02 00 08 91 02 00 08 91 02 00 08     ................
 8000170:	91 02 00 08 91 02 00 08 91 02 00 08 91 02 00 08     ................
 8000180:	91 02 00 08 91 02 00 08 91 02 00 08 91 02 00 08     ................
 8000190:	91 02 00 08 91 02 00 08 91 02 00 08 91 02 00 08     ................
 80001a0:	91 02 00 08 91 02 00 08 91 02 00 08 91 02 00 08     ................
 80001b0:	91 02 00 08 91 02 00 08 91 02 00 08 91 02 00 08     ................
	...
 80001d8:	91 02 00 08 00 00 00 00 91 02 00 08 91 02 00 08     ................
 80001e8:	00 00 00 00 91 02 00 08 00 00 00 00 00 00 00 00     ................
	...

08000200 <Reset_Handler>:
    .long   0                           /* Not Available                 */
    .long   0                           /* Not Available                 */

    .size  __Vectors, . - __Vectors
/* ================== END OF VECTOR TABLE DEFINITION ======================= */

 8000200:	f8df d06c 	ldr.w	sp, [pc, #108]	; 8000270 <__zero_table_end__>
/* ================== START OF VECTOR ROUTINES ============================= */

	.align	1
 8000204:	481b      	ldr	r0, [pc, #108]	; (8000274 <__zero_table_end__+0x4>)
    .thumb
 8000206:	4780      	blx	r0
 *    offset 4: VMA of start of a section to copy to
 *    offset 8: size of the section to copy. Must be multiply of 4
 *
 *  All addresses must be aligned to 4 bytes boundary.
 */
	ldr	r4, =__copy_table_start__
 8000208:	4c1b      	ldr	r4, [pc, #108]	; (8000278 <__zero_table_end__+0x8>)
	ldr	r5, =__copy_table_end__
 800020a:	4d1c      	ldr	r5, [pc, #112]	; (800027c <__zero_table_end__+0xc>)

.L_loop0:
	cmp	r4, r5
 800020c:	42ac      	cmp	r4, r5
	bge	.L_loop0_done
 800020e:	da09      	bge.n	8000224 <Reset_Handler+0x24>
	ldr	r1, [r4]
 8000210:	6821      	ldr	r1, [r4, #0]
	ldr	r2, [r4, #4]
 8000212:	6862      	ldr	r2, [r4, #4]
	ldr	r3, [r4, #8]
 8000214:	68a3      	ldr	r3, [r4, #8]

.L_loop0_0:
	subs	r3, #4
 8000216:	3b04      	subs	r3, #4
	ittt	ge
 8000218:	bfa2      	ittt	ge
	ldrge	r0, [r1, r3]
 800021a:	58c8      	ldrge	r0, [r1, r3]
	strge	r0, [r2, r3]
 800021c:	50d0      	strge	r0, [r2, r3]
	bge	.L_loop0_0
 800021e:	e7fa      	bge.n	8000216 <Reset_Handler+0x16>

	adds	r4, #12
 8000220:	340c      	adds	r4, #12
	b	.L_loop0
 8000222:	e7f3      	b.n	800020c <Reset_Handler+0xc>
 *    offset 4: Size of this BSS section. Must be multiply of 4
 *
 *  Define __SKIP_BSS_CLEAR to disable zeroing uninitialzed data in startup.
 */    
#ifndef __SKIP_BSS_CLEAR
	ldr	r3, =__zero_table_start__
 8000224:	4b16      	ldr	r3, [pc, #88]	; (8000280 <__zero_table_end__+0x10>)
	ldr	r4, =__zero_table_end__
 8000226:	4c17      	ldr	r4, [pc, #92]	; (8000284 <__zero_table_end__+0x14>)

.L_loop2:
	cmp	r3, r4
 8000228:	42a3      	cmp	r3, r4
	bge	.L_loop2_done
 800022a:	da08      	bge.n	800023e <Reset_Handler+0x3e>
	ldr	r1, [r3]
 800022c:	6819      	ldr	r1, [r3, #0]
	ldr	r2, [r3, #4]
 800022e:	685a      	ldr	r2, [r3, #4]
	movs	r0, 0
 8000230:	2000      	movs	r0, #0

.L_loop2_0:
	subs	r2, #4
 8000232:	3a04      	subs	r2, #4
	itt	ge
 8000234:	bfa4      	itt	ge
	strge	r0, [r1, r2]
 8000236:	5088      	strge	r0, [r1, r2]
	bge	.L_loop2_0
 8000238:	e7fb      	bge.n	8000232 <Reset_Handler+0x32>

	adds	r3, #8
 800023a:	3308      	adds	r3, #8
	b	.L_loop2
 800023c:	e7f4      	b.n	8000228 <Reset_Handler+0x28>
.L_loop2_done:    
#endif /* __SKIP_BSS_CLEAR */
   
#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
 800023e:	4812      	ldr	r0, [pc, #72]	; (8000288 <__zero_table_end__+0x18>)
    blx  r0
 8000240:	4780      	blx	r0
#endif

    ldr  r0, =main
 8000242:	4812      	ldr	r0, [pc, #72]	; (800028c <__zero_table_end__+0x1c>)
    blx  r0
 8000244:	4780      	blx	r0
	...

08000248 <__copy_table_start__>:
 8000248:	0c007f10 	.word	0x0c007f10
 800024c:	1fffc800 	.word	0x1fffc800
 8000250:	000002ac 	.word	0x000002ac
 8000254:	0c007f10 	.word	0x0c007f10
 8000258:	1fffc800 	.word	0x1fffc800
 800025c:	00000000 	.word	0x00000000

08000260 <__copy_table_end__>:
 8000260:	1fffcaac 	.word	0x1fffcaac
 8000264:	0000008c 	.word	0x0000008c
 8000268:	20000000 	.word	0x20000000
 800026c:	00000000 	.word	0x00000000

08000270 <__zero_table_end__>:
    .long   0                           /* Not Available                 */
    .long   0                           /* Not Available                 */

    .size  __Vectors, . - __Vectors
/* ================== END OF VECTOR TABLE DEFINITION ======================= */

 8000270:	1fffc800 	.word	0x1fffc800
/* ================== START OF VECTOR ROUTINES ============================= */

	.align	1
 8000274:	08000295 	.word	0x08000295
 *    offset 4: VMA of start of a section to copy to
 *    offset 8: size of the section to copy. Must be multiply of 4
 *
 *  All addresses must be aligned to 4 bytes boundary.
 */
	ldr	r4, =__copy_table_start__
 8000278:	08000248 	.word	0x08000248
	ldr	r5, =__copy_table_end__
 800027c:	08000260 	.word	0x08000260
 *    offset 4: Size of this BSS section. Must be multiply of 4
 *
 *  Define __SKIP_BSS_CLEAR to disable zeroing uninitialzed data in startup.
 */    
#ifndef __SKIP_BSS_CLEAR
	ldr	r3, =__zero_table_start__
 8000280:	08000260 	.word	0x08000260
	ldr	r4, =__zero_table_end__
 8000284:	08000270 	.word	0x08000270
	b	.L_loop2
.L_loop2_done:    
#endif /* __SKIP_BSS_CLEAR */
   
#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
 8000288:	08005895 	.word	0x08005895
    blx  r0
#endif

    ldr  r0, =main
 800028c:	08004d65 	.word	0x08004d65

08000290 <BusFault_Handler>:
	.align	1
    .thumb_func
    .weak Default_Handler
    .type Default_Handler, %function
Default_Handler:
    b .
 8000290:	e7fe      	b.n	8000290 <BusFault_Handler>
	...

08000294 <SystemInit>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

__WEAK void SystemInit(void)
{
 8000294:	b598      	push	{r3, r4, r7, lr}
 8000296:	af00      	add	r7, sp, #0
  memcpy(g_chipid, CHIPID_LOC, 16);
 8000298:	4a08      	ldr	r2, [pc, #32]	; (80002bc <SystemInit+0x28>)
 800029a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800029e:	4614      	mov	r4, r2
 80002a0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80002a2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  memcpy(g_hrpwm_char_data, HRPWM_CHARDATA_LOC, 12);
 80002a6:	4b06      	ldr	r3, [pc, #24]	; (80002c0 <SystemInit+0x2c>)
 80002a8:	4a06      	ldr	r2, [pc, #24]	; (80002c4 <SystemInit+0x30>)
 80002aa:	ca07      	ldmia	r2, {r0, r1, r2}
 80002ac:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  SystemCoreSetup();
 80002b0:	f003 fd7a 	bl	8003da8 <SystemCoreSetup>
  SystemCoreClockSetup(); 
 80002b4:	f003 fde2 	bl	8003e7c <SystemCoreClockSetup>
}
 80002b8:	bd98      	pop	{r3, r4, r7, pc}
 80002ba:	bf00      	nop
 80002bc:	20005fc4 	.word	0x20005fc4
 80002c0:	20005fd4 	.word	0x20005fd4
 80002c4:	20000084 	.word	0x20000084

080002c8 <SystemCoreClockUpdate>:

  SystemCoreClockUpdate();
}

__WEAK void SystemCoreClockUpdate(void)
{
 80002c8:	b580      	push	{r7, lr}
 80002ca:	b084      	sub	sp, #16
 80002cc:	af00      	add	r7, sp, #0
  uint32_t pdiv;
  uint32_t ndiv;
  uint32_t kdiv;
  uint32_t temp;

  if (SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSSEL_Msk)
 80002ce:	4b2f      	ldr	r3, [pc, #188]	; (800038c <SystemCoreClockUpdate+0xc4>)
 80002d0:	68db      	ldr	r3, [r3, #12]
 80002d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80002d6:	2b00      	cmp	r3, #0
 80002d8:	d03e      	beq.n	8000358 <SystemCoreClockUpdate+0x90>
  {
    /* fPLL is clock source for fSYS */
    if(SCU_PLL->PLLCON2 & SCU_PLL_PLLCON2_PINSEL_Msk)
 80002da:	4b2d      	ldr	r3, [pc, #180]	; (8000390 <SystemCoreClockUpdate+0xc8>)
 80002dc:	68db      	ldr	r3, [r3, #12]
 80002de:	f003 0301 	and.w	r3, r3, #1
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d002      	beq.n	80002ec <SystemCoreClockUpdate+0x24>
    {
      /* PLL input clock is the backup clock (fOFI) */
      temp = OFI_FREQUENCY;
 80002e6:	4b2b      	ldr	r3, [pc, #172]	; (8000394 <SystemCoreClockUpdate+0xcc>)
 80002e8:	60fb      	str	r3, [r7, #12]
 80002ea:	e002      	b.n	80002f2 <SystemCoreClockUpdate+0x2a>
    }
    else
    {
      /* PLL input clock is the high performance osicllator (fOSCHP) */
      temp = OSCHP_GetFrequency();
 80002ec:	f003 fdbc 	bl	8003e68 <OSCHP_GetFrequency>
 80002f0:	60f8      	str	r0, [r7, #12]
    }

    /* check if PLL is locked */
    if (SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk)
 80002f2:	4b27      	ldr	r3, [pc, #156]	; (8000390 <SystemCoreClockUpdate+0xc8>)
 80002f4:	681b      	ldr	r3, [r3, #0]
 80002f6:	f003 0304 	and.w	r3, r3, #4
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d020      	beq.n	8000340 <SystemCoreClockUpdate+0x78>
    {
      /* PLL normal mode */
      /* read back divider settings */
      pdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_PDIV_Msk) >> SCU_PLL_PLLCON1_PDIV_Pos) + 1;
 80002fe:	4b24      	ldr	r3, [pc, #144]	; (8000390 <SystemCoreClockUpdate+0xc8>)
 8000300:	689b      	ldr	r3, [r3, #8]
 8000302:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8000306:	0e1b      	lsrs	r3, r3, #24
 8000308:	3301      	adds	r3, #1
 800030a:	60bb      	str	r3, [r7, #8]
      ndiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_NDIV_Msk) >> SCU_PLL_PLLCON1_NDIV_Pos) + 1;
 800030c:	4b20      	ldr	r3, [pc, #128]	; (8000390 <SystemCoreClockUpdate+0xc8>)
 800030e:	689b      	ldr	r3, [r3, #8]
 8000310:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 8000314:	0a1b      	lsrs	r3, r3, #8
 8000316:	3301      	adds	r3, #1
 8000318:	607b      	str	r3, [r7, #4]
      kdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K2DIV_Msk) >> SCU_PLL_PLLCON1_K2DIV_Pos) + 1;
 800031a:	4b1d      	ldr	r3, [pc, #116]	; (8000390 <SystemCoreClockUpdate+0xc8>)
 800031c:	689b      	ldr	r3, [r3, #8]
 800031e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8000322:	0c1b      	lsrs	r3, r3, #16
 8000324:	3301      	adds	r3, #1
 8000326:	603b      	str	r3, [r7, #0]

      temp = (temp / (pdiv * kdiv)) * ndiv;
 8000328:	68bb      	ldr	r3, [r7, #8]
 800032a:	683a      	ldr	r2, [r7, #0]
 800032c:	fb02 f303 	mul.w	r3, r2, r3
 8000330:	68fa      	ldr	r2, [r7, #12]
 8000332:	fbb2 f3f3 	udiv	r3, r2, r3
 8000336:	687a      	ldr	r2, [r7, #4]
 8000338:	fb02 f303 	mul.w	r3, r2, r3
 800033c:	60fb      	str	r3, [r7, #12]
 800033e:	e00d      	b.n	800035c <SystemCoreClockUpdate+0x94>
    }
    else
    {
      /* PLL prescalar mode */
      /* read back divider settings */
      kdiv  = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K1DIV_Msk) >> SCU_PLL_PLLCON1_K1DIV_Pos) + 1;
 8000340:	4b13      	ldr	r3, [pc, #76]	; (8000390 <SystemCoreClockUpdate+0xc8>)
 8000342:	689b      	ldr	r3, [r3, #8]
 8000344:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000348:	3301      	adds	r3, #1
 800034a:	603b      	str	r3, [r7, #0]
      
      temp = (temp / kdiv);
 800034c:	68fa      	ldr	r2, [r7, #12]
 800034e:	683b      	ldr	r3, [r7, #0]
 8000350:	fbb2 f3f3 	udiv	r3, r2, r3
 8000354:	60fb      	str	r3, [r7, #12]
 8000356:	e001      	b.n	800035c <SystemCoreClockUpdate+0x94>
    }
  }
  else
  {
    /* fOFI is clock source for fSYS */    
    temp = OFI_FREQUENCY;
 8000358:	4b0e      	ldr	r3, [pc, #56]	; (8000394 <SystemCoreClockUpdate+0xcc>)
 800035a:	60fb      	str	r3, [r7, #12]
  }

  temp = temp / ((SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSDIV_Msk) + 1);
 800035c:	4b0b      	ldr	r3, [pc, #44]	; (800038c <SystemCoreClockUpdate+0xc4>)
 800035e:	68db      	ldr	r3, [r3, #12]
 8000360:	b2db      	uxtb	r3, r3
 8000362:	3301      	adds	r3, #1
 8000364:	68fa      	ldr	r2, [r7, #12]
 8000366:	fbb2 f3f3 	udiv	r3, r2, r3
 800036a:	60fb      	str	r3, [r7, #12]
  temp = temp / ((SCU_CLK->CPUCLKCR & SCU_CLK_CPUCLKCR_CPUDIV_Msk) + 1);
 800036c:	4b07      	ldr	r3, [pc, #28]	; (800038c <SystemCoreClockUpdate+0xc4>)
 800036e:	691b      	ldr	r3, [r3, #16]
 8000370:	f003 0301 	and.w	r3, r3, #1
 8000374:	3301      	adds	r3, #1
 8000376:	68fa      	ldr	r2, [r7, #12]
 8000378:	fbb2 f3f3 	udiv	r3, r2, r3
 800037c:	60fb      	str	r3, [r7, #12]

  SystemCoreClock = temp;
 800037e:	4a06      	ldr	r2, [pc, #24]	; (8000398 <SystemCoreClockUpdate+0xd0>)
 8000380:	68fb      	ldr	r3, [r7, #12]
 8000382:	6013      	str	r3, [r2, #0]
}
 8000384:	3710      	adds	r7, #16
 8000386:	46bd      	mov	sp, r7
 8000388:	bd80      	pop	{r7, pc}
 800038a:	bf00      	nop
 800038c:	50004600 	.word	0x50004600
 8000390:	50004710 	.word	0x50004710
 8000394:	016e3600 	.word	0x016e3600
 8000398:	20005fc0 	.word	0x20005fc0

0800039c <XMC_ERU_Enable>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 ********************************************************************************************************************/
/* Enable the clock and De-assert the ERU module from the reset state. */
void XMC_ERU_Enable(XMC_ERU_t *const eru)
{
 800039c:	b580      	push	{r7, lr}
 800039e:	b082      	sub	sp, #8
 80003a0:	af00      	add	r7, sp, #0
 80003a2:	6078      	str	r0, [r7, #4]
#if defined(XMC_ERU1)
  if (eru == XMC_ERU1)
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	4a07      	ldr	r2, [pc, #28]	; (80003c4 <XMC_ERU_Enable+0x28>)
 80003a8:	4293      	cmp	r3, r2
 80003aa:	d107      	bne.n	80003bc <XMC_ERU_Enable+0x20>
  {
#if defined(CLOCK_GATING_SUPPORTED)
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_ERU1);
 80003ac:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80003b0:	f000 faea 	bl	8000988 <XMC_SCU_CLOCK_UngatePeripheralClock>
#endif
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_ERU1);
 80003b4:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80003b8:	f000 f976 	bl	80006a8 <XMC_SCU_RESET_DeassertPeripheralReset>
  }
#else
  XMC_UNUSED_ARG(eru);
#endif
}
 80003bc:	3708      	adds	r7, #8
 80003be:	46bd      	mov	sp, r7
 80003c0:	bd80      	pop	{r7, pc}
 80003c2:	bf00      	nop
 80003c4:	40044000 	.word	0x40044000

080003c8 <XMC_GPIO_Init>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_GPIO_Init(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_CONFIG_t *const config)
{
 80003c8:	b480      	push	{r7}
 80003ca:	b085      	sub	sp, #20
 80003cc:	af00      	add	r7, sp, #0
 80003ce:	60f8      	str	r0, [r7, #12]
 80003d0:	460b      	mov	r3, r1
 80003d2:	607a      	str	r2, [r7, #4]
 80003d4:	72fb      	strb	r3, [r7, #11]
  XMC_ASSERT("XMC_GPIO_Init: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_Init: Invalid mode", XMC_GPIO_IsModeValid(config->mode));

  /* Switch to input */
  port->IOCR[pin >> 2U] &= (uint32_t)~(PORT_IOCR_PC_Msk << (PORT_IOCR_PC_Size * (pin & 0x3U)));
 80003d6:	7afb      	ldrb	r3, [r7, #11]
 80003d8:	089b      	lsrs	r3, r3, #2
 80003da:	b2db      	uxtb	r3, r3
 80003dc:	4618      	mov	r0, r3
 80003de:	7afb      	ldrb	r3, [r7, #11]
 80003e0:	089b      	lsrs	r3, r3, #2
 80003e2:	b2db      	uxtb	r3, r3
 80003e4:	461a      	mov	r2, r3
 80003e6:	68fb      	ldr	r3, [r7, #12]
 80003e8:	3204      	adds	r2, #4
 80003ea:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80003ee:	7afb      	ldrb	r3, [r7, #11]
 80003f0:	f003 0303 	and.w	r3, r3, #3
 80003f4:	00db      	lsls	r3, r3, #3
 80003f6:	4619      	mov	r1, r3
 80003f8:	23f8      	movs	r3, #248	; 0xf8
 80003fa:	408b      	lsls	r3, r1
 80003fc:	43db      	mvns	r3, r3
 80003fe:	ea02 0103 	and.w	r1, r2, r3
 8000402:	68fb      	ldr	r3, [r7, #12]
 8000404:	1d02      	adds	r2, r0, #4
 8000406:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* HW port control is disabled */
  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
 800040a:	68fb      	ldr	r3, [r7, #12]
 800040c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800040e:	7afb      	ldrb	r3, [r7, #11]
 8000410:	005b      	lsls	r3, r3, #1
 8000412:	4619      	mov	r1, r3
 8000414:	2303      	movs	r3, #3
 8000416:	408b      	lsls	r3, r1
 8000418:	43db      	mvns	r3, r3
 800041a:	401a      	ands	r2, r3
 800041c:	68fb      	ldr	r3, [r7, #12]
 800041e:	675a      	str	r2, [r3, #116]	; 0x74


  /* Enable digital input */
  if (XMC_GPIO_CHECK_ANALOG_PORT(port))
 8000420:	68fb      	ldr	r3, [r7, #12]
 8000422:	4a38      	ldr	r2, [pc, #224]	; (8000504 <XMC_GPIO_Init+0x13c>)
 8000424:	4293      	cmp	r3, r2
 8000426:	d10a      	bne.n	800043e <XMC_GPIO_Init+0x76>
  {
    port->PDISC &= ~(uint32_t)((uint32_t)0x1U << pin);
 8000428:	68fb      	ldr	r3, [r7, #12]
 800042a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800042c:	7afb      	ldrb	r3, [r7, #11]
 800042e:	2101      	movs	r1, #1
 8000430:	fa01 f303 	lsl.w	r3, r1, r3
 8000434:	43db      	mvns	r3, r3
 8000436:	401a      	ands	r2, r3
 8000438:	68fb      	ldr	r3, [r7, #12]
 800043a:	661a      	str	r2, [r3, #96]	; 0x60
 800043c:	e042      	b.n	80004c4 <XMC_GPIO_Init+0xfc>
  }
  else
  {
    if ((config->mode & XMC_GPIO_MODE_OE) != 0)
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	781b      	ldrb	r3, [r3, #0]
 8000442:	b2db      	uxtb	r3, r3
 8000444:	b25b      	sxtb	r3, r3
 8000446:	2b00      	cmp	r3, #0
 8000448:	da3c      	bge.n	80004c4 <XMC_GPIO_Init+0xfc>
    {
      /* If output is enabled */

      /* Set output level */
      port->OMR = (uint32_t)config->output_level << pin;
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	685a      	ldr	r2, [r3, #4]
 800044e:	7afb      	ldrb	r3, [r7, #11]
 8000450:	409a      	lsls	r2, r3
 8000452:	68fb      	ldr	r3, [r7, #12]
 8000454:	605a      	str	r2, [r3, #4]

      /* Set output driver strength */
      port->PDR[pin >> 3U] &= (uint32_t)~(PORT_PDR_Msk << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U)));
 8000456:	7afb      	ldrb	r3, [r7, #11]
 8000458:	08db      	lsrs	r3, r3, #3
 800045a:	b2db      	uxtb	r3, r3
 800045c:	4618      	mov	r0, r3
 800045e:	7afb      	ldrb	r3, [r7, #11]
 8000460:	08db      	lsrs	r3, r3, #3
 8000462:	b2db      	uxtb	r3, r3
 8000464:	461a      	mov	r2, r3
 8000466:	68fb      	ldr	r3, [r7, #12]
 8000468:	3210      	adds	r2, #16
 800046a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800046e:	7afb      	ldrb	r3, [r7, #11]
 8000470:	f003 0307 	and.w	r3, r3, #7
 8000474:	009b      	lsls	r3, r3, #2
 8000476:	4619      	mov	r1, r3
 8000478:	2307      	movs	r3, #7
 800047a:	408b      	lsls	r3, r1
 800047c:	43db      	mvns	r3, r3
 800047e:	ea02 0103 	and.w	r1, r2, r3
 8000482:	68fb      	ldr	r3, [r7, #12]
 8000484:	f100 0210 	add.w	r2, r0, #16
 8000488:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      port->PDR[pin >> 3U] |= (uint32_t)config->output_strength << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U));
 800048c:	7afb      	ldrb	r3, [r7, #11]
 800048e:	08db      	lsrs	r3, r3, #3
 8000490:	b2db      	uxtb	r3, r3
 8000492:	4618      	mov	r0, r3
 8000494:	7afb      	ldrb	r3, [r7, #11]
 8000496:	08db      	lsrs	r3, r3, #3
 8000498:	b2db      	uxtb	r3, r3
 800049a:	461a      	mov	r2, r3
 800049c:	68fb      	ldr	r3, [r7, #12]
 800049e:	3210      	adds	r2, #16
 80004a0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	7a1b      	ldrb	r3, [r3, #8]
 80004a8:	4619      	mov	r1, r3
 80004aa:	7afb      	ldrb	r3, [r7, #11]
 80004ac:	f003 0307 	and.w	r3, r3, #7
 80004b0:	009b      	lsls	r3, r3, #2
 80004b2:	fa01 f303 	lsl.w	r3, r1, r3
 80004b6:	ea42 0103 	orr.w	r1, r2, r3
 80004ba:	68fb      	ldr	r3, [r7, #12]
 80004bc:	f100 0210 	add.w	r2, r0, #16
 80004c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    }
  }

  /* Set mode */
  port->IOCR[pin >> 2U] |= (uint32_t)config->mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
 80004c4:	7afb      	ldrb	r3, [r7, #11]
 80004c6:	089b      	lsrs	r3, r3, #2
 80004c8:	b2db      	uxtb	r3, r3
 80004ca:	4618      	mov	r0, r3
 80004cc:	7afb      	ldrb	r3, [r7, #11]
 80004ce:	089b      	lsrs	r3, r3, #2
 80004d0:	b2db      	uxtb	r3, r3
 80004d2:	461a      	mov	r2, r3
 80004d4:	68fb      	ldr	r3, [r7, #12]
 80004d6:	3204      	adds	r2, #4
 80004d8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	781b      	ldrb	r3, [r3, #0]
 80004e0:	4619      	mov	r1, r3
 80004e2:	7afb      	ldrb	r3, [r7, #11]
 80004e4:	f003 0303 	and.w	r3, r3, #3
 80004e8:	00db      	lsls	r3, r3, #3
 80004ea:	fa01 f303 	lsl.w	r3, r1, r3
 80004ee:	ea42 0103 	orr.w	r1, r2, r3
 80004f2:	68fb      	ldr	r3, [r7, #12]
 80004f4:	1d02      	adds	r2, r0, #4
 80004f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 80004fa:	3714      	adds	r7, #20
 80004fc:	46bd      	mov	sp, r7
 80004fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000502:	4770      	bx	lr
 8000504:	48028e00 	.word	0x48028e00

08000508 <XMC_SCU_CLOCK_GetCpuClockFrequency>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_SCU_CLOCK_GetPeripheralClockFrequency(), XMC_SCU_CLOCK_GatePeripheralClock() \n\n\n
 */
__STATIC_INLINE uint32_t XMC_SCU_CLOCK_GetCpuClockFrequency(void)
{
 8000508:	b480      	push	{r7}
 800050a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800050c:	4b03      	ldr	r3, [pc, #12]	; (800051c <XMC_SCU_CLOCK_GetCpuClockFrequency+0x14>)
 800050e:	681b      	ldr	r3, [r3, #0]
}
 8000510:	4618      	mov	r0, r3
 8000512:	46bd      	mov	sp, r7
 8000514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop
 800051c:	20005fc0 	.word	0x20005fc0

08000520 <XMC_SCU_GetMirrorStatus>:
 * that a corresponding register of the hibernate domain is ready to accept a write or that the communication interface
 * is busy with executing the previous operation.\n
 * Note: There is no hibernate domain in XMC1x devices. This register is retained for legacy purpose.
 */
__STATIC_INLINE uint32_t XMC_SCU_GetMirrorStatus(void)
{
 8000520:	b480      	push	{r7}
 8000522:	af00      	add	r7, sp, #0
  return (SCU_GENERAL->MIRRSTS);
 8000524:	4b03      	ldr	r3, [pc, #12]	; (8000534 <XMC_SCU_GetMirrorStatus+0x14>)
 8000526:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
}
 800052a:	4618      	mov	r0, r3
 800052c:	46bd      	mov	sp, r7
 800052e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000532:	4770      	bx	lr
 8000534:	50004000 	.word	0x50004000

08000538 <XMC_SCU_lDelay>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 ********************************************************************************************************************/
/* This is a local function used to generate the delay until register get updated with new configured value.  */
void XMC_SCU_lDelay(uint32_t delay)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b084      	sub	sp, #16
 800053c:	af00      	add	r7, sp, #0
 800053e:	6078      	str	r0, [r7, #4]
  uint32_t i;

  SystemCoreClockUpdate();
 8000540:	f7ff fec2 	bl	80002c8 <SystemCoreClockUpdate>
  delay =  delay * (uint32_t)(SystemCoreClock / FREQ_1MHZ);
 8000544:	4b0b      	ldr	r3, [pc, #44]	; (8000574 <XMC_SCU_lDelay+0x3c>)
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	4a0b      	ldr	r2, [pc, #44]	; (8000578 <XMC_SCU_lDelay+0x40>)
 800054a:	fba2 2303 	umull	r2, r3, r2, r3
 800054e:	0c9a      	lsrs	r2, r3, #18
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	fb02 f303 	mul.w	r3, r2, r3
 8000556:	607b      	str	r3, [r7, #4]

  for (i = 0U; i < delay; ++i)
 8000558:	2300      	movs	r3, #0
 800055a:	60fb      	str	r3, [r7, #12]
 800055c:	e003      	b.n	8000566 <XMC_SCU_lDelay+0x2e>
  {
    __NOP();
 800055e:	bf00      	nop
  uint32_t i;

  SystemCoreClockUpdate();
  delay =  delay * (uint32_t)(SystemCoreClock / FREQ_1MHZ);

  for (i = 0U; i < delay; ++i)
 8000560:	68fb      	ldr	r3, [r7, #12]
 8000562:	3301      	adds	r3, #1
 8000564:	60fb      	str	r3, [r7, #12]
 8000566:	68fa      	ldr	r2, [r7, #12]
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	429a      	cmp	r2, r3
 800056c:	d3f7      	bcc.n	800055e <XMC_SCU_lDelay+0x26>
  {
    __NOP();
  }
}
 800056e:	3710      	adds	r7, #16
 8000570:	46bd      	mov	sp, r7
 8000572:	bd80      	pop	{r7, pc}
 8000574:	20005fc0 	.word	0x20005fc0
 8000578:	431bde83 	.word	0x431bde83

0800057c <XMC_SCU_INTERUPT_GetEventStatus>:
  SCU_INTERRUPT->SRSET |= (uint32_t)event;
}

/* API to retrieve the SCU event status */
XMC_SCU_INTERRUPT_EVENT_t XMC_SCU_INTERUPT_GetEventStatus(void)
{
 800057c:	b480      	push	{r7}
 800057e:	af00      	add	r7, sp, #0
  return (SCU_INTERRUPT->SRRAW);
 8000580:	4b03      	ldr	r3, [pc, #12]	; (8000590 <XMC_SCU_INTERUPT_GetEventStatus+0x14>)
 8000582:	685b      	ldr	r3, [r3, #4]
}
 8000584:	4618      	mov	r0, r3
 8000586:	46bd      	mov	sp, r7
 8000588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop
 8000590:	50004074 	.word	0x50004074

08000594 <XMC_SCU_INTERRUPT_ClearEventStatus>:

/* API to clear the SCU event status */
void XMC_SCU_INTERRUPT_ClearEventStatus(const XMC_SCU_INTERRUPT_EVENT_t event)
{
 8000594:	b480      	push	{r7}
 8000596:	b083      	sub	sp, #12
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
  SCU_INTERRUPT->SRCLR = (uint32_t)event;
 800059c:	4a03      	ldr	r2, [pc, #12]	; (80005ac <XMC_SCU_INTERRUPT_ClearEventStatus+0x18>)
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	60d3      	str	r3, [r2, #12]
}
 80005a2:	370c      	adds	r7, #12
 80005a4:	46bd      	mov	sp, r7
 80005a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005aa:	4770      	bx	lr
 80005ac:	50004074 	.word	0x50004074

080005b0 <XMC_SCU_CLOCK_Init>:
  return (SCU_GENERAL->RMDATA);
}

/* API to initialize the clock tree */
void XMC_SCU_CLOCK_Init(const XMC_SCU_CLOCK_CONFIG_t *const config)
{
 80005b0:	b5b0      	push	{r4, r5, r7, lr}
 80005b2:	b084      	sub	sp, #16
 80005b4:	af02      	add	r7, sp, #8
 80005b6:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("", ((config->fstdby_clksrc == XMC_SCU_HIB_STDBYCLKSRC_OSCULP) && (config->enable_osculp == true)) ||
             (config->fstdby_clksrc != XMC_SCU_HIB_STDBYCLKSRC_OSCULP));
  XMC_ASSERT("", ((config->syspll_config.clksrc == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP) &&
                  (config->enable_oschp == true)) || (config->syspll_config.clksrc != XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP));

  XMC_SCU_CLOCK_SetSystemClockSource(XMC_SCU_CLOCK_SYSCLKSRC_OFI);
 80005b8:	2000      	movs	r0, #0
 80005ba:	f000 f8c5 	bl	8000748 <XMC_SCU_CLOCK_SetSystemClockSource>

  XMC_SCU_HIB_EnableHibernateDomain();
 80005be:	f000 fab3 	bl	8000b28 <XMC_SCU_HIB_EnableHibernateDomain>

  if (config->enable_osculp == true)
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	79db      	ldrb	r3, [r3, #7]
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d00a      	beq.n	80005e0 <XMC_SCU_CLOCK_Init+0x30>
  {
    XMC_SCU_CLOCK_EnableLowPowerOscillator();
 80005ca:	f000 faeb 	bl	8000ba4 <XMC_SCU_CLOCK_EnableLowPowerOscillator>
    while (XMC_SCU_CLOCK_IsLowPowerOscillatorStable() == false);
 80005ce:	bf00      	nop
 80005d0:	f000 fad6 	bl	8000b80 <XMC_SCU_CLOCK_IsLowPowerOscillatorStable>
 80005d4:	4603      	mov	r3, r0
 80005d6:	f083 0301 	eor.w	r3, r3, #1
 80005da:	b2db      	uxtb	r3, r3
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d1f7      	bne.n	80005d0 <XMC_SCU_CLOCK_Init+0x20>
  }

  XMC_SCU_HIB_SetStandbyClockSource(config->fstdby_clksrc);
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	7a5b      	ldrb	r3, [r3, #9]
 80005e4:	4618      	mov	r0, r3
 80005e6:	f000 f929 	bl	800083c <XMC_SCU_HIB_SetStandbyClockSource>
  while (XMC_SCU_GetMirrorStatus() != 0)
 80005ea:	bf00      	nop
 80005ec:	f7ff ff98 	bl	8000520 <XMC_SCU_GetMirrorStatus>
 80005f0:	4603      	mov	r3, r0
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d1fa      	bne.n	80005ec <XMC_SCU_CLOCK_Init+0x3c>
  {
    /* Wait until update of the stanby clock source is done in the HIB domain */
  }

  XMC_SCU_CLOCK_SetBackupClockCalibrationMode(config->calibration_mode);
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	7a1b      	ldrb	r3, [r3, #8]
 80005fa:	4618      	mov	r0, r3
 80005fc:	f000 fa6e 	bl	8000adc <XMC_SCU_CLOCK_SetBackupClockCalibrationMode>

  XMC_SCU_CLOCK_SetSystemClockDivider((uint32_t)config->fsys_clkdiv);
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	7c1b      	ldrb	r3, [r3, #16]
 8000604:	4618      	mov	r0, r3
 8000606:	f000 f937 	bl	8000878 <XMC_SCU_CLOCK_SetSystemClockDivider>
  XMC_SCU_CLOCK_SetCpuClockDivider((uint32_t)config->fcpu_clkdiv);
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	7c5b      	ldrb	r3, [r3, #17]
 800060e:	4618      	mov	r0, r3
 8000610:	f000 f95a 	bl	80008c8 <XMC_SCU_CLOCK_SetCpuClockDivider>
  XMC_SCU_CLOCK_SetCcuClockDivider((uint32_t)config->fccu_clkdiv);
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	7c9b      	ldrb	r3, [r3, #18]
 8000618:	4618      	mov	r0, r3
 800061a:	f000 f941 	bl	80008a0 <XMC_SCU_CLOCK_SetCcuClockDivider>
  XMC_SCU_CLOCK_SetPeripheralClockDivider((uint32_t)config->fperipheral_clkdiv);
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	7cdb      	ldrb	r3, [r3, #19]
 8000622:	4618      	mov	r0, r3
 8000624:	f000 f964 	bl	80008f0 <XMC_SCU_CLOCK_SetPeripheralClockDivider>

  if (config->enable_oschp == true)
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	799b      	ldrb	r3, [r3, #6]
 800062c:	2b00      	cmp	r3, #0
 800062e:	d00a      	beq.n	8000646 <XMC_SCU_CLOCK_Init+0x96>
  {
    XMC_SCU_CLOCK_EnableHighPerformanceOscillator();
 8000630:	f000 faf0 	bl	8000c14 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator>
    while (XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable() == false);
 8000634:	bf00      	nop
 8000636:	f000 fb15 	bl	8000c64 <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable>
 800063a:	4603      	mov	r3, r0
 800063c:	f083 0301 	eor.w	r3, r3, #1
 8000640:	b2db      	uxtb	r3, r3
 8000642:	2b00      	cmp	r3, #0
 8000644:	d1f7      	bne.n	8000636 <XMC_SCU_CLOCK_Init+0x86>
  }

  if (config->syspll_config.mode == XMC_SCU_CLOCK_SYSPLL_MODE_DISABLED)
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	78db      	ldrb	r3, [r3, #3]
 800064a:	2b00      	cmp	r3, #0
 800064c:	d109      	bne.n	8000662 <XMC_SCU_CLOCK_Init+0xb2>
  {
    /* Do not enable PLL Power Down Mode when the OSC Watchdog is enabled */
    if (config->enable_oschp == false)
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	799b      	ldrb	r3, [r3, #6]
 8000652:	f083 0301 	eor.w	r3, r3, #1
 8000656:	b2db      	uxtb	r3, r3
 8000658:	2b00      	cmp	r3, #0
 800065a:	d017      	beq.n	800068c <XMC_SCU_CLOCK_Init+0xdc>
    {
      XMC_SCU_CLOCK_DisableSystemPll();
 800065c:	f000 fb26 	bl	8000cac <XMC_SCU_CLOCK_DisableSystemPll>
 8000660:	e014      	b.n	800068c <XMC_SCU_CLOCK_Init+0xdc>
    }
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
 8000662:	f000 fb13 	bl	8000c8c <XMC_SCU_CLOCK_EnableSystemPll>
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	8899      	ldrh	r1, [r3, #4]
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	78da      	ldrb	r2, [r3, #3]
                                 config->syspll_config.mode,
                                 (uint32_t)config->syspll_config.p_div,
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	785b      	ldrb	r3, [r3, #1]
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 8000672:	461d      	mov	r5, r3
                                 config->syspll_config.mode,
                                 (uint32_t)config->syspll_config.p_div,
                                 (uint32_t)config->syspll_config.n_div,
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	781b      	ldrb	r3, [r3, #0]
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 8000678:	461c      	mov	r4, r3
                                 config->syspll_config.mode,
                                 (uint32_t)config->syspll_config.p_div,
                                 (uint32_t)config->syspll_config.n_div,
                                 (uint32_t)config->syspll_config.k_div);
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	789b      	ldrb	r3, [r3, #2]
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 800067e:	9300      	str	r3, [sp, #0]
 8000680:	4608      	mov	r0, r1
 8000682:	4611      	mov	r1, r2
 8000684:	462a      	mov	r2, r5
 8000686:	4623      	mov	r3, r4
 8000688:	f000 fb20 	bl	8000ccc <XMC_SCU_CLOCK_StartSystemPll>
                                 (uint32_t)config->syspll_config.n_div,
                                 (uint32_t)config->syspll_config.k_div);
  }

  /* use SYSPLL? */
  if (config->fsys_clksrc == XMC_SCU_CLOCK_SYSCLKSRC_PLL)
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	68db      	ldr	r3, [r3, #12]
 8000690:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000694:	d103      	bne.n	800069e <XMC_SCU_CLOCK_Init+0xee>
  {
    XMC_SCU_CLOCK_SetSystemClockSource(XMC_SCU_CLOCK_SYSCLKSRC_PLL);
 8000696:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800069a:	f000 f855 	bl	8000748 <XMC_SCU_CLOCK_SetSystemClockSource>
  }
  SystemCoreClockUpdate();
 800069e:	f7ff fe13 	bl	80002c8 <SystemCoreClockUpdate>
}
 80006a2:	3708      	adds	r7, #8
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bdb0      	pop	{r4, r5, r7, pc}

080006a8 <XMC_SCU_RESET_DeassertPeripheralReset>:
  *(volatile uint32_t *)(&(SCU_RESET->PRSET0) + (index * 3U)) = (uint32_t)mask;
}

/* API to manually de-assert a reset request */
void XMC_SCU_RESET_DeassertPeripheralReset(const XMC_SCU_PERIPHERAL_RESET_t peripheral)
{
 80006a8:	b480      	push	{r7}
 80006aa:	b085      	sub	sp, #20
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
  uint32_t index = (uint32_t)((((uint32_t)peripheral) & 0xf0000000UL) >> 28UL);
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	0f1b      	lsrs	r3, r3, #28
 80006b4:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80006bc:	60bb      	str	r3, [r7, #8]

  *(volatile uint32_t *)(&(SCU_RESET->PRCLR0) + (index * 3U)) = (uint32_t)mask;
 80006be:	68fa      	ldr	r2, [r7, #12]
 80006c0:	4613      	mov	r3, r2
 80006c2:	005b      	lsls	r3, r3, #1
 80006c4:	4413      	add	r3, r2
 80006c6:	009b      	lsls	r3, r3, #2
 80006c8:	461a      	mov	r2, r3
 80006ca:	4b04      	ldr	r3, [pc, #16]	; (80006dc <XMC_SCU_RESET_DeassertPeripheralReset+0x34>)
 80006cc:	4413      	add	r3, r2
 80006ce:	68ba      	ldr	r2, [r7, #8]
 80006d0:	601a      	str	r2, [r3, #0]
}
 80006d2:	3714      	adds	r7, #20
 80006d4:	46bd      	mov	sp, r7
 80006d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006da:	4770      	bx	lr
 80006dc:	50004414 	.word	0x50004414

080006e0 <XMC_SCU_RESET_IsPeripheralResetAsserted>:

/* Find out if the peripheral reset is asserted */
bool XMC_SCU_RESET_IsPeripheralResetAsserted(const XMC_SCU_PERIPHERAL_RESET_t peripheral)
{
 80006e0:	b480      	push	{r7}
 80006e2:	b085      	sub	sp, #20
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
  uint32_t index = (uint32_t)((((uint32_t)peripheral) & 0xf0000000UL) >> 28UL);
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	0f1b      	lsrs	r3, r3, #28
 80006ec:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80006f4:	60bb      	str	r3, [r7, #8]

  return ((*(const volatile uint32_t *)(&(SCU_RESET->PRSTAT0) + (index * 3U)) & mask) != 0U);
 80006f6:	68fa      	ldr	r2, [r7, #12]
 80006f8:	4613      	mov	r3, r2
 80006fa:	005b      	lsls	r3, r3, #1
 80006fc:	4413      	add	r3, r2
 80006fe:	009b      	lsls	r3, r3, #2
 8000700:	461a      	mov	r2, r3
 8000702:	4b08      	ldr	r3, [pc, #32]	; (8000724 <XMC_SCU_RESET_IsPeripheralResetAsserted+0x44>)
 8000704:	4413      	add	r3, r2
 8000706:	681a      	ldr	r2, [r3, #0]
 8000708:	68bb      	ldr	r3, [r7, #8]
 800070a:	4013      	ands	r3, r2
 800070c:	2b00      	cmp	r3, #0
 800070e:	bf14      	ite	ne
 8000710:	2301      	movne	r3, #1
 8000712:	2300      	moveq	r3, #0
 8000714:	b2db      	uxtb	r3, r3
}
 8000716:	4618      	mov	r0, r3
 8000718:	3714      	adds	r7, #20
 800071a:	46bd      	mov	sp, r7
 800071c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000720:	4770      	bx	lr
 8000722:	bf00      	nop
 8000724:	5000440c 	.word	0x5000440c

08000728 <XMC_SCU_CLOCK_GetPeripheralClockFrequency>:

/*
 * API to retrieve clock frequency of peripherals on the peripheral bus using a shared functional clock
 */
uint32_t XMC_SCU_CLOCK_GetPeripheralClockFrequency(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	af00      	add	r7, sp, #0
  return (uint32_t)(XMC_SCU_CLOCK_GetCpuClockFrequency() >>
 800072c:	f7ff feec 	bl	8000508 <XMC_SCU_CLOCK_GetCpuClockFrequency>
 8000730:	4602      	mov	r2, r0
                    ((SCU_CLK->PBCLKCR & SCU_CLK_PBCLKCR_PBDIV_Msk) >> SCU_CLK_PBCLKCR_PBDIV_Pos));
 8000732:	4b04      	ldr	r3, [pc, #16]	; (8000744 <XMC_SCU_CLOCK_GetPeripheralClockFrequency+0x1c>)
 8000734:	695b      	ldr	r3, [r3, #20]
/*
 * API to retrieve clock frequency of peripherals on the peripheral bus using a shared functional clock
 */
uint32_t XMC_SCU_CLOCK_GetPeripheralClockFrequency(void)
{
  return (uint32_t)(XMC_SCU_CLOCK_GetCpuClockFrequency() >>
 8000736:	f003 0301 	and.w	r3, r3, #1
 800073a:	fa22 f303 	lsr.w	r3, r2, r3
                    ((SCU_CLK->PBCLKCR & SCU_CLK_PBCLKCR_PBDIV_Msk) >> SCU_CLK_PBCLKCR_PBDIV_Pos));
}
 800073e:	4618      	mov	r0, r3
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	50004600 	.word	0x50004600

08000748 <XMC_SCU_CLOCK_SetSystemClockSource>:

/* API to select fSYS */
void XMC_SCU_CLOCK_SetSystemClockSource(const XMC_SCU_CLOCK_SYSCLKSRC_t source)
{
 8000748:	b480      	push	{r7}
 800074a:	b083      	sub	sp, #12
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSSEL_Msk)) |
 8000750:	4906      	ldr	r1, [pc, #24]	; (800076c <XMC_SCU_CLOCK_SetSystemClockSource+0x24>)
 8000752:	4b06      	ldr	r3, [pc, #24]	; (800076c <XMC_SCU_CLOCK_SetSystemClockSource+0x24>)
 8000754:	68db      	ldr	r3, [r3, #12]
 8000756:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	4313      	orrs	r3, r2
 800075e:	60cb      	str	r3, [r1, #12]
                      ((uint32_t)source);
}
 8000760:	370c      	adds	r7, #12
 8000762:	46bd      	mov	sp, r7
 8000764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000768:	4770      	bx	lr
 800076a:	bf00      	nop
 800076c:	50004600 	.word	0x50004600

08000770 <XMC_SCU_CLOCK_SetUsbClockSource>:

/* API to select fUSB */
void XMC_SCU_CLOCK_SetUsbClockSource(const XMC_SCU_CLOCK_USBCLKSRC_t source)
{
 8000770:	b480      	push	{r7}
 8000772:	b083      	sub	sp, #12
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBSEL_Msk)) |
 8000778:	4906      	ldr	r1, [pc, #24]	; (8000794 <XMC_SCU_CLOCK_SetUsbClockSource+0x24>)
 800077a:	4b06      	ldr	r3, [pc, #24]	; (8000794 <XMC_SCU_CLOCK_SetUsbClockSource+0x24>)
 800077c:	699b      	ldr	r3, [r3, #24]
 800077e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	4313      	orrs	r3, r2
 8000786:	618b      	str	r3, [r1, #24]
                      ((uint32_t)source);
}
 8000788:	370c      	adds	r7, #12
 800078a:	46bd      	mov	sp, r7
 800078c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop
 8000794:	50004600 	.word	0x50004600

08000798 <XMC_SCU_CLOCK_SetWdtClockSource>:

/* API to select fWDT */
void XMC_SCU_CLOCK_SetWdtClockSource(const XMC_SCU_CLOCK_WDTCLKSRC_t source)
{
 8000798:	b480      	push	{r7}
 800079a:	b083      	sub	sp, #12
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTSEL_Msk)) |
 80007a0:	4906      	ldr	r1, [pc, #24]	; (80007bc <XMC_SCU_CLOCK_SetWdtClockSource+0x24>)
 80007a2:	4b06      	ldr	r3, [pc, #24]	; (80007bc <XMC_SCU_CLOCK_SetWdtClockSource+0x24>)
 80007a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007a6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	4313      	orrs	r3, r2
 80007ae:	624b      	str	r3, [r1, #36]	; 0x24
                      ((uint32_t)source);
}
 80007b0:	370c      	adds	r7, #12
 80007b2:	46bd      	mov	sp, r7
 80007b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b8:	4770      	bx	lr
 80007ba:	bf00      	nop
 80007bc:	50004600 	.word	0x50004600

080007c0 <XMC_SCU_CLOCK_SetSystemPllClockSource>:
                      ((uint32_t)source);
}

/* API to select fPLL */
void XMC_SCU_CLOCK_SetSystemPllClockSource(const XMC_SCU_CLOCK_SYSPLLCLKSRC_t source)
{
 80007c0:	b480      	push	{r7}
 80007c2:	b083      	sub	sp, #12
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	4603      	mov	r3, r0
 80007c8:	80fb      	strh	r3, [r7, #6]
  /* Check input clock */
  if (source == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP) /* Select PLLClockSource */
 80007ca:	88fb      	ldrh	r3, [r7, #6]
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d108      	bne.n	80007e2 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x22>
  {
    SCU_PLL->PLLCON2 &= (uint32_t)~(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
 80007d0:	4a0a      	ldr	r2, [pc, #40]	; (80007fc <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 80007d2:	4b0a      	ldr	r3, [pc, #40]	; (80007fc <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 80007d4:	68db      	ldr	r3, [r3, #12]
 80007d6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80007da:	f023 0301 	bic.w	r3, r3, #1
 80007de:	60d3      	str	r3, [r2, #12]
 80007e0:	e007      	b.n	80007f2 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x32>
  }
  else
  {
    SCU_PLL->PLLCON2 |= (uint32_t)(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
 80007e2:	4a06      	ldr	r2, [pc, #24]	; (80007fc <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 80007e4:	4b05      	ldr	r3, [pc, #20]	; (80007fc <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 80007e6:	68db      	ldr	r3, [r3, #12]
 80007e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80007ec:	f043 0301 	orr.w	r3, r3, #1
 80007f0:	60d3      	str	r3, [r2, #12]
  }
}
 80007f2:	370c      	adds	r7, #12
 80007f4:	46bd      	mov	sp, r7
 80007f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fa:	4770      	bx	lr
 80007fc:	50004710 	.word	0x50004710

08000800 <XMC_SCU_HIB_SetRtcClockSource>:

/* API to select fRTC */
void XMC_SCU_HIB_SetRtcClockSource(const XMC_SCU_HIB_RTCCLKSRC_t source)
{
 8000800:	b480      	push	{r7}
 8000802:	b083      	sub	sp, #12
 8000804:	af00      	add	r7, sp, #0
 8000806:	4603      	mov	r3, r0
 8000808:	71fb      	strb	r3, [r7, #7]
  /* Wait until the update of HDCR register in hibernate domain is completed */
  while ((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 800080a:	bf00      	nop
 800080c:	4b09      	ldr	r3, [pc, #36]	; (8000834 <XMC_SCU_HIB_SetRtcClockSource+0x34>)
 800080e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8000812:	f003 0308 	and.w	r3, r3, #8
 8000816:	2b00      	cmp	r3, #0
 8000818:	d1f8      	bne.n	800080c <XMC_SCU_HIB_SetRtcClockSource+0xc>
  {
  }

  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_RCS_Msk)) |
 800081a:	4907      	ldr	r1, [pc, #28]	; (8000838 <XMC_SCU_HIB_SetRtcClockSource+0x38>)
 800081c:	4b06      	ldr	r3, [pc, #24]	; (8000838 <XMC_SCU_HIB_SetRtcClockSource+0x38>)
 800081e:	68db      	ldr	r3, [r3, #12]
 8000820:	f023 0240 	bic.w	r2, r3, #64	; 0x40
                        ((uint32_t)source);
 8000824:	79fb      	ldrb	r3, [r7, #7]
  /* Wait until the update of HDCR register in hibernate domain is completed */
  while ((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
  {
  }

  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_RCS_Msk)) |
 8000826:	4313      	orrs	r3, r2
 8000828:	60cb      	str	r3, [r1, #12]
                        ((uint32_t)source);
}
 800082a:	370c      	adds	r7, #12
 800082c:	46bd      	mov	sp, r7
 800082e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000832:	4770      	bx	lr
 8000834:	50004000 	.word	0x50004000
 8000838:	50004300 	.word	0x50004300

0800083c <XMC_SCU_HIB_SetStandbyClockSource>:

/* API to select fSTDBY */
void XMC_SCU_HIB_SetStandbyClockSource(const XMC_SCU_HIB_STDBYCLKSRC_t source)
{
 800083c:	b480      	push	{r7}
 800083e:	b083      	sub	sp, #12
 8000840:	af00      	add	r7, sp, #0
 8000842:	4603      	mov	r3, r0
 8000844:	71fb      	strb	r3, [r7, #7]
  while ((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 8000846:	bf00      	nop
 8000848:	4b09      	ldr	r3, [pc, #36]	; (8000870 <XMC_SCU_HIB_SetStandbyClockSource+0x34>)
 800084a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800084e:	f003 0308 	and.w	r3, r3, #8
 8000852:	2b00      	cmp	r3, #0
 8000854:	d1f8      	bne.n	8000848 <XMC_SCU_HIB_SetStandbyClockSource+0xc>
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_STDBYSEL_Msk)) |
 8000856:	4907      	ldr	r1, [pc, #28]	; (8000874 <XMC_SCU_HIB_SetStandbyClockSource+0x38>)
 8000858:	4b06      	ldr	r3, [pc, #24]	; (8000874 <XMC_SCU_HIB_SetStandbyClockSource+0x38>)
 800085a:	68db      	ldr	r3, [r3, #12]
 800085c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
                        ((uint32_t)source);
 8000860:	79fb      	ldrb	r3, [r7, #7]
{
  while ((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_STDBYSEL_Msk)) |
 8000862:	4313      	orrs	r3, r2
 8000864:	60cb      	str	r3, [r1, #12]
                        ((uint32_t)source);
}
 8000866:	370c      	adds	r7, #12
 8000868:	46bd      	mov	sp, r7
 800086a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086e:	4770      	bx	lr
 8000870:	50004000 	.word	0x50004000
 8000874:	50004300 	.word	0x50004300

08000878 <XMC_SCU_CLOCK_SetSystemClockDivider>:

/* API to program the divider placed between fsys and its parent */
void XMC_SCU_CLOCK_SetSystemClockDivider(const uint32_t divider)
{
 8000878:	b480      	push	{r7}
 800087a:	b083      	sub	sp, #12
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetSystemClockDivider:Wrong clock divider value",
             (divider <= (SCU_CLK_SYSCLKCR_SYSDIV_Msk + 1UL)) );

  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSDIV_Msk)) |
 8000880:	4906      	ldr	r1, [pc, #24]	; (800089c <XMC_SCU_CLOCK_SetSystemClockDivider+0x24>)
 8000882:	4b06      	ldr	r3, [pc, #24]	; (800089c <XMC_SCU_CLOCK_SetSystemClockDivider+0x24>)
 8000884:	68db      	ldr	r3, [r3, #12]
 8000886:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
                      ((uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_SYSCLKCR_SYSDIV_Pos));
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetSystemClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetSystemClockDivider:Wrong clock divider value",
             (divider <= (SCU_CLK_SYSCLKCR_SYSDIV_Msk + 1UL)) );

  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSDIV_Msk)) |
 800088e:	4313      	orrs	r3, r2
 8000890:	60cb      	str	r3, [r1, #12]
                      ((uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_SYSCLKCR_SYSDIV_Pos));
}
 8000892:	370c      	adds	r7, #12
 8000894:	46bd      	mov	sp, r7
 8000896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089a:	4770      	bx	lr
 800089c:	50004600 	.word	0x50004600

080008a0 <XMC_SCU_CLOCK_SetCcuClockDivider>:

/* API to program the divider placed between fccu and its parent */
void XMC_SCU_CLOCK_SetCcuClockDivider(const uint32_t divider)
{
 80008a0:	b480      	push	{r7}
 80008a2:	b083      	sub	sp, #12
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetCapcomClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CCUCLKCR = (SCU_CLK->CCUCLKCR & ((uint32_t)~SCU_CLK_CCUCLKCR_CCUDIV_Msk)) |
 80008a8:	4906      	ldr	r1, [pc, #24]	; (80008c4 <XMC_SCU_CLOCK_SetCcuClockDivider+0x24>)
 80008aa:	4b06      	ldr	r3, [pc, #24]	; (80008c4 <XMC_SCU_CLOCK_SetCcuClockDivider+0x24>)
 80008ac:	6a1b      	ldr	r3, [r3, #32]
 80008ae:	f023 0201 	bic.w	r2, r3, #1
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CCUCLKCR_CCUDIV_Pos);
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	3b01      	subs	r3, #1
/* API to program the divider placed between fccu and its parent */
void XMC_SCU_CLOCK_SetCcuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetCapcomClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CCUCLKCR = (SCU_CLK->CCUCLKCR & ((uint32_t)~SCU_CLK_CCUCLKCR_CCUDIV_Msk)) |
 80008b6:	4313      	orrs	r3, r2
 80008b8:	620b      	str	r3, [r1, #32]
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CCUCLKCR_CCUDIV_Pos);
}
 80008ba:	370c      	adds	r7, #12
 80008bc:	46bd      	mov	sp, r7
 80008be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c2:	4770      	bx	lr
 80008c4:	50004600 	.word	0x50004600

080008c8 <XMC_SCU_CLOCK_SetCpuClockDivider>:

/* API to program the divider placed between fcpu and its parent */
void XMC_SCU_CLOCK_SetCpuClockDivider(const uint32_t divider)
{
 80008c8:	b480      	push	{r7}
 80008ca:	b083      	sub	sp, #12
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetCpuClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CPUCLKCR = (SCU_CLK->CPUCLKCR & ((uint32_t)~SCU_CLK_CPUCLKCR_CPUDIV_Msk)) |
 80008d0:	4906      	ldr	r1, [pc, #24]	; (80008ec <XMC_SCU_CLOCK_SetCpuClockDivider+0x24>)
 80008d2:	4b06      	ldr	r3, [pc, #24]	; (80008ec <XMC_SCU_CLOCK_SetCpuClockDivider+0x24>)
 80008d4:	691b      	ldr	r3, [r3, #16]
 80008d6:	f023 0201 	bic.w	r2, r3, #1
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CPUCLKCR_CPUDIV_Pos);
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	3b01      	subs	r3, #1
/* API to program the divider placed between fcpu and its parent */
void XMC_SCU_CLOCK_SetCpuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetCpuClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CPUCLKCR = (SCU_CLK->CPUCLKCR & ((uint32_t)~SCU_CLK_CPUCLKCR_CPUDIV_Msk)) |
 80008de:	4313      	orrs	r3, r2
 80008e0:	610b      	str	r3, [r1, #16]
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CPUCLKCR_CPUDIV_Pos);
}
 80008e2:	370c      	adds	r7, #12
 80008e4:	46bd      	mov	sp, r7
 80008e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ea:	4770      	bx	lr
 80008ec:	50004600 	.word	0x50004600

080008f0 <XMC_SCU_CLOCK_SetPeripheralClockDivider>:

/* API to program the divider placed between fperiph and its parent */
void XMC_SCU_CLOCK_SetPeripheralClockDivider(const uint32_t divider)
{
 80008f0:	b480      	push	{r7}
 80008f2:	b083      	sub	sp, #12
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetPeripheralClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->PBCLKCR = (SCU_CLK->PBCLKCR & ((uint32_t)~SCU_CLK_PBCLKCR_PBDIV_Msk)) |
 80008f8:	4906      	ldr	r1, [pc, #24]	; (8000914 <XMC_SCU_CLOCK_SetPeripheralClockDivider+0x24>)
 80008fa:	4b06      	ldr	r3, [pc, #24]	; (8000914 <XMC_SCU_CLOCK_SetPeripheralClockDivider+0x24>)
 80008fc:	695b      	ldr	r3, [r3, #20]
 80008fe:	f023 0201 	bic.w	r2, r3, #1
                     ((uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_PBCLKCR_PBDIV_Pos));
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	3b01      	subs	r3, #1
/* API to program the divider placed between fperiph and its parent */
void XMC_SCU_CLOCK_SetPeripheralClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetPeripheralClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->PBCLKCR = (SCU_CLK->PBCLKCR & ((uint32_t)~SCU_CLK_PBCLKCR_PBDIV_Msk)) |
 8000906:	4313      	orrs	r3, r2
 8000908:	614b      	str	r3, [r1, #20]
                     ((uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_PBCLKCR_PBDIV_Pos));
}
 800090a:	370c      	adds	r7, #12
 800090c:	46bd      	mov	sp, r7
 800090e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000912:	4770      	bx	lr
 8000914:	50004600 	.word	0x50004600

08000918 <XMC_SCU_CLOCK_SetUsbClockDivider>:

/* API to program the divider placed between fsdmmc and its parent */
void XMC_SCU_CLOCK_SetUsbClockDivider(const uint32_t divider)
{
 8000918:	b480      	push	{r7}
 800091a:	b083      	sub	sp, #12
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetSdmmcClockDivider:Wrong clock divider value",
             (divider <= (SCU_CLK_USBCLKCR_USBDIV_Msk + 1UL)) );

  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBDIV_Msk)) |
 8000920:	4906      	ldr	r1, [pc, #24]	; (800093c <XMC_SCU_CLOCK_SetUsbClockDivider+0x24>)
 8000922:	4b06      	ldr	r3, [pc, #24]	; (800093c <XMC_SCU_CLOCK_SetUsbClockDivider+0x24>)
 8000924:	699b      	ldr	r3, [r3, #24]
 8000926:	f023 0207 	bic.w	r2, r3, #7
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_USBCLKCR_USBDIV_Pos);
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetUsbClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetSdmmcClockDivider:Wrong clock divider value",
             (divider <= (SCU_CLK_USBCLKCR_USBDIV_Msk + 1UL)) );

  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBDIV_Msk)) |
 800092e:	4313      	orrs	r3, r2
 8000930:	618b      	str	r3, [r1, #24]
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_USBCLKCR_USBDIV_Pos);
}
 8000932:	370c      	adds	r7, #12
 8000934:	46bd      	mov	sp, r7
 8000936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093a:	4770      	bx	lr
 800093c:	50004600 	.word	0x50004600

08000940 <XMC_SCU_CLOCK_SetWdtClockDivider>:
}
#endif

/* API to program the divider placed between fwdt and its parent */
void XMC_SCU_CLOCK_SetWdtClockDivider(const uint32_t divider)
{
 8000940:	b480      	push	{r7}
 8000942:	b083      	sub	sp, #12
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetWdtClockDivider:Wrong clock divider value",
             (divider <= (SCU_CLK_WDTCLKCR_WDTDIV_Msk + 1UL) ) );

  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTDIV_Msk)) |
 8000948:	4906      	ldr	r1, [pc, #24]	; (8000964 <XMC_SCU_CLOCK_SetWdtClockDivider+0x24>)
 800094a:	4b06      	ldr	r3, [pc, #24]	; (8000964 <XMC_SCU_CLOCK_SetWdtClockDivider+0x24>)
 800094c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800094e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_WDTCLKCR_WDTDIV_Pos);
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetWdtClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetWdtClockDivider:Wrong clock divider value",
             (divider <= (SCU_CLK_WDTCLKCR_WDTDIV_Msk + 1UL) ) );

  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTDIV_Msk)) |
 8000956:	4313      	orrs	r3, r2
 8000958:	624b      	str	r3, [r1, #36]	; 0x24
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_WDTCLKCR_WDTDIV_Pos);
}
 800095a:	370c      	adds	r7, #12
 800095c:	46bd      	mov	sp, r7
 800095e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000962:	4770      	bx	lr
 8000964:	50004600 	.word	0x50004600

08000968 <XMC_SCU_CLOCK_EnableClock>:
}
#endif

/* API to enable a given module clock */
void XMC_SCU_CLOCK_EnableClock(const XMC_SCU_CLOCK_t clock)
{
 8000968:	b480      	push	{r7}
 800096a:	b083      	sub	sp, #12
 800096c:	af00      	add	r7, sp, #0
 800096e:	4603      	mov	r3, r0
 8000970:	71fb      	strb	r3, [r7, #7]
  SCU_CLK->CLKSET = ((uint32_t)clock);
 8000972:	4a04      	ldr	r2, [pc, #16]	; (8000984 <XMC_SCU_CLOCK_EnableClock+0x1c>)
 8000974:	79fb      	ldrb	r3, [r7, #7]
 8000976:	6053      	str	r3, [r2, #4]
}
 8000978:	370c      	adds	r7, #12
 800097a:	46bd      	mov	sp, r7
 800097c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000980:	4770      	bx	lr
 8000982:	bf00      	nop
 8000984:	50004600 	.word	0x50004600

08000988 <XMC_SCU_CLOCK_UngatePeripheralClock>:
  *(volatile uint32_t *)((&(SCU_CLK->CGATSET0)) + (index * 3U)) = (uint32_t)mask;
}

/* API to ungate a given module clock */
void XMC_SCU_CLOCK_UngatePeripheralClock(const XMC_SCU_PERIPHERAL_CLOCK_t peripheral)
{
 8000988:	b480      	push	{r7}
 800098a:	b085      	sub	sp, #20
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
  uint32_t index = (uint32_t)((peripheral & 0xf0000000UL) >> 28UL);
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	0f1b      	lsrs	r3, r3, #28
 8000994:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (peripheral & (uint32_t)~0xf0000000UL);
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800099c:	60bb      	str	r3, [r7, #8]

  *(volatile uint32_t *)(&(SCU_CLK->CGATCLR0) + (index * 3U)) = (uint32_t)mask;
 800099e:	68fa      	ldr	r2, [r7, #12]
 80009a0:	4613      	mov	r3, r2
 80009a2:	005b      	lsls	r3, r3, #1
 80009a4:	4413      	add	r3, r2
 80009a6:	009b      	lsls	r3, r3, #2
 80009a8:	461a      	mov	r2, r3
 80009aa:	4b04      	ldr	r3, [pc, #16]	; (80009bc <XMC_SCU_CLOCK_UngatePeripheralClock+0x34>)
 80009ac:	4413      	add	r3, r2
 80009ae:	68ba      	ldr	r2, [r7, #8]
 80009b0:	601a      	str	r2, [r3, #0]
}
 80009b2:	3714      	adds	r7, #20
 80009b4:	46bd      	mov	sp, r7
 80009b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ba:	4770      	bx	lr
 80009bc:	50004648 	.word	0x50004648

080009c0 <XMC_SCU_CLOCK_IsPeripheralClockGated>:

/* API to ungate a given module clock */
bool XMC_SCU_CLOCK_IsPeripheralClockGated(const XMC_SCU_PERIPHERAL_CLOCK_t peripheral)
{
 80009c0:	b480      	push	{r7}
 80009c2:	b085      	sub	sp, #20
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
  uint32_t index = ((peripheral & 0xf0000000UL) >> 28UL);
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	0f1b      	lsrs	r3, r3, #28
 80009cc:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (peripheral & (uint32_t)~0xf0000000UL);
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80009d4:	60bb      	str	r3, [r7, #8]

  return ((*(const volatile uint32_t *)(&(SCU_CLK->CGATSTAT0) + (index * 3U)) & mask) != 0U);
 80009d6:	68fa      	ldr	r2, [r7, #12]
 80009d8:	4613      	mov	r3, r2
 80009da:	005b      	lsls	r3, r3, #1
 80009dc:	4413      	add	r3, r2
 80009de:	009b      	lsls	r3, r3, #2
 80009e0:	461a      	mov	r2, r3
 80009e2:	4b08      	ldr	r3, [pc, #32]	; (8000a04 <XMC_SCU_CLOCK_IsPeripheralClockGated+0x44>)
 80009e4:	4413      	add	r3, r2
 80009e6:	681a      	ldr	r2, [r3, #0]
 80009e8:	68bb      	ldr	r3, [r7, #8]
 80009ea:	4013      	ands	r3, r2
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	bf14      	ite	ne
 80009f0:	2301      	movne	r3, #1
 80009f2:	2300      	moveq	r3, #0
 80009f4:	b2db      	uxtb	r3, r3
}
 80009f6:	4618      	mov	r0, r3
 80009f8:	3714      	adds	r7, #20
 80009fa:	46bd      	mov	sp, r7
 80009fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop
 8000a04:	50004640 	.word	0x50004640

08000a08 <XMC_SCU_CLOCK_EnableUsbPll>:
  return ((SCU_POWER->EVRVADCSTAT & SCU_POWER_EVRVADCSTAT_VADC33V_Msk) >> SCU_POWER_EVRVADCSTAT_VADC33V_Pos) * XMC_SCU_POWER_LSB33V;
}

/* API to enable USB PLL for USB clock */
void XMC_SCU_CLOCK_EnableUsbPll(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0
  SCU_PLL->USBPLLCON &= (uint32_t)~(SCU_PLL_USBPLLCON_VCOPWD_Msk | SCU_PLL_USBPLLCON_PLLPWD_Msk);
 8000a0c:	4a05      	ldr	r2, [pc, #20]	; (8000a24 <XMC_SCU_CLOCK_EnableUsbPll+0x1c>)
 8000a0e:	4b05      	ldr	r3, [pc, #20]	; (8000a24 <XMC_SCU_CLOCK_EnableUsbPll+0x1c>)
 8000a10:	695b      	ldr	r3, [r3, #20]
 8000a12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000a16:	f023 0302 	bic.w	r3, r3, #2
 8000a1a:	6153      	str	r3, [r2, #20]
}
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a22:	4770      	bx	lr
 8000a24:	50004710 	.word	0x50004710

08000a28 <XMC_SCU_CLOCK_StartUsbPll>:
  SCU_PLL->USBPLLCON |= (uint32_t)(SCU_PLL_USBPLLCON_VCOPWD_Msk | SCU_PLL_USBPLLCON_PLLPWD_Msk);
}

/* API to configure USB PLL */
void XMC_SCU_CLOCK_StartUsbPll(uint32_t pdiv, uint32_t ndiv)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	b083      	sub	sp, #12
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
 8000a30:	6039      	str	r1, [r7, #0]
  /* Go to bypass the USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_VCOBYP_Msk;
 8000a32:	4a28      	ldr	r2, [pc, #160]	; (8000ad4 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000a34:	4b27      	ldr	r3, [pc, #156]	; (8000ad4 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000a36:	695b      	ldr	r3, [r3, #20]
 8000a38:	f043 0301 	orr.w	r3, r3, #1
 8000a3c:	6153      	str	r3, [r2, #20]
  while ((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOBYST_Msk) == 0U)
 8000a3e:	bf00      	nop
 8000a40:	4b24      	ldr	r3, [pc, #144]	; (8000ad4 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000a42:	691b      	ldr	r3, [r3, #16]
 8000a44:	f003 0301 	and.w	r3, r3, #1
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d0f9      	beq.n	8000a40 <XMC_SCU_CLOCK_StartUsbPll+0x18>
  {
    /* wait for prescaler mode */
  }

  /* disconnect Oscillator from USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_FINDIS_Msk;
 8000a4c:	4a21      	ldr	r2, [pc, #132]	; (8000ad4 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000a4e:	4b21      	ldr	r3, [pc, #132]	; (8000ad4 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000a50:	695b      	ldr	r3, [r3, #20]
 8000a52:	f043 0310 	orr.w	r3, r3, #16
 8000a56:	6153      	str	r3, [r2, #20]

  /* Setup Divider settings for USB PLL */
  SCU_PLL->USBPLLCON = (uint32_t)((uint32_t)((ndiv - 1U) << SCU_PLL_USBPLLCON_NDIV_Pos) |
 8000a58:	491e      	ldr	r1, [pc, #120]	; (8000ad4 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000a5a:	683b      	ldr	r3, [r7, #0]
 8000a5c:	3b01      	subs	r3, #1
 8000a5e:	021a      	lsls	r2, r3, #8
                                  (uint32_t)((pdiv - 1U) << SCU_PLL_USBPLLCON_PDIV_Pos));
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	3b01      	subs	r3, #1
 8000a64:	061b      	lsls	r3, r3, #24

  /* disconnect Oscillator from USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_FINDIS_Msk;

  /* Setup Divider settings for USB PLL */
  SCU_PLL->USBPLLCON = (uint32_t)((uint32_t)((ndiv - 1U) << SCU_PLL_USBPLLCON_NDIV_Pos) |
 8000a66:	4313      	orrs	r3, r2
 8000a68:	614b      	str	r3, [r1, #20]
                                  (uint32_t)((pdiv - 1U) << SCU_PLL_USBPLLCON_PDIV_Pos));

  /* Set OSCDISCDIS */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_OSCDISCDIS_Msk;
 8000a6a:	4a1a      	ldr	r2, [pc, #104]	; (8000ad4 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000a6c:	4b19      	ldr	r3, [pc, #100]	; (8000ad4 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000a6e:	695b      	ldr	r3, [r3, #20]
 8000a70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a74:	6153      	str	r3, [r2, #20]

  /* connect Oscillator to USB PLL */
  SCU_PLL->USBPLLCON &= (uint32_t)~SCU_PLL_USBPLLCON_FINDIS_Msk;
 8000a76:	4a17      	ldr	r2, [pc, #92]	; (8000ad4 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000a78:	4b16      	ldr	r3, [pc, #88]	; (8000ad4 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000a7a:	695b      	ldr	r3, [r3, #20]
 8000a7c:	f023 0310 	bic.w	r3, r3, #16
 8000a80:	6153      	str	r3, [r2, #20]

  /* restart PLL Lock detection */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_RESLD_Msk;
 8000a82:	4a14      	ldr	r2, [pc, #80]	; (8000ad4 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000a84:	4b13      	ldr	r3, [pc, #76]	; (8000ad4 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000a86:	695b      	ldr	r3, [r3, #20]
 8000a88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a8c:	6153      	str	r3, [r2, #20]

  while ((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOLOCK_Msk) == 0U)
 8000a8e:	bf00      	nop
 8000a90:	4b10      	ldr	r3, [pc, #64]	; (8000ad4 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000a92:	691b      	ldr	r3, [r3, #16]
 8000a94:	f003 0304 	and.w	r3, r3, #4
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d0f9      	beq.n	8000a90 <XMC_SCU_CLOCK_StartUsbPll+0x68>
  {
    /* wait for PLL Lock */
  }

  /* Disable bypass- put PLL clock back */
  SCU_PLL->USBPLLCON &= ~SCU_PLL_USBPLLCON_VCOBYP_Msk;
 8000a9c:	4a0d      	ldr	r2, [pc, #52]	; (8000ad4 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000a9e:	4b0d      	ldr	r3, [pc, #52]	; (8000ad4 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000aa0:	695b      	ldr	r3, [r3, #20]
 8000aa2:	f023 0301 	bic.w	r3, r3, #1
 8000aa6:	6153      	str	r3, [r2, #20]
  while ((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOBYST_Msk) != 0U)
 8000aa8:	bf00      	nop
 8000aaa:	4b0a      	ldr	r3, [pc, #40]	; (8000ad4 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000aac:	691b      	ldr	r3, [r3, #16]
 8000aae:	f003 0301 	and.w	r3, r3, #1
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d1f9      	bne.n	8000aaa <XMC_SCU_CLOCK_StartUsbPll+0x82>
  {
    /* wait for normal mode */
  }

  /* Reset OSCDISCDIS */
  SCU_PLL->USBPLLCON &= ~SCU_PLL_USBPLLCON_OSCDISCDIS_Msk;
 8000ab6:	4a07      	ldr	r2, [pc, #28]	; (8000ad4 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000ab8:	4b06      	ldr	r3, [pc, #24]	; (8000ad4 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000aba:	695b      	ldr	r3, [r3, #20]
 8000abc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000ac0:	6153      	str	r3, [r2, #20]

  SCU_TRAP->TRAPCLR = SCU_TRAP_TRAPCLR_UVCOLCKT_Msk;
 8000ac2:	4b05      	ldr	r3, [pc, #20]	; (8000ad8 <XMC_SCU_CLOCK_StartUsbPll+0xb0>)
 8000ac4:	2208      	movs	r2, #8
 8000ac6:	60da      	str	r2, [r3, #12]
}
 8000ac8:	370c      	adds	r7, #12
 8000aca:	46bd      	mov	sp, r7
 8000acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop
 8000ad4:	50004710 	.word	0x50004710
 8000ad8:	50004160 	.word	0x50004160

08000adc <XMC_SCU_CLOCK_SetBackupClockCalibrationMode>:
                                  SCU_PLL_USBPLLCON_VCOBYP_Msk);
}

/* API to onfigure the calibration mode for internal oscillator */
void XMC_SCU_CLOCK_SetBackupClockCalibrationMode(XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_t mode)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b082      	sub	sp, #8
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	71fb      	strb	r3, [r7, #7]
  /* Enable factory calibration based trimming */
  SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FOTR_Msk;
 8000ae6:	4a0f      	ldr	r2, [pc, #60]	; (8000b24 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8000ae8:	4b0e      	ldr	r3, [pc, #56]	; (8000b24 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8000aea:	685b      	ldr	r3, [r3, #4]
 8000aec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000af0:	6053      	str	r3, [r2, #4]

  if (mode == XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_AUTOMATIC)
 8000af2:	79fb      	ldrb	r3, [r7, #7]
 8000af4:	2b01      	cmp	r3, #1
 8000af6:	d10e      	bne.n	8000b16 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x3a>
  {
    /* Disable factory calibration based trimming */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_FOTR_Msk;
 8000af8:	4a0a      	ldr	r2, [pc, #40]	; (8000b24 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8000afa:	4b0a      	ldr	r3, [pc, #40]	; (8000b24 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8000afc:	685b      	ldr	r3, [r3, #4]
 8000afe:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8000b02:	6053      	str	r3, [r2, #4]
    XMC_SCU_lDelay(100UL);
 8000b04:	2064      	movs	r0, #100	; 0x64
 8000b06:	f7ff fd17 	bl	8000538 <XMC_SCU_lDelay>

    /* Enable automatic calibration */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_AOTREN_Msk;
 8000b0a:	4a06      	ldr	r2, [pc, #24]	; (8000b24 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8000b0c:	4b05      	ldr	r3, [pc, #20]	; (8000b24 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8000b0e:	685b      	ldr	r3, [r3, #4]
 8000b10:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000b14:	6053      	str	r3, [r2, #4]
  }

  XMC_SCU_lDelay(100UL);
 8000b16:	2064      	movs	r0, #100	; 0x64
 8000b18:	f7ff fd0e 	bl	8000538 <XMC_SCU_lDelay>
}
 8000b1c:	3708      	adds	r7, #8
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	50004710 	.word	0x50004710

08000b28 <XMC_SCU_HIB_EnableHibernateDomain>:
  return (bool)((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOLOCK_Msk) != 0UL);
}

/* API to power up the hibernation domain */
void XMC_SCU_HIB_EnableHibernateDomain(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0
  /* Power up HIB domain if and only if it is currently powered down */
  if ((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0UL)
 8000b2c:	4b12      	ldr	r3, [pc, #72]	; (8000b78 <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	f003 0301 	and.w	r3, r3, #1
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d109      	bne.n	8000b4c <XMC_SCU_HIB_EnableHibernateDomain+0x24>
  {
    SCU_POWER->PWRSET = (uint32_t)SCU_POWER_PWRSET_HIB_Msk;
 8000b38:	4b0f      	ldr	r3, [pc, #60]	; (8000b78 <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 8000b3a:	2201      	movs	r2, #1
 8000b3c:	605a      	str	r2, [r3, #4]

    while ((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0UL)
 8000b3e:	bf00      	nop
 8000b40:	4b0d      	ldr	r3, [pc, #52]	; (8000b78 <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	f003 0301 	and.w	r3, r3, #1
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d0f9      	beq.n	8000b40 <XMC_SCU_HIB_EnableHibernateDomain+0x18>
      /* wait until HIB domain is enabled */
    }
  }

  /* Remove the reset only if HIB domain were in a state of reset */
  if ((SCU_RESET->RSTSTAT) & SCU_RESET_RSTSTAT_HIBRS_Msk)
 8000b4c:	4b0b      	ldr	r3, [pc, #44]	; (8000b7c <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d00a      	beq.n	8000b6e <XMC_SCU_HIB_EnableHibernateDomain+0x46>
  {
    SCU_RESET->RSTCLR = (uint32_t)SCU_RESET_RSTCLR_HIBRS_Msk;
 8000b58:	4b08      	ldr	r3, [pc, #32]	; (8000b7c <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 8000b5a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b5e:	609a      	str	r2, [r3, #8]
    while ((SCU_RESET->RSTSTAT & SCU_RESET_RSTSTAT_HIBRS_Msk) != 0UL)
 8000b60:	bf00      	nop
 8000b62:	4b06      	ldr	r3, [pc, #24]	; (8000b7c <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d1f9      	bne.n	8000b62 <XMC_SCU_HIB_EnableHibernateDomain+0x3a>
    {
      /* wait until HIB domain is enabled */
    }
  }
}
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop
 8000b78:	50004200 	.word	0x50004200
 8000b7c:	50004400 	.word	0x50004400

08000b80 <XMC_SCU_CLOCK_IsLowPowerOscillatorStable>:
}

#endif

bool XMC_SCU_CLOCK_IsLowPowerOscillatorStable(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  return ((SCU_HIBERNATE->HDSTAT & SCU_HIBERNATE_HDSTAT_ULPWDG_Msk) == 0UL);
 8000b84:	4b06      	ldr	r3, [pc, #24]	; (8000ba0 <XMC_SCU_CLOCK_IsLowPowerOscillatorStable+0x20>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	f003 0308 	and.w	r3, r3, #8
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	bf0c      	ite	eq
 8000b90:	2301      	moveq	r3, #1
 8000b92:	2300      	movne	r3, #0
 8000b94:	b2db      	uxtb	r3, r3
}
 8000b96:	4618      	mov	r0, r3
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9e:	4770      	bx	lr
 8000ba0:	50004300 	.word	0x50004300

08000ba4 <XMC_SCU_CLOCK_EnableLowPowerOscillator>:

/* API to configure the 32khz Ultra Low Power oscillator */
void XMC_SCU_CLOCK_EnableLowPowerOscillator(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	af00      	add	r7, sp, #0
  /* Enable OSC_ULP */
  XMC_SCU_INTERRUPT_ClearEventStatus(XMC_SCU_INTERRUPT_EVENT_OSCULCTRL_UPDATED);
 8000ba8:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8000bac:	f7ff fcf2 	bl	8000594 <XMC_SCU_INTERRUPT_ClearEventStatus>
  SCU_HIBERNATE->OSCULCTRL &= ~SCU_HIBERNATE_OSCULCTRL_MODE_Msk;
 8000bb0:	4a17      	ldr	r2, [pc, #92]	; (8000c10 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 8000bb2:	4b17      	ldr	r3, [pc, #92]	; (8000c10 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 8000bb4:	69db      	ldr	r3, [r3, #28]
 8000bb6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000bba:	61d3      	str	r3, [r2, #28]
  while ((XMC_SCU_INTERUPT_GetEventStatus() & XMC_SCU_INTERRUPT_EVENT_OSCULCTRL_UPDATED) == 0);
 8000bbc:	bf00      	nop
 8000bbe:	f7ff fcdd 	bl	800057c <XMC_SCU_INTERUPT_GetEventStatus>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d0f8      	beq.n	8000bbe <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x1a>

  /* Clear ULP WDG status */
  XMC_SCU_INTERRUPT_ClearEventStatus(XMC_SCU_INTERRUPT_EVENT_HDCLR_UPDATED);
 8000bcc:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000bd0:	f7ff fce0 	bl	8000594 <XMC_SCU_INTERRUPT_ClearEventStatus>
  SCU_HIBERNATE->HDCLR = (uint32_t)SCU_HIBERNATE_HDCLR_ULPWDG_Msk;
 8000bd4:	4b0e      	ldr	r3, [pc, #56]	; (8000c10 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 8000bd6:	2208      	movs	r2, #8
 8000bd8:	605a      	str	r2, [r3, #4]
  while ((XMC_SCU_INTERUPT_GetEventStatus() & XMC_SCU_INTERRUPT_EVENT_HDCLR_UPDATED) == 0);
 8000bda:	bf00      	nop
 8000bdc:	f7ff fcce 	bl	800057c <XMC_SCU_INTERUPT_GetEventStatus>
 8000be0:	4603      	mov	r3, r0
 8000be2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d0f8      	beq.n	8000bdc <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x38>

  /* Enable ULP WDG */
  XMC_SCU_INTERRUPT_ClearEventStatus(XMC_SCU_INTERRUPT_EVENT_HDCR_UPDATED);
 8000bea:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8000bee:	f7ff fcd1 	bl	8000594 <XMC_SCU_INTERRUPT_ClearEventStatus>
  SCU_HIBERNATE->HDCR |= (uint32_t)SCU_HIBERNATE_HDCR_ULPWDGEN_Msk;
 8000bf2:	4a07      	ldr	r2, [pc, #28]	; (8000c10 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 8000bf4:	4b06      	ldr	r3, [pc, #24]	; (8000c10 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 8000bf6:	68db      	ldr	r3, [r3, #12]
 8000bf8:	f043 0308 	orr.w	r3, r3, #8
 8000bfc:	60d3      	str	r3, [r2, #12]
  while ((XMC_SCU_INTERUPT_GetEventStatus() & XMC_SCU_INTERRUPT_EVENT_HDCR_UPDATED) == 0);
 8000bfe:	bf00      	nop
 8000c00:	f7ff fcbc 	bl	800057c <XMC_SCU_INTERUPT_GetEventStatus>
 8000c04:	4603      	mov	r3, r0
 8000c06:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d0f8      	beq.n	8000c00 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x5c>
}
 8000c0e:	bd80      	pop	{r7, pc}
 8000c10:	50004300 	.word	0x50004300

08000c14 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator>:
  return (SCU_HIBERNATE->OSCULSTAT & SCU_HIBERNATE_OSCULSTAT_X1D_Msk);
}

/* API to enable High Precision High Speed oscillator */
void XMC_SCU_CLOCK_EnableHighPerformanceOscillator(void)
{
 8000c14:	b5b0      	push	{r4, r5, r7, lr}
 8000c16:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_PLLPWD_Msk;
 8000c18:	4a0f      	ldr	r2, [pc, #60]	; (8000c58 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8000c1a:	4b0f      	ldr	r3, [pc, #60]	; (8000c58 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8000c1c:	685b      	ldr	r3, [r3, #4]
 8000c1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c22:	6053      	str	r3, [r2, #4]

  SCU_OSC->OSCHPCTRL = (uint32_t)((SCU_OSC->OSCHPCTRL & ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk)) |
 8000c24:	4d0d      	ldr	r5, [pc, #52]	; (8000c5c <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x48>)
 8000c26:	4b0d      	ldr	r3, [pc, #52]	; (8000c5c <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x48>)
 8000c28:	685b      	ldr	r3, [r3, #4]
 8000c2a:	f423 2470 	bic.w	r4, r3, #983040	; 0xf0000
 8000c2e:	f024 0430 	bic.w	r4, r4, #48	; 0x30
                                  (((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos));
 8000c32:	f003 f919 	bl	8003e68 <OSCHP_GetFrequency>
 8000c36:	4602      	mov	r2, r0
 8000c38:	4b09      	ldr	r3, [pc, #36]	; (8000c60 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x4c>)
 8000c3a:	fba3 2302 	umull	r2, r3, r3, r2
 8000c3e:	0d1b      	lsrs	r3, r3, #20
 8000c40:	3b01      	subs	r3, #1
 8000c42:	041b      	lsls	r3, r3, #16
/* API to enable High Precision High Speed oscillator */
void XMC_SCU_CLOCK_EnableHighPerformanceOscillator(void)
{
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_PLLPWD_Msk;

  SCU_OSC->OSCHPCTRL = (uint32_t)((SCU_OSC->OSCHPCTRL & ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk)) |
 8000c44:	4323      	orrs	r3, r4
 8000c46:	606b      	str	r3, [r5, #4]
                                  (((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos));

  /* restart OSC Watchdog */
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_OSCRES_Msk;
 8000c48:	4a03      	ldr	r2, [pc, #12]	; (8000c58 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8000c4a:	4b03      	ldr	r3, [pc, #12]	; (8000c58 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8000c4c:	685b      	ldr	r3, [r3, #4]
 8000c4e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000c52:	6053      	str	r3, [r2, #4]
}
 8000c54:	bdb0      	pop	{r4, r5, r7, pc}
 8000c56:	bf00      	nop
 8000c58:	50004710 	.word	0x50004710
 8000c5c:	50004700 	.word	0x50004700
 8000c60:	6b5fca6b 	.word	0x6b5fca6b

08000c64 <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable>:

bool XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0
  return ((SCU_PLL->PLLSTAT & XMC_SCU_PLL_PLLSTAT_OSC_USABLE) == XMC_SCU_PLL_PLLSTAT_OSC_USABLE);
 8000c68:	4b07      	ldr	r3, [pc, #28]	; (8000c88 <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable+0x24>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	f403 7360 	and.w	r3, r3, #896	; 0x380
 8000c70:	f5b3 7f60 	cmp.w	r3, #896	; 0x380
 8000c74:	bf0c      	ite	eq
 8000c76:	2301      	moveq	r3, #1
 8000c78:	2300      	movne	r3, #0
 8000c7a:	b2db      	uxtb	r3, r3
}
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop
 8000c88:	50004710 	.word	0x50004710

08000c8c <XMC_SCU_CLOCK_EnableSystemPll>:
  return (SCU_OSC->OSCHPSTAT & SCU_OSC_OSCHPSTAT_X1D_Msk);
}

/* API to enable main PLL */
void XMC_SCU_CLOCK_EnableSystemPll(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 &= (uint32_t)~(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 8000c90:	4a05      	ldr	r2, [pc, #20]	; (8000ca8 <XMC_SCU_CLOCK_EnableSystemPll+0x1c>)
 8000c92:	4b05      	ldr	r3, [pc, #20]	; (8000ca8 <XMC_SCU_CLOCK_EnableSystemPll+0x1c>)
 8000c94:	685b      	ldr	r3, [r3, #4]
 8000c96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c9a:	f023 0302 	bic.w	r3, r3, #2
 8000c9e:	6053      	str	r3, [r2, #4]
}
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca6:	4770      	bx	lr
 8000ca8:	50004710 	.word	0x50004710

08000cac <XMC_SCU_CLOCK_DisableSystemPll>:

/* API to disable main PLL */
void XMC_SCU_CLOCK_DisableSystemPll(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 |= (uint32_t)(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 8000cb0:	4a05      	ldr	r2, [pc, #20]	; (8000cc8 <XMC_SCU_CLOCK_DisableSystemPll+0x1c>)
 8000cb2:	4b05      	ldr	r3, [pc, #20]	; (8000cc8 <XMC_SCU_CLOCK_DisableSystemPll+0x1c>)
 8000cb4:	685b      	ldr	r3, [r3, #4]
 8000cb6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000cba:	f043 0302 	orr.w	r3, r3, #2
 8000cbe:	6053      	str	r3, [r2, #4]
}
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc6:	4770      	bx	lr
 8000cc8:	50004710 	.word	0x50004710

08000ccc <XMC_SCU_CLOCK_StartSystemPll>:
void XMC_SCU_CLOCK_StartSystemPll(XMC_SCU_CLOCK_SYSPLLCLKSRC_t source,
                                  XMC_SCU_CLOCK_SYSPLL_MODE_t mode,
                                  uint32_t pdiv,
                                  uint32_t ndiv,
                                  uint32_t kdiv)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b086      	sub	sp, #24
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	60ba      	str	r2, [r7, #8]
 8000cd4:	607b      	str	r3, [r7, #4]
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	81fb      	strh	r3, [r7, #14]
 8000cda:	460b      	mov	r3, r1
 8000cdc:	737b      	strb	r3, [r7, #13]

  uint32_t vco_frequency; /* Q10.22, max VCO frequency = 520MHz */
  uint32_t kdiv_temp;

  XMC_SCU_CLOCK_SetSystemPllClockSource(source);
 8000cde:	89fb      	ldrh	r3, [r7, #14]
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	f7ff fd6d 	bl	80007c0 <XMC_SCU_CLOCK_SetSystemPllClockSource>

  if (mode == XMC_SCU_CLOCK_SYSPLL_MODE_NORMAL)
 8000ce6:	7b7b      	ldrb	r3, [r7, #13]
 8000ce8:	2b01      	cmp	r3, #1
 8000cea:	f040 808b 	bne.w	8000e04 <XMC_SCU_CLOCK_StartSystemPll+0x138>
  {
    /* Calculate initial step to be close to fOFI */
    if (source == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP)
 8000cee:	89fb      	ldrh	r3, [r7, #14]
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d109      	bne.n	8000d08 <XMC_SCU_CLOCK_StartSystemPll+0x3c>
    {
      vco_frequency = (OSCHP_GetFrequency() / 1000000U) << 22;
 8000cf4:	f003 f8b8 	bl	8003e68 <OSCHP_GetFrequency>
 8000cf8:	4602      	mov	r2, r0
 8000cfa:	4b54      	ldr	r3, [pc, #336]	; (8000e4c <XMC_SCU_CLOCK_StartSystemPll+0x180>)
 8000cfc:	fba3 2302 	umull	r2, r3, r3, r2
 8000d00:	0c9b      	lsrs	r3, r3, #18
 8000d02:	059b      	lsls	r3, r3, #22
 8000d04:	617b      	str	r3, [r7, #20]
 8000d06:	e002      	b.n	8000d0e <XMC_SCU_CLOCK_StartSystemPll+0x42>
    }
    else
    {
      vco_frequency = (OFI_FREQUENCY / 1000000U) << 22;
 8000d08:	f04f 63c0 	mov.w	r3, #100663296	; 0x6000000
 8000d0c:	617b      	str	r3, [r7, #20]
    }
    vco_frequency = ((vco_frequency * ndiv) / pdiv);
 8000d0e:	697b      	ldr	r3, [r7, #20]
 8000d10:	687a      	ldr	r2, [r7, #4]
 8000d12:	fb02 f203 	mul.w	r2, r2, r3
 8000d16:	68bb      	ldr	r3, [r7, #8]
 8000d18:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d1c:	617b      	str	r3, [r7, #20]
    kdiv_temp = (vco_frequency / (OFI_FREQUENCY / 1000000U)) >> 22;
 8000d1e:	697b      	ldr	r3, [r7, #20]
 8000d20:	4a4b      	ldr	r2, [pc, #300]	; (8000e50 <XMC_SCU_CLOCK_StartSystemPll+0x184>)
 8000d22:	fba2 2303 	umull	r2, r3, r2, r3
 8000d26:	091b      	lsrs	r3, r3, #4
 8000d28:	0d9b      	lsrs	r3, r3, #22
 8000d2a:	613b      	str	r3, [r7, #16]

    /* Switch to prescaler mode */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_VCOBYP_Msk;
 8000d2c:	4a49      	ldr	r2, [pc, #292]	; (8000e54 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000d2e:	4b49      	ldr	r3, [pc, #292]	; (8000e54 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000d30:	685b      	ldr	r3, [r3, #4]
 8000d32:	f043 0301 	orr.w	r3, r3, #1
 8000d36:	6053      	str	r3, [r2, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) == 0U)
 8000d38:	bf00      	nop
 8000d3a:	4b46      	ldr	r3, [pc, #280]	; (8000e54 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	f003 0301 	and.w	r3, r3, #1
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d0f9      	beq.n	8000d3a <XMC_SCU_CLOCK_StartSystemPll+0x6e>
    {
      /* wait for prescaler mode */
    }

    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;
 8000d46:	4a43      	ldr	r2, [pc, #268]	; (8000e54 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000d48:	4b42      	ldr	r3, [pc, #264]	; (8000e54 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000d4a:	685b      	ldr	r3, [r3, #4]
 8000d4c:	f043 0310 	orr.w	r3, r3, #16
 8000d50:	6053      	str	r3, [r2, #4]

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
 8000d52:	4940      	ldr	r1, [pc, #256]	; (8000e54 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000d54:	4b3f      	ldr	r3, [pc, #252]	; (8000e54 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000d56:	689a      	ldr	r2, [r3, #8]
 8000d58:	4b3f      	ldr	r3, [pc, #252]	; (8000e58 <XMC_SCU_CLOCK_StartSystemPll+0x18c>)
 8000d5a:	4013      	ands	r3, r2
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
 8000d5c:	687a      	ldr	r2, [r7, #4]
 8000d5e:	3a01      	subs	r2, #1
 8000d60:	0212      	lsls	r2, r2, #8
 8000d62:	431a      	orrs	r2, r3
                                  ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
 8000d64:	693b      	ldr	r3, [r7, #16]
 8000d66:	3b01      	subs	r3, #1
 8000d68:	041b      	lsls	r3, r3, #16
    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
 8000d6a:	431a      	orrs	r2, r3
                                  ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
                                  ((pdiv - 1UL) << SCU_PLL_PLLCON1_PDIV_Pos));
 8000d6c:	68bb      	ldr	r3, [r7, #8]
 8000d6e:	3b01      	subs	r3, #1
 8000d70:	061b      	lsls	r3, r3, #24

    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
 8000d72:	4313      	orrs	r3, r2
 8000d74:	608b      	str	r3, [r1, #8]
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
                                  ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
                                  ((pdiv - 1UL) << SCU_PLL_PLLCON1_PDIV_Pos));

    /* Set OSCDISCDIS, OSC clock remains connected to the VCO in case of loss of lock */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_OSCDISCDIS_Msk;
 8000d76:	4a37      	ldr	r2, [pc, #220]	; (8000e54 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000d78:	4b36      	ldr	r3, [pc, #216]	; (8000e54 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000d7a:	685b      	ldr	r3, [r3, #4]
 8000d7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d80:	6053      	str	r3, [r2, #4]

    /* connect Oscillator to PLL */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_FINDIS_Msk;
 8000d82:	4a34      	ldr	r2, [pc, #208]	; (8000e54 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000d84:	4b33      	ldr	r3, [pc, #204]	; (8000e54 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000d86:	685b      	ldr	r3, [r3, #4]
 8000d88:	f023 0310 	bic.w	r3, r3, #16
 8000d8c:	6053      	str	r3, [r2, #4]

    /* restart PLL Lock detection */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_RESLD_Msk;
 8000d8e:	4a31      	ldr	r2, [pc, #196]	; (8000e54 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000d90:	4b30      	ldr	r3, [pc, #192]	; (8000e54 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000d92:	685b      	ldr	r3, [r3, #4]
 8000d94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d98:	6053      	str	r3, [r2, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 8000d9a:	bf00      	nop
 8000d9c:	4b2d      	ldr	r3, [pc, #180]	; (8000e54 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	f003 0304 	and.w	r3, r3, #4
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d0f9      	beq.n	8000d9c <XMC_SCU_CLOCK_StartSystemPll+0xd0>
    {
      /* wait for PLL Lock */
    }

    /* Switch to normal mode */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_VCOBYP_Msk;
 8000da8:	4a2a      	ldr	r2, [pc, #168]	; (8000e54 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000daa:	4b2a      	ldr	r3, [pc, #168]	; (8000e54 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000dac:	685b      	ldr	r3, [r3, #4]
 8000dae:	f023 0301 	bic.w	r3, r3, #1
 8000db2:	6053      	str	r3, [r2, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) != 0U)
 8000db4:	bf00      	nop
 8000db6:	4b27      	ldr	r3, [pc, #156]	; (8000e54 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	f003 0301 	and.w	r3, r3, #1
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d1f9      	bne.n	8000db6 <XMC_SCU_CLOCK_StartSystemPll+0xea>
    {
      /* wait for normal mode */
    }

    /* Ramp up PLL frequency in steps */
    kdiv_temp = (vco_frequency / 60UL) >> 22;
 8000dc2:	697b      	ldr	r3, [r7, #20]
 8000dc4:	4a25      	ldr	r2, [pc, #148]	; (8000e5c <XMC_SCU_CLOCK_StartSystemPll+0x190>)
 8000dc6:	fba2 2303 	umull	r2, r3, r2, r3
 8000dca:	095b      	lsrs	r3, r3, #5
 8000dcc:	0d9b      	lsrs	r3, r3, #22
 8000dce:	613b      	str	r3, [r7, #16]
    if (kdiv < kdiv_temp)
 8000dd0:	6a3a      	ldr	r2, [r7, #32]
 8000dd2:	693b      	ldr	r3, [r7, #16]
 8000dd4:	429a      	cmp	r2, r3
 8000dd6:	d202      	bcs.n	8000dde <XMC_SCU_CLOCK_StartSystemPll+0x112>
    {
      XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv_temp);
 8000dd8:	6938      	ldr	r0, [r7, #16]
 8000dda:	f000 f845 	bl	8000e68 <XMC_SCU_CLOCK_StepSystemPllFrequency>
    }

    kdiv_temp = (vco_frequency / 90UL) >> 22;
 8000dde:	697b      	ldr	r3, [r7, #20]
 8000de0:	085b      	lsrs	r3, r3, #1
 8000de2:	4a1f      	ldr	r2, [pc, #124]	; (8000e60 <XMC_SCU_CLOCK_StartSystemPll+0x194>)
 8000de4:	fba2 2303 	umull	r2, r3, r2, r3
 8000de8:	095b      	lsrs	r3, r3, #5
 8000dea:	0d9b      	lsrs	r3, r3, #22
 8000dec:	613b      	str	r3, [r7, #16]
    if (kdiv < kdiv_temp)
 8000dee:	6a3a      	ldr	r2, [r7, #32]
 8000df0:	693b      	ldr	r3, [r7, #16]
 8000df2:	429a      	cmp	r2, r3
 8000df4:	d202      	bcs.n	8000dfc <XMC_SCU_CLOCK_StartSystemPll+0x130>
    {
      XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv_temp);
 8000df6:	6938      	ldr	r0, [r7, #16]
 8000df8:	f000 f836 	bl	8000e68 <XMC_SCU_CLOCK_StepSystemPllFrequency>
    }

    XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv);
 8000dfc:	6a38      	ldr	r0, [r7, #32]
 8000dfe:	f000 f833 	bl	8000e68 <XMC_SCU_CLOCK_StepSystemPllFrequency>
 8000e02:	e01c      	b.n	8000e3e <XMC_SCU_CLOCK_StartSystemPll+0x172>
  }
  else
  {
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K1DIV_Msk) |
 8000e04:	4913      	ldr	r1, [pc, #76]	; (8000e54 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000e06:	4b13      	ldr	r3, [pc, #76]	; (8000e54 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000e08:	689b      	ldr	r3, [r3, #8]
 8000e0a:	f023 027f 	bic.w	r2, r3, #127	; 0x7f
                                  ((kdiv - 1UL) << SCU_PLL_PLLCON1_K1DIV_Pos));
 8000e0e:	6a3b      	ldr	r3, [r7, #32]
 8000e10:	3b01      	subs	r3, #1

    XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv);
  }
  else
  {
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K1DIV_Msk) |
 8000e12:	4313      	orrs	r3, r2
 8000e14:	608b      	str	r3, [r1, #8]
                                  ((kdiv - 1UL) << SCU_PLL_PLLCON1_K1DIV_Pos));

    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_K1RDY_Msk) == 0U)
 8000e16:	bf00      	nop
 8000e18:	4b0e      	ldr	r3, [pc, #56]	; (8000e54 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	f003 0310 	and.w	r3, r3, #16
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d0f9      	beq.n	8000e18 <XMC_SCU_CLOCK_StartSystemPll+0x14c>
    {
      /* wait until K1-divider operates on the configured value  */
    }

    /* Switch to prescaler mode */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_VCOBYP_Msk;
 8000e24:	4a0b      	ldr	r2, [pc, #44]	; (8000e54 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000e26:	4b0b      	ldr	r3, [pc, #44]	; (8000e54 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000e28:	685b      	ldr	r3, [r3, #4]
 8000e2a:	f043 0301 	orr.w	r3, r3, #1
 8000e2e:	6053      	str	r3, [r2, #4]

    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) == 0U)
 8000e30:	bf00      	nop
 8000e32:	4b08      	ldr	r3, [pc, #32]	; (8000e54 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	f003 0301 	and.w	r3, r3, #1
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d0f9      	beq.n	8000e32 <XMC_SCU_CLOCK_StartSystemPll+0x166>
    {
      /* wait for prescaler mode */
    }
  }

  SCU_TRAP->TRAPCLR = SCU_TRAP_TRAPCLR_SOSCWDGT_Msk | SCU_TRAP_TRAPCLR_SVCOLCKT_Msk;
 8000e3e:	4b09      	ldr	r3, [pc, #36]	; (8000e64 <XMC_SCU_CLOCK_StartSystemPll+0x198>)
 8000e40:	2205      	movs	r2, #5
 8000e42:	60da      	str	r2, [r3, #12]
}
 8000e44:	3718      	adds	r7, #24
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	431bde83 	.word	0x431bde83
 8000e50:	aaaaaaab 	.word	0xaaaaaaab
 8000e54:	50004710 	.word	0x50004710
 8000e58:	f08080ff 	.word	0xf08080ff
 8000e5c:	88888889 	.word	0x88888889
 8000e60:	b60b60b7 	.word	0xb60b60b7
 8000e64:	50004160 	.word	0x50004160

08000e68 <XMC_SCU_CLOCK_StepSystemPllFrequency>:
  SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_PLLPWD_Msk;
}

/* API to step up/down the main PLL frequency */
void XMC_SCU_CLOCK_StepSystemPllFrequency(uint32_t kdiv)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b082      	sub	sp, #8
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K2DIV_Msk) |
 8000e70:	490b      	ldr	r1, [pc, #44]	; (8000ea0 <XMC_SCU_CLOCK_StepSystemPllFrequency+0x38>)
 8000e72:	4b0b      	ldr	r3, [pc, #44]	; (8000ea0 <XMC_SCU_CLOCK_StepSystemPllFrequency+0x38>)
 8000e74:	689b      	ldr	r3, [r3, #8]
 8000e76:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
                                ((kdiv - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos));
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	3b01      	subs	r3, #1
 8000e7e:	041b      	lsls	r3, r3, #16
}

/* API to step up/down the main PLL frequency */
void XMC_SCU_CLOCK_StepSystemPllFrequency(uint32_t kdiv)
{
  SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K2DIV_Msk) |
 8000e80:	4313      	orrs	r3, r2
 8000e82:	608b      	str	r3, [r1, #8]
                                ((kdiv - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos));

  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_K2RDY_Msk) == 0U)
 8000e84:	bf00      	nop
 8000e86:	4b06      	ldr	r3, [pc, #24]	; (8000ea0 <XMC_SCU_CLOCK_StepSystemPllFrequency+0x38>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	f003 0320 	and.w	r3, r3, #32
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d0f9      	beq.n	8000e86 <XMC_SCU_CLOCK_StepSystemPllFrequency+0x1e>
  {
    /* wait until K2-divider operates on the configured value  */
  }

  XMC_SCU_lDelay(50U);
 8000e92:	2032      	movs	r0, #50	; 0x32
 8000e94:	f7ff fb50 	bl	8000538 <XMC_SCU_lDelay>
}
 8000e98:	3708      	adds	r7, #8
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	50004710 	.word	0x50004710

08000ea4 <XMC_CAN_IsPanelControlReady>:
 * \par<b>Related APIs:</b><BR>
 *  XMC_CAN_PanelControl()
 *
 */
__STATIC_INLINE bool XMC_CAN_IsPanelControlReady(XMC_CAN_t *const obj)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b083      	sub	sp, #12
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  return (bool)((obj->PANCTR & (CAN_PANCTR_BUSY_Msk | CAN_PANCTR_RBUSY_Msk)) == 0);
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	f8d3 31c4 	ldr.w	r3, [r3, #452]	; 0x1c4
 8000eb2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	bf0c      	ite	eq
 8000eba:	2301      	moveq	r3, #1
 8000ebc:	2300      	movne	r3, #0
 8000ebe:	b2db      	uxtb	r3, r3
}
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	370c      	adds	r7, #12
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eca:	4770      	bx	lr

08000ecc <XMC_CAN_PanelControl>:

__STATIC_INLINE void XMC_CAN_PanelControl(XMC_CAN_t *const obj,
    const XMC_CAN_PANCMD_t pancmd,
    const uint8_t arg1,
    const uint8_t arg2)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b083      	sub	sp, #12
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
 8000ed4:	4608      	mov	r0, r1
 8000ed6:	4611      	mov	r1, r2
 8000ed8:	461a      	mov	r2, r3
 8000eda:	4603      	mov	r3, r0
 8000edc:	70fb      	strb	r3, [r7, #3]
 8000ede:	460b      	mov	r3, r1
 8000ee0:	70bb      	strb	r3, [r7, #2]
 8000ee2:	4613      	mov	r3, r2
 8000ee4:	707b      	strb	r3, [r7, #1]
  obj->PANCTR = (((uint32_t)pancmd << CAN_PANCTR_PANCMD_Pos) & (uint32_t)CAN_PANCTR_PANCMD_Msk) |
 8000ee6:	78fa      	ldrb	r2, [r7, #3]
                (((uint32_t)arg1 << CAN_PANCTR_PANAR1_Pos) & (uint32_t)CAN_PANCTR_PANAR1_Msk) |
 8000ee8:	78bb      	ldrb	r3, [r7, #2]
 8000eea:	041b      	lsls	r3, r3, #16
 8000eec:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
__STATIC_INLINE void XMC_CAN_PanelControl(XMC_CAN_t *const obj,
    const XMC_CAN_PANCMD_t pancmd,
    const uint8_t arg1,
    const uint8_t arg2)
{
  obj->PANCTR = (((uint32_t)pancmd << CAN_PANCTR_PANCMD_Pos) & (uint32_t)CAN_PANCTR_PANCMD_Msk) |
 8000ef0:	431a      	orrs	r2, r3
                (((uint32_t)arg1 << CAN_PANCTR_PANAR1_Pos) & (uint32_t)CAN_PANCTR_PANAR1_Msk) |
                (((uint32_t)arg2 << CAN_PANCTR_PANAR2_Pos) & (uint32_t)CAN_PANCTR_PANAR2_Msk);
 8000ef2:	787b      	ldrb	r3, [r7, #1]
 8000ef4:	061b      	lsls	r3, r3, #24
    const XMC_CAN_PANCMD_t pancmd,
    const uint8_t arg1,
    const uint8_t arg2)
{
  obj->PANCTR = (((uint32_t)pancmd << CAN_PANCTR_PANCMD_Pos) & (uint32_t)CAN_PANCTR_PANCMD_Msk) |
                (((uint32_t)arg1 << CAN_PANCTR_PANAR1_Pos) & (uint32_t)CAN_PANCTR_PANAR1_Msk) |
 8000ef6:	431a      	orrs	r2, r3
__STATIC_INLINE void XMC_CAN_PanelControl(XMC_CAN_t *const obj,
    const XMC_CAN_PANCMD_t pancmd,
    const uint8_t arg1,
    const uint8_t arg2)
{
  obj->PANCTR = (((uint32_t)pancmd << CAN_PANCTR_PANCMD_Pos) & (uint32_t)CAN_PANCTR_PANCMD_Msk) |
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	f8c3 21c4 	str.w	r2, [r3, #452]	; 0x1c4
                (((uint32_t)arg1 << CAN_PANCTR_PANAR1_Pos) & (uint32_t)CAN_PANCTR_PANAR1_Msk) |
                (((uint32_t)arg2 << CAN_PANCTR_PANAR2_Pos) & (uint32_t)CAN_PANCTR_PANAR2_Msk);
}
 8000efe:	370c      	adds	r7, #12
 8000f00:	46bd      	mov	sp, r7
 8000f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f06:	4770      	bx	lr

08000f08 <XMC_CAN_NODE_EnableConfigurationChange>:
 * XMC_CAN_NODE_DisableConfigurationChange()
 *
 */

__STATIC_INLINE void XMC_CAN_NODE_EnableConfigurationChange(XMC_CAN_NODE_t *const can_node)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	b083      	sub	sp, #12
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  can_node->NCR |= (uint32_t)CAN_NODE_NCR_CCE_Msk;
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	601a      	str	r2, [r3, #0]
}
 8000f1c:	370c      	adds	r7, #12
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f24:	4770      	bx	lr
 8000f26:	bf00      	nop

08000f28 <XMC_CAN_NODE_DisableConfigurationChange>:
 * XMC_CAN_NODE_EnableConfigurationChange()
 *
 */

__STATIC_INLINE void XMC_CAN_NODE_DisableConfigurationChange(XMC_CAN_NODE_t *const can_node)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	b083      	sub	sp, #12
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
  can_node->NCR &= ~(uint32_t)CAN_NODE_NCR_CCE_Msk;
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	601a      	str	r2, [r3, #0]
}
 8000f3c:	370c      	adds	r7, #12
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop

08000f48 <max>:

#if defined(CAN)
#include "xmc_scu.h"

__STATIC_INLINE uint32_t max(uint32_t a, uint32_t b)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b083      	sub	sp, #12
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
 8000f50:	6039      	str	r1, [r7, #0]
  return (a > b) ? a : b;
 8000f52:	683a      	ldr	r2, [r7, #0]
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	4293      	cmp	r3, r2
 8000f58:	bf38      	it	cc
 8000f5a:	4613      	movcc	r3, r2
}
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	370c      	adds	r7, #12
 8000f60:	46bd      	mov	sp, r7
 8000f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f66:	4770      	bx	lr

08000f68 <min>:

__STATIC_INLINE uint32_t min(uint32_t a, uint32_t b)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b083      	sub	sp, #12
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
 8000f70:	6039      	str	r1, [r7, #0]
  return (a < b) ? a : b;
 8000f72:	683a      	ldr	r2, [r7, #0]
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	4293      	cmp	r3, r2
 8000f78:	bf28      	it	cs
 8000f7a:	4613      	movcs	r3, r2
}
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	370c      	adds	r7, #12
 8000f80:	46bd      	mov	sp, r7
 8000f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f86:	4770      	bx	lr

08000f88 <XMC_CAN_NODE_NominalBitTimeConfigureEx>:
#define XMC_CAN_NODE_MAX_TSEG2 7


int32_t XMC_CAN_NODE_NominalBitTimeConfigureEx(XMC_CAN_NODE_t *const can_node,
    const XMC_CAN_NODE_NOMINAL_BIT_TIME_CONFIG_t *const bit_time_config)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b088      	sub	sp, #32
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
 8000f90:	6039      	str	r1, [r7, #0]
  /* Check that the CAN frequency is a multiple of the required baudrate */
  if ((bit_time_config->can_frequency % bit_time_config->baudrate) == 0)
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	683a      	ldr	r2, [r7, #0]
 8000f98:	6852      	ldr	r2, [r2, #4]
 8000f9a:	fbb3 f1f2 	udiv	r1, r3, r2
 8000f9e:	fb02 f201 	mul.w	r2, r2, r1
 8000fa2:	1a9b      	subs	r3, r3, r2
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	f040 8090 	bne.w	80010ca <XMC_CAN_NODE_NominalBitTimeConfigureEx+0x142>
  {
    uint32_t prescaler = 0;
 8000faa:	2300      	movs	r3, #0
 8000fac:	61fb      	str	r3, [r7, #28]
    uint32_t div8 = 0;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	61bb      	str	r3, [r7, #24]

    /* Calculate the factor between can frequency and required baudrate, this is equal to (prescaler x ntq) */
    uint32_t fcan_div = bit_time_config->can_frequency / bit_time_config->baudrate;
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	681a      	ldr	r2, [r3, #0]
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	685b      	ldr	r3, [r3, #4]
 8000fba:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fbe:	60bb      	str	r3, [r7, #8]

    /* start with highest ntq, i.e as much as possible time quanta should be used to construct a bit time */
    uint32_t ntq = XMC_CAN_NODE_MAX_NTQ;
 8000fc0:	2319      	movs	r3, #25
 8000fc2:	617b      	str	r3, [r7, #20]
    uint32_t tseg1 = 0;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	613b      	str	r3, [r7, #16]
    uint32_t tseg2 = 0;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	60fb      	str	r3, [r7, #12]
    while (ntq >= XMC_CAN_NODE_MIN_NTQ)
 8000fcc:	e04b      	b.n	8001066 <XMC_CAN_NODE_NominalBitTimeConfigureEx+0xde>
    {
      /* consider this ntq, only if fcan_div is multiple of ntq */
      if ((fcan_div % ntq) == 0)
 8000fce:	68bb      	ldr	r3, [r7, #8]
 8000fd0:	697a      	ldr	r2, [r7, #20]
 8000fd2:	fbb3 f2f2 	udiv	r2, r3, r2
 8000fd6:	6979      	ldr	r1, [r7, #20]
 8000fd8:	fb01 f202 	mul.w	r2, r1, r2
 8000fdc:	1a9b      	subs	r3, r3, r2
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d13e      	bne.n	8001060 <XMC_CAN_NODE_NominalBitTimeConfigureEx+0xd8>
      {
        div8 = 0;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	61bb      	str	r3, [r7, #24]
        prescaler = fcan_div / ntq;
 8000fe6:	68ba      	ldr	r2, [r7, #8]
 8000fe8:	697b      	ldr	r3, [r7, #20]
 8000fea:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fee:	61fb      	str	r3, [r7, #28]
        if ((prescaler > 0) && (prescaler <= XMC_CAN_NODE_MAX_PRESCALER))
 8000ff0:	69fb      	ldr	r3, [r7, #28]
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d034      	beq.n	8001060 <XMC_CAN_NODE_NominalBitTimeConfigureEx+0xd8>
 8000ff6:	69fb      	ldr	r3, [r7, #28]
 8000ff8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000ffc:	d830      	bhi.n	8001060 <XMC_CAN_NODE_NominalBitTimeConfigureEx+0xd8>
        {
          if (prescaler >= 64)
 8000ffe:	69fb      	ldr	r3, [r7, #28]
 8001000:	2b3f      	cmp	r3, #63	; 0x3f
 8001002:	d90a      	bls.n	800101a <XMC_CAN_NODE_NominalBitTimeConfigureEx+0x92>
          {
            /* consider prescaler >=64, if it is integer divisible by 8*/
            if ((prescaler & 0x7U) != 0)
 8001004:	69fb      	ldr	r3, [r7, #28]
 8001006:	f003 0307 	and.w	r3, r3, #7
 800100a:	2b00      	cmp	r3, #0
 800100c:	d003      	beq.n	8001016 <XMC_CAN_NODE_NominalBitTimeConfigureEx+0x8e>
            {
              --ntq;
 800100e:	697b      	ldr	r3, [r7, #20]
 8001010:	3b01      	subs	r3, #1
 8001012:	617b      	str	r3, [r7, #20]
              continue;
 8001014:	e027      	b.n	8001066 <XMC_CAN_NODE_NominalBitTimeConfigureEx+0xde>
            }
            else
            {
              div8 = 1;
 8001016:	2301      	movs	r3, #1
 8001018:	61bb      	str	r3, [r7, #24]
            }
          }

          tseg1 = ((ntq - 1) * bit_time_config->sample_point) / 10000;
 800101a:	697b      	ldr	r3, [r7, #20]
 800101c:	3b01      	subs	r3, #1
 800101e:	683a      	ldr	r2, [r7, #0]
 8001020:	8912      	ldrh	r2, [r2, #8]
 8001022:	fb02 f303 	mul.w	r3, r2, r3
 8001026:	4a2b      	ldr	r2, [pc, #172]	; (80010d4 <XMC_CAN_NODE_NominalBitTimeConfigureEx+0x14c>)
 8001028:	fba2 2303 	umull	r2, r3, r2, r3
 800102c:	0b5b      	lsrs	r3, r3, #13
 800102e:	613b      	str	r3, [r7, #16]
          tseg2 = ntq - tseg1 - 1;
 8001030:	697a      	ldr	r2, [r7, #20]
 8001032:	693b      	ldr	r3, [r7, #16]
 8001034:	1ad3      	subs	r3, r2, r3
 8001036:	3b01      	subs	r3, #1
 8001038:	60fb      	str	r3, [r7, #12]

          if ((XMC_CAN_NODE_MIN_TSEG1 <= tseg1) && (tseg1 <= XMC_CAN_NODE_MAX_TSEG1) &&
 800103a:	693b      	ldr	r3, [r7, #16]
 800103c:	2b02      	cmp	r3, #2
 800103e:	d90f      	bls.n	8001060 <XMC_CAN_NODE_NominalBitTimeConfigureEx+0xd8>
 8001040:	693b      	ldr	r3, [r7, #16]
 8001042:	2b0f      	cmp	r3, #15
 8001044:	d80c      	bhi.n	8001060 <XMC_CAN_NODE_NominalBitTimeConfigureEx+0xd8>
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	2b01      	cmp	r3, #1
 800104a:	d909      	bls.n	8001060 <XMC_CAN_NODE_NominalBitTimeConfigureEx+0xd8>
              (XMC_CAN_NODE_MIN_TSEG2 <= tseg2) && (tseg2 < XMC_CAN_NODE_MAX_TSEG2) && (tseg2 >= bit_time_config->sjw))
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	2b06      	cmp	r3, #6
 8001050:	d806      	bhi.n	8001060 <XMC_CAN_NODE_NominalBitTimeConfigureEx+0xd8>
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	895b      	ldrh	r3, [r3, #10]
 8001056:	461a      	mov	r2, r3
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	429a      	cmp	r2, r3
 800105c:	d800      	bhi.n	8001060 <XMC_CAN_NODE_NominalBitTimeConfigureEx+0xd8>
          {
            break;
 800105e:	e005      	b.n	800106c <XMC_CAN_NODE_NominalBitTimeConfigureEx+0xe4>
          }


        }
      }
      --ntq;
 8001060:	697b      	ldr	r3, [r7, #20]
 8001062:	3b01      	subs	r3, #1
 8001064:	617b      	str	r3, [r7, #20]

    /* start with highest ntq, i.e as much as possible time quanta should be used to construct a bit time */
    uint32_t ntq = XMC_CAN_NODE_MAX_NTQ;
    uint32_t tseg1 = 0;
    uint32_t tseg2 = 0;
    while (ntq >= XMC_CAN_NODE_MIN_NTQ)
 8001066:	697b      	ldr	r3, [r7, #20]
 8001068:	2b07      	cmp	r3, #7
 800106a:	d8b0      	bhi.n	8000fce <XMC_CAN_NODE_NominalBitTimeConfigureEx+0x46>
        }
      }
      --ntq;
    }

    if (ntq >= XMC_CAN_NODE_MIN_NTQ)
 800106c:	697b      	ldr	r3, [r7, #20]
 800106e:	2b07      	cmp	r3, #7
 8001070:	d92b      	bls.n	80010ca <XMC_CAN_NODE_NominalBitTimeConfigureEx+0x142>

      XMC_ASSERT("XMC_CAN_NODE_NominalBitTimeConfigureEx: prescaler", (prescaler != 0));
      XMC_ASSERT("XMC_CAN_NODE_NominalBitTimeConfigureEx: tseg1", (tseg1 != 0));
      XMC_ASSERT("XMC_CAN_NODE_NominalBitTimeConfigureEx: tseg2", (tseg2 != 0));

      XMC_CAN_NODE_EnableConfigurationChange(can_node);
 8001072:	6878      	ldr	r0, [r7, #4]
 8001074:	f7ff ff48 	bl	8000f08 <XMC_CAN_NODE_EnableConfigurationChange>

      /* Configure bit timing register */
      can_node->NBTR = (((tseg2 - 1u) << CAN_NODE_NBTR_TSEG2_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG2_Msk) |
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	3b01      	subs	r3, #1
 800107c:	031b      	lsls	r3, r3, #12
 800107e:	f403 42e0 	and.w	r2, r3, #28672	; 0x7000
                       (((bit_time_config->sjw - 1U) << CAN_NODE_NBTR_SJW_Pos) & (uint32_t)CAN_NODE_NBTR_SJW_Msk) |
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	895b      	ldrh	r3, [r3, #10]
 8001086:	3b01      	subs	r3, #1
 8001088:	019b      	lsls	r3, r3, #6
 800108a:	b2db      	uxtb	r3, r3
      XMC_ASSERT("XMC_CAN_NODE_NominalBitTimeConfigureEx: tseg2", (tseg2 != 0));

      XMC_CAN_NODE_EnableConfigurationChange(can_node);

      /* Configure bit timing register */
      can_node->NBTR = (((tseg2 - 1u) << CAN_NODE_NBTR_TSEG2_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG2_Msk) |
 800108c:	431a      	orrs	r2, r3
                       (((bit_time_config->sjw - 1U) << CAN_NODE_NBTR_SJW_Pos) & (uint32_t)CAN_NODE_NBTR_SJW_Msk) |
                       (((tseg1 - 1U) << CAN_NODE_NBTR_TSEG1_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG1_Msk) |
 800108e:	693b      	ldr	r3, [r7, #16]
 8001090:	3b01      	subs	r3, #1
 8001092:	021b      	lsls	r3, r3, #8
 8001094:	f403 6370 	and.w	r3, r3, #3840	; 0xf00

      XMC_CAN_NODE_EnableConfigurationChange(can_node);

      /* Configure bit timing register */
      can_node->NBTR = (((tseg2 - 1u) << CAN_NODE_NBTR_TSEG2_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG2_Msk) |
                       (((bit_time_config->sjw - 1U) << CAN_NODE_NBTR_SJW_Pos) & (uint32_t)CAN_NODE_NBTR_SJW_Msk) |
 8001098:	ea42 0103 	orr.w	r1, r2, r3
                       (((tseg1 - 1U) << CAN_NODE_NBTR_TSEG1_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG1_Msk) |
                       ((((prescaler >> (3 * div8)) - 1U) << CAN_NODE_NBTR_BRP_Pos) & (uint32_t)CAN_NODE_NBTR_BRP_Msk) |
 800109c:	69ba      	ldr	r2, [r7, #24]
 800109e:	4613      	mov	r3, r2
 80010a0:	005b      	lsls	r3, r3, #1
 80010a2:	4413      	add	r3, r2
 80010a4:	461a      	mov	r2, r3
 80010a6:	69fb      	ldr	r3, [r7, #28]
 80010a8:	40d3      	lsrs	r3, r2
 80010aa:	3b01      	subs	r3, #1
 80010ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
      XMC_CAN_NODE_EnableConfigurationChange(can_node);

      /* Configure bit timing register */
      can_node->NBTR = (((tseg2 - 1u) << CAN_NODE_NBTR_TSEG2_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG2_Msk) |
                       (((bit_time_config->sjw - 1U) << CAN_NODE_NBTR_SJW_Pos) & (uint32_t)CAN_NODE_NBTR_SJW_Msk) |
                       (((tseg1 - 1U) << CAN_NODE_NBTR_TSEG1_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG1_Msk) |
 80010b0:	ea41 0203 	orr.w	r2, r1, r3
                       ((((prescaler >> (3 * div8)) - 1U) << CAN_NODE_NBTR_BRP_Pos) & (uint32_t)CAN_NODE_NBTR_BRP_Msk) |
                       ((div8 << CAN_NODE_NBTR_DIV8_Pos) & (uint32_t)CAN_NODE_NBTR_DIV8_Msk);
 80010b4:	69bb      	ldr	r3, [r7, #24]
 80010b6:	03db      	lsls	r3, r3, #15
 80010b8:	b29b      	uxth	r3, r3

      /* Configure bit timing register */
      can_node->NBTR = (((tseg2 - 1u) << CAN_NODE_NBTR_TSEG2_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG2_Msk) |
                       (((bit_time_config->sjw - 1U) << CAN_NODE_NBTR_SJW_Pos) & (uint32_t)CAN_NODE_NBTR_SJW_Msk) |
                       (((tseg1 - 1U) << CAN_NODE_NBTR_TSEG1_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG1_Msk) |
                       ((((prescaler >> (3 * div8)) - 1U) << CAN_NODE_NBTR_BRP_Pos) & (uint32_t)CAN_NODE_NBTR_BRP_Msk) |
 80010ba:	431a      	orrs	r2, r3
      XMC_ASSERT("XMC_CAN_NODE_NominalBitTimeConfigureEx: tseg2", (tseg2 != 0));

      XMC_CAN_NODE_EnableConfigurationChange(can_node);

      /* Configure bit timing register */
      can_node->NBTR = (((tseg2 - 1u) << CAN_NODE_NBTR_TSEG2_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG2_Msk) |
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	611a      	str	r2, [r3, #16]
                       (((bit_time_config->sjw - 1U) << CAN_NODE_NBTR_SJW_Pos) & (uint32_t)CAN_NODE_NBTR_SJW_Msk) |
                       (((tseg1 - 1U) << CAN_NODE_NBTR_TSEG1_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG1_Msk) |
                       ((((prescaler >> (3 * div8)) - 1U) << CAN_NODE_NBTR_BRP_Pos) & (uint32_t)CAN_NODE_NBTR_BRP_Msk) |
                       ((div8 << CAN_NODE_NBTR_DIV8_Pos) & (uint32_t)CAN_NODE_NBTR_DIV8_Msk);

      XMC_CAN_NODE_DisableConfigurationChange(can_node);
 80010c0:	6878      	ldr	r0, [r7, #4]
 80010c2:	f7ff ff31 	bl	8000f28 <XMC_CAN_NODE_DisableConfigurationChange>

      return XMC_CAN_STATUS_SUCCESS;
 80010c6:	2300      	movs	r3, #0
 80010c8:	e000      	b.n	80010cc <XMC_CAN_NODE_NominalBitTimeConfigureEx+0x144>
    }
  }

  return XMC_CAN_STATUS_ERROR;
 80010ca:	2301      	movs	r3, #1
}
 80010cc:	4618      	mov	r0, r3
 80010ce:	3720      	adds	r7, #32
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	d1b71759 	.word	0xd1b71759

080010d8 <XMC_CAN_AllocateMOtoNodeList>:
                   (((uint32_t)0U << CAN_NODE_NBTR_DIV8_Pos) & (uint32_t)CAN_NODE_NBTR_DIV8_Msk);
  XMC_CAN_NODE_DisableConfigurationChange(can_node);
}
/* Function to allocate message object from free list to node list */
void XMC_CAN_AllocateMOtoNodeList(XMC_CAN_t *const obj, const uint8_t node_num, const uint8_t mo_num)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b082      	sub	sp, #8
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
 80010e0:	460b      	mov	r3, r1
 80010e2:	70fb      	strb	r3, [r7, #3]
 80010e4:	4613      	mov	r3, r2
 80010e6:	70bb      	strb	r3, [r7, #2]
  /* wait while panel operation is in progress. */
  while (XMC_CAN_IsPanelControlReady(obj) == false)
 80010e8:	bf00      	nop
 80010ea:	6878      	ldr	r0, [r7, #4]
 80010ec:	f7ff feda 	bl	8000ea4 <XMC_CAN_IsPanelControlReady>
 80010f0:	4603      	mov	r3, r0
 80010f2:	f083 0301 	eor.w	r3, r3, #1
 80010f6:	b2db      	uxtb	r3, r3
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d1f6      	bne.n	80010ea <XMC_CAN_AllocateMOtoNodeList+0x12>
  {
    /*Do nothing*/
  };

  /* Panel Command for  allocation of MO to node list */
  XMC_CAN_PanelControl(obj, XMC_CAN_PANCMD_STATIC_ALLOCATE, mo_num, (node_num + 1U));
 80010fc:	78fb      	ldrb	r3, [r7, #3]
 80010fe:	3301      	adds	r3, #1
 8001100:	b2db      	uxtb	r3, r3
 8001102:	78ba      	ldrb	r2, [r7, #2]
 8001104:	6878      	ldr	r0, [r7, #4]
 8001106:	2102      	movs	r1, #2
 8001108:	f7ff fee0 	bl	8000ecc <XMC_CAN_PanelControl>
}
 800110c:	3708      	adds	r7, #8
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop

08001114 <XMC_CAN_Enable>:
#endif
}

/* Enable XMC_CAN Peripheral */
void XMC_CAN_Enable(XMC_CAN_t *const obj)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b082      	sub	sp, #8
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
#if defined(CLOCK_GATING_SUPPORTED)
  XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_MCAN);
 800111c:	480a      	ldr	r0, [pc, #40]	; (8001148 <XMC_CAN_Enable+0x34>)
 800111e:	f7ff fc33 	bl	8000988 <XMC_SCU_CLOCK_UngatePeripheralClock>
#endif
#if defined(PERIPHERAL_RESET_SUPPORTED)
  XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_MCAN);
 8001122:	4809      	ldr	r0, [pc, #36]	; (8001148 <XMC_CAN_Enable+0x34>)
 8001124:	f7ff fac0 	bl	80006a8 <XMC_SCU_RESET_DeassertPeripheralReset>
#endif
  /* Enable CAN Module */
  obj->CLC &= ~(uint32_t)CAN_CLC_DISR_Msk;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	f023 0201 	bic.w	r2, r3, #1
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	601a      	str	r2, [r3, #0]
  while (obj->CLC & CAN_CLC_DISS_Msk)
 8001134:	bf00      	nop
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	f003 0302 	and.w	r3, r3, #2
 800113e:	2b00      	cmp	r3, #0
 8001140:	d1f9      	bne.n	8001136 <XMC_CAN_Enable+0x22>
  {
    /*Do nothing*/
  };
}
 8001142:	3708      	adds	r7, #8
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}
 8001148:	10000010 	.word	0x10000010

0800114c <XMC_CAN_SetBaudrateClockSource>:
  obj->FDR |= ((uint32_t)can_divider_mode << CAN_FDR_DM_Pos) | ((uint32_t)step << CAN_FDR_STEP_Pos);
}
#endif

void XMC_CAN_SetBaudrateClockSource(XMC_CAN_t *const obj, const XMC_CAN_CANCLKSRC_t source)
{
 800114c:	b480      	push	{r7}
 800114e:	b083      	sub	sp, #12
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
 8001154:	460b      	mov	r3, r1
 8001156:	70fb      	strb	r3, [r7, #3]
  obj->MCR = (obj->MCR & ~CAN_MCR_CLKSEL_Msk) | source ;
#else
  XMC_UNUSED_ARG(obj);
  XMC_UNUSED_ARG(source);
#endif
}
 8001158:	370c      	adds	r7, #12
 800115a:	46bd      	mov	sp, r7
 800115c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001160:	4770      	bx	lr
 8001162:	bf00      	nop

08001164 <XMC_CAN_GetBaudrateClockFrequency>:
  return XMC_CAN_CANCLKSRC_FPERI;
#endif
}

uint32_t XMC_CAN_GetBaudrateClockFrequency(XMC_CAN_t *const obj)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b084      	sub	sp, #16
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0;
 800116c:	2300      	movs	r3, #0
 800116e:	60fb      	str	r3, [r7, #12]
      frequency = OSCHP_GetFrequency();
      break;
  }
#else
  XMC_UNUSED_ARG(obj);
  frequency = XMC_SCU_CLOCK_GetPeripheralClockFrequency();
 8001170:	f7ff fada 	bl	8000728 <XMC_SCU_CLOCK_GetPeripheralClockFrequency>
 8001174:	60f8      	str	r0, [r7, #12]
#endif

  return frequency;
 8001176:	68fb      	ldr	r3, [r7, #12]
}
 8001178:	4618      	mov	r0, r3
 800117a:	3710      	adds	r7, #16
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}

08001180 <XMC_CAN_InitEx>:

uint32_t XMC_CAN_InitEx(XMC_CAN_t *const obj, XMC_CAN_CANCLKSRC_t clksrc, uint32_t can_frequency)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b088      	sub	sp, #32
 8001184:	af00      	add	r7, sp, #0
 8001186:	60f8      	str	r0, [r7, #12]
 8001188:	460b      	mov	r3, r1
 800118a:	607a      	str	r2, [r7, #4]
 800118c:	72fb      	strb	r3, [r7, #11]
  uint32_t step_n;
  uint32_t freq_n;
  uint32_t peripheral_frequency;

  /*Enabling the module*/
  XMC_CAN_Enable(obj);
 800118e:	68f8      	ldr	r0, [r7, #12]
 8001190:	f7ff ffc0 	bl	8001114 <XMC_CAN_Enable>

  XMC_CAN_SetBaudrateClockSource(obj, clksrc);
 8001194:	7afb      	ldrb	r3, [r7, #11]
 8001196:	68f8      	ldr	r0, [r7, #12]
 8001198:	4619      	mov	r1, r3
 800119a:	f7ff ffd7 	bl	800114c <XMC_CAN_SetBaudrateClockSource>
  peripheral_frequency = XMC_CAN_GetBaudrateClockFrequency(obj);
 800119e:	68f8      	ldr	r0, [r7, #12]
 80011a0:	f7ff ffe0 	bl	8001164 <XMC_CAN_GetBaudrateClockFrequency>
 80011a4:	61f8      	str	r0, [r7, #28]
  XMC_ASSERT("XMC_CAN_Init: frequency not supported", can_frequency <= peripheral_frequency);

  /* Normal divider mode */
  step_n = (uint32_t)min(max(0U, (1024U - (peripheral_frequency / can_frequency))), 1023U);
 80011a6:	69fa      	ldr	r2, [r7, #28]
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80011ae:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 80011b2:	2000      	movs	r0, #0
 80011b4:	4619      	mov	r1, r3
 80011b6:	f7ff fec7 	bl	8000f48 <max>
 80011ba:	4603      	mov	r3, r0
 80011bc:	4618      	mov	r0, r3
 80011be:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80011c2:	f7ff fed1 	bl	8000f68 <min>
 80011c6:	61b8      	str	r0, [r7, #24]
  freq_n = (uint32_t)(peripheral_frequency / (1024U - step_n));
 80011c8:	69bb      	ldr	r3, [r7, #24]
 80011ca:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 80011ce:	69fa      	ldr	r2, [r7, #28]
 80011d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80011d4:	617b      	str	r3, [r7, #20]

  obj->FDR &= (uint32_t) ~(CAN_FDR_DM_Msk | CAN_FDR_STEP_Msk);
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	68db      	ldr	r3, [r3, #12]
 80011da:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 80011de:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80011e2:	68fa      	ldr	r2, [r7, #12]
 80011e4:	60d3      	str	r3, [r2, #12]
  obj->FDR |= ((uint32_t)XMC_CAN_DM_NORMAL << CAN_FDR_DM_Pos) | ((uint32_t)step_n << CAN_FDR_STEP_Pos);
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	68da      	ldr	r2, [r3, #12]
 80011ea:	69bb      	ldr	r3, [r7, #24]
 80011ec:	4313      	orrs	r3, r2
 80011ee:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	60da      	str	r2, [r3, #12]

  return freq_n;
 80011f6:	697b      	ldr	r3, [r7, #20]
}
 80011f8:	4618      	mov	r0, r3
 80011fa:	3720      	adds	r7, #32
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}

08001200 <XMC_CAN_MO_Config>:
  can_mo->can_id_mask = can_id_mask;
}

/* Initialization of XMC_CAN MO Object */
void XMC_CAN_MO_Config(const XMC_CAN_MO_t *const can_mo)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b086      	sub	sp, #24
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  uint32_t reg;

  /* Configure MPN */
  uint32_t num = ((uint32_t)(can_mo->can_mo_ptr) - CAN_BASE - 0x1000U) / 0x0020U;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f103 4338 	add.w	r3, r3, #3087007744	; 0xb8000000
 8001210:	f5a3 33a8 	sub.w	r3, r3, #86016	; 0x15000
 8001214:	095b      	lsrs	r3, r3, #5
 8001216:	617b      	str	r3, [r7, #20]
  uint32_t set = (((uint32_t)(num / 32) << (CAN_MO_MOIPR_MPN_Pos + 5U)) | ((uint32_t)(num % 32) << CAN_MO_MOIPR_MPN_Pos));
 8001218:	697b      	ldr	r3, [r7, #20]
 800121a:	095b      	lsrs	r3, r3, #5
 800121c:	035a      	lsls	r2, r3, #13
 800121e:	697b      	ldr	r3, [r7, #20]
 8001220:	f003 031f 	and.w	r3, r3, #31
 8001224:	021b      	lsls	r3, r3, #8
 8001226:	4313      	orrs	r3, r2
 8001228:	613b      	str	r3, [r7, #16]
  can_mo->can_mo_ptr->MOIPR &= ~(CAN_MO_MOIPR_MPN_Msk);
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	687a      	ldr	r2, [r7, #4]
 8001230:	6812      	ldr	r2, [r2, #0]
 8001232:	6892      	ldr	r2, [r2, #8]
 8001234:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8001238:	609a      	str	r2, [r3, #8]
  can_mo->can_mo_ptr->MOIPR |= set;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	687a      	ldr	r2, [r7, #4]
 8001240:	6812      	ldr	r2, [r2, #0]
 8001242:	6891      	ldr	r1, [r2, #8]
 8001244:	693a      	ldr	r2, [r7, #16]
 8001246:	430a      	orrs	r2, r1
 8001248:	609a      	str	r2, [r3, #8]

  if (((can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_STANDARD_11BITS) &&
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	79db      	ldrb	r3, [r3, #7]
 800124e:	f003 0320 	and.w	r3, r3, #32
 8001252:	b2db      	uxtb	r3, r3
 8001254:	2b00      	cmp	r3, #0
 8001256:	d007      	beq.n	8001268 <XMC_CAN_MO_Config+0x68>
       (can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_EXTENDED_29BITS)) ||
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	79db      	ldrb	r3, [r3, #7]
 800125c:	f003 0320 	and.w	r3, r3, #32
 8001260:	b2db      	uxtb	r3, r3
  uint32_t num = ((uint32_t)(can_mo->can_mo_ptr) - CAN_BASE - 0x1000U) / 0x0020U;
  uint32_t set = (((uint32_t)(num / 32) << (CAN_MO_MOIPR_MPN_Pos + 5U)) | ((uint32_t)(num % 32) << CAN_MO_MOIPR_MPN_Pos));
  can_mo->can_mo_ptr->MOIPR &= ~(CAN_MO_MOIPR_MPN_Msk);
  can_mo->can_mo_ptr->MOIPR |= set;

  if (((can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_STANDARD_11BITS) &&
 8001262:	2b00      	cmp	r3, #0
 8001264:	d100      	bne.n	8001268 <XMC_CAN_MO_Config+0x68>
 8001266:	e060      	b.n	800132a <XMC_CAN_MO_Config+0x12a>
       (can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_EXTENDED_29BITS)) ||
      ((can_mo->can_mo_type != XMC_CAN_MO_TYPE_RECMSGOBJ) &&
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	7e1b      	ldrb	r3, [r3, #24]
  uint32_t set = (((uint32_t)(num / 32) << (CAN_MO_MOIPR_MPN_Pos + 5U)) | ((uint32_t)(num % 32) << CAN_MO_MOIPR_MPN_Pos));
  can_mo->can_mo_ptr->MOIPR &= ~(CAN_MO_MOIPR_MPN_Msk);
  can_mo->can_mo_ptr->MOIPR |= set;

  if (((can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_STANDARD_11BITS) &&
       (can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_EXTENDED_29BITS)) ||
 800126c:	2b00      	cmp	r3, #0
 800126e:	d004      	beq.n	800127a <XMC_CAN_MO_Config+0x7a>
      ((can_mo->can_mo_type != XMC_CAN_MO_TYPE_RECMSGOBJ) &&
       (can_mo->can_mo_type != XMC_CAN_MO_TYPE_TRANSMSGOBJ)))
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	7e1b      	ldrb	r3, [r3, #24]
  can_mo->can_mo_ptr->MOIPR &= ~(CAN_MO_MOIPR_MPN_Msk);
  can_mo->can_mo_ptr->MOIPR |= set;

  if (((can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_STANDARD_11BITS) &&
       (can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_EXTENDED_29BITS)) ||
      ((can_mo->can_mo_type != XMC_CAN_MO_TYPE_RECMSGOBJ) &&
 8001274:	2b01      	cmp	r3, #1
 8001276:	d000      	beq.n	800127a <XMC_CAN_MO_Config+0x7a>
 8001278:	e057      	b.n	800132a <XMC_CAN_MO_Config+0x12a>
  }
  else
  {

    /* Disable Message object */
    can_mo->can_mo_ptr->MOCTR = CAN_MO_MOCTR_RESMSGVAL_Msk;
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	2220      	movs	r2, #32
 8001280:	61da      	str	r2, [r3, #28]
    if (can_mo->can_id_mode == (uint32_t)XMC_CAN_FRAME_TYPE_STANDARD_11BITS)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	79db      	ldrb	r3, [r3, #7]
 8001286:	f003 0320 	and.w	r3, r3, #32
 800128a:	b2db      	uxtb	r3, r3
 800128c:	2b00      	cmp	r3, #0
 800128e:	d128      	bne.n	80012e2 <XMC_CAN_MO_Config+0xe2>
    {
      reg = can_mo->mo_ar;
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	60fb      	str	r3, [r7, #12]
      reg &= (uint32_t) ~(CAN_MO_MOAR_ID_Msk);
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
 800129c:	60fb      	str	r3, [r7, #12]
      reg |= (can_mo->can_identifier << XMC_CAN_MO_MOAR_STDID_Pos);
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	685b      	ldr	r3, [r3, #4]
 80012a2:	f3c3 031c 	ubfx	r3, r3, #0, #29
 80012a6:	049b      	lsls	r3, r3, #18
 80012a8:	461a      	mov	r2, r3
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	4313      	orrs	r3, r2
 80012ae:	60fb      	str	r3, [r7, #12]
      can_mo->can_mo_ptr->MOAR = reg;
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	68fa      	ldr	r2, [r7, #12]
 80012b6:	619a      	str	r2, [r3, #24]

      reg = can_mo->mo_amr;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	689b      	ldr	r3, [r3, #8]
 80012bc:	60fb      	str	r3, [r7, #12]
      reg &= (uint32_t) ~(CAN_MO_MOAMR_AM_Msk);
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
 80012c4:	60fb      	str	r3, [r7, #12]
      reg |= (can_mo->can_id_mask << XMC_CAN_MO_MOAR_STDID_Pos);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	689b      	ldr	r3, [r3, #8]
 80012ca:	f3c3 031c 	ubfx	r3, r3, #0, #29
 80012ce:	049b      	lsls	r3, r3, #18
 80012d0:	461a      	mov	r2, r3
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	4313      	orrs	r3, r2
 80012d6:	60fb      	str	r3, [r7, #12]
      can_mo->can_mo_ptr->MOAMR = reg;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	68fa      	ldr	r2, [r7, #12]
 80012de:	60da      	str	r2, [r3, #12]
 80012e0:	e009      	b.n	80012f6 <XMC_CAN_MO_Config+0xf6>
    }
    else
    {
      can_mo->can_mo_ptr->MOAR = can_mo->mo_ar;
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	687a      	ldr	r2, [r7, #4]
 80012e8:	6852      	ldr	r2, [r2, #4]
 80012ea:	619a      	str	r2, [r3, #24]
      can_mo->can_mo_ptr->MOAMR = can_mo->mo_amr;
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	687a      	ldr	r2, [r7, #4]
 80012f2:	6892      	ldr	r2, [r2, #8]
 80012f4:	60da      	str	r2, [r3, #12]
    }
    /* Check whether message object is transmit message object */
    if (can_mo->can_mo_type == XMC_CAN_MO_TYPE_TRANSMSGOBJ)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	7e1b      	ldrb	r3, [r3, #24]
 80012fa:	2b01      	cmp	r3, #1
 80012fc:	d10c      	bne.n	8001318 <XMC_CAN_MO_Config+0x118>
    {
      /* Set MO as Transmit message object  */
      XMC_CAN_MO_UpdateData(can_mo);
 80012fe:	6878      	ldr	r0, [r7, #4]
 8001300:	f000 f81a 	bl	8001338 <XMC_CAN_MO_UpdateData>
      can_mo->can_mo_ptr->MOCTR = CAN_MO_MOCTR_SETDIR_Msk;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800130c:	61da      	str	r2, [r3, #28]

      /* Reset RTSEL and Set MSGVAL, TXEN0 and TXEN1 bits */
      can_mo->can_mo_ptr->MOCTR = (CAN_MO_MOCTR_SETTXEN0_Msk | CAN_MO_MOCTR_SETTXEN1_Msk | CAN_MO_MOCTR_SETMSGVAL_Msk |
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	4a07      	ldr	r2, [pc, #28]	; (8001330 <XMC_CAN_MO_Config+0x130>)
 8001314:	61da      	str	r2, [r3, #28]
 8001316:	e008      	b.n	800132a <XMC_CAN_MO_Config+0x12a>
                                   CAN_MO_MOCTR_RESRXEN_Msk  | CAN_MO_MOCTR_RESRTSEL_Msk);
    }
    else
    {
      /* Set MO as Receive message object and set RXEN bit */
      can_mo->can_mo_ptr->MOCTR = CAN_MO_MOCTR_RESDIR_Msk;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001320:	61da      	str	r2, [r3, #28]

      /* Reset RTSEL, TXEN1 and TXEN2 and Set MSGVAL and RXEN bits */
      can_mo->can_mo_ptr->MOCTR = (CAN_MO_MOCTR_RESTXEN0_Msk | CAN_MO_MOCTR_RESTXEN1_Msk | CAN_MO_MOCTR_SETMSGVAL_Msk |
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	4a03      	ldr	r2, [pc, #12]	; (8001334 <XMC_CAN_MO_Config+0x134>)
 8001328:	61da      	str	r2, [r3, #28]
                                   CAN_MO_MOCTR_SETRXEN_Msk | CAN_MO_MOCTR_RESRTSEL_Msk);
    }

  }
}
 800132a:	3718      	adds	r7, #24
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}
 8001330:	062000c0 	.word	0x062000c0
 8001334:	00a00640 	.word	0x00a00640

08001338 <XMC_CAN_MO_UpdateData>:

/* Update of XMC_CAN Object */
XMC_CAN_STATUS_t XMC_CAN_MO_UpdateData(const XMC_CAN_MO_t *const can_mo)
{
 8001338:	b480      	push	{r7}
 800133a:	b085      	sub	sp, #20
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  XMC_CAN_STATUS_t error = XMC_CAN_STATUS_MO_NOT_ACCEPTABLE;
 8001340:	2303      	movs	r3, #3
 8001342:	73fb      	strb	r3, [r7, #15]
  /* Check whether message object is transmit message object */
  if (can_mo->can_mo_type == XMC_CAN_MO_TYPE_TRANSMSGOBJ)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	7e1b      	ldrb	r3, [r3, #24]
 8001348:	2b01      	cmp	r3, #1
 800134a:	d122      	bne.n	8001392 <XMC_CAN_MO_UpdateData+0x5a>
  {
    can_mo->can_mo_ptr->MOCTR = CAN_MO_MOCTR_RESMSGVAL_Msk;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	2220      	movs	r2, #32
 8001352:	61da      	str	r2, [r3, #28]
    /* Configure data length */
    can_mo->can_mo_ptr->MOFCR = ((can_mo->can_mo_ptr->MOFCR) & ~(uint32_t)(CAN_MO_MOFCR_DLC_Msk)) |
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	687a      	ldr	r2, [r7, #4]
 800135a:	6812      	ldr	r2, [r2, #0]
 800135c:	6812      	ldr	r2, [r2, #0]
 800135e:	f022 6170 	bic.w	r1, r2, #251658240	; 0xf000000
                                (((uint32_t) can_mo->can_data_length << CAN_MO_MOFCR_DLC_Pos) & (uint32_t)CAN_MO_MOFCR_DLC_Msk);
 8001362:	687a      	ldr	r2, [r7, #4]
 8001364:	7b12      	ldrb	r2, [r2, #12]
 8001366:	0612      	lsls	r2, r2, #24
 8001368:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
  /* Check whether message object is transmit message object */
  if (can_mo->can_mo_type == XMC_CAN_MO_TYPE_TRANSMSGOBJ)
  {
    can_mo->can_mo_ptr->MOCTR = CAN_MO_MOCTR_RESMSGVAL_Msk;
    /* Configure data length */
    can_mo->can_mo_ptr->MOFCR = ((can_mo->can_mo_ptr->MOFCR) & ~(uint32_t)(CAN_MO_MOFCR_DLC_Msk)) |
 800136c:	430a      	orrs	r2, r1
 800136e:	601a      	str	r2, [r3, #0]
                                (((uint32_t) can_mo->can_data_length << CAN_MO_MOFCR_DLC_Pos) & (uint32_t)CAN_MO_MOFCR_DLC_Msk);
    /* Configure Data registers*/
    can_mo->can_mo_ptr->MODATAL = can_mo->can_data[0];
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	687a      	ldr	r2, [r7, #4]
 8001376:	6912      	ldr	r2, [r2, #16]
 8001378:	611a      	str	r2, [r3, #16]
    can_mo->can_mo_ptr->MODATAH = can_mo->can_data[1];
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	687a      	ldr	r2, [r7, #4]
 8001380:	6952      	ldr	r2, [r2, #20]
 8001382:	615a      	str	r2, [r3, #20]
    /* Reset RTSEL and Set MSGVAL ,TXEN0 and TXEN1 bits */
    can_mo->can_mo_ptr->MOCTR = (CAN_MO_MOCTR_SETNEWDAT_Msk | CAN_MO_MOCTR_SETMSGVAL_Msk | CAN_MO_MOCTR_RESRTSEL_Msk);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4a06      	ldr	r2, [pc, #24]	; (80013a4 <XMC_CAN_MO_UpdateData+0x6c>)
 800138a:	61da      	str	r2, [r3, #28]
    error = XMC_CAN_STATUS_SUCCESS;
 800138c:	2300      	movs	r3, #0
 800138e:	73fb      	strb	r3, [r7, #15]
 8001390:	e001      	b.n	8001396 <XMC_CAN_MO_UpdateData+0x5e>
  }
  else
  {
    error = XMC_CAN_STATUS_MO_NOT_ACCEPTABLE;
 8001392:	2303      	movs	r3, #3
 8001394:	73fb      	strb	r3, [r7, #15]
  }
  return error;
 8001396:	7bfb      	ldrb	r3, [r7, #15]
}
 8001398:	4618      	mov	r0, r3
 800139a:	3714      	adds	r7, #20
 800139c:	46bd      	mov	sp, r7
 800139e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a2:	4770      	bx	lr
 80013a4:	00280040 	.word	0x00280040

080013a8 <XMC_CAN_MO_Transmit>:

/* This function is will put a transmit request to transmit message object */
XMC_CAN_STATUS_t XMC_CAN_MO_Transmit(const XMC_CAN_MO_t *const can_mo)
{
 80013a8:	b480      	push	{r7}
 80013aa:	b087      	sub	sp, #28
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  XMC_CAN_STATUS_t error = XMC_CAN_STATUS_ERROR;
 80013b0:	2301      	movs	r3, #1
 80013b2:	75fb      	strb	r3, [r7, #23]
  uint32_t mo_type = (uint32_t)(((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_MSGVAL_Msk) >> CAN_MO_MOSTAT_MSGVAL_Pos);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	69db      	ldr	r3, [r3, #28]
 80013ba:	f003 0320 	and.w	r3, r3, #32
 80013be:	095b      	lsrs	r3, r3, #5
 80013c0:	613b      	str	r3, [r7, #16]
  uint32_t mo_transmission_ongoing = (uint32_t) ((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_TXRQ_Msk) >> CAN_MO_MOSTAT_TXRQ_Pos;
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	69db      	ldr	r3, [r3, #28]
 80013c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013cc:	0a1b      	lsrs	r3, r3, #8
 80013ce:	60fb      	str	r3, [r7, #12]
  /* check if message is disabled */
  if (mo_type == 0U)
 80013d0:	693b      	ldr	r3, [r7, #16]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d102      	bne.n	80013dc <XMC_CAN_MO_Transmit+0x34>
  {
    error = XMC_CAN_STATUS_MO_DISABLED;
 80013d6:	2304      	movs	r3, #4
 80013d8:	75fb      	strb	r3, [r7, #23]
 80013da:	e00c      	b.n	80013f6 <XMC_CAN_MO_Transmit+0x4e>
  }
  /* check if transmission is ongoing on message object */
  else if (mo_transmission_ongoing == 1U)
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	2b01      	cmp	r3, #1
 80013e0:	d102      	bne.n	80013e8 <XMC_CAN_MO_Transmit+0x40>
  {
    error = XMC_CAN_STATUS_BUSY;
 80013e2:	2302      	movs	r3, #2
 80013e4:	75fb      	strb	r3, [r7, #23]
 80013e6:	e006      	b.n	80013f6 <XMC_CAN_MO_Transmit+0x4e>
  }
  else
  {
    /* set TXRQ bit */
    can_mo->can_mo_ptr-> MOCTR = CAN_MO_MOCTR_SETTXRQ_Msk | CAN_MO_MOCTR_SETTXEN0_Msk | CAN_MO_MOCTR_SETTXEN1_Msk;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f04f 62e0 	mov.w	r2, #117440512	; 0x7000000
 80013f0:	61da      	str	r2, [r3, #28]
    error = XMC_CAN_STATUS_SUCCESS;
 80013f2:	2300      	movs	r3, #0
 80013f4:	75fb      	strb	r3, [r7, #23]
  }
  return error;
 80013f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80013f8:	4618      	mov	r0, r3
 80013fa:	371c      	adds	r7, #28
 80013fc:	46bd      	mov	sp, r7
 80013fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001402:	4770      	bx	lr

08001404 <XMC_CAN_MO_Receive>:
}


/* This function is will read the message object data bytes */
XMC_CAN_STATUS_t XMC_CAN_MO_Receive (XMC_CAN_MO_t *can_mo)
{
 8001404:	b480      	push	{r7}
 8001406:	b087      	sub	sp, #28
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  XMC_CAN_STATUS_t error = XMC_CAN_STATUS_ERROR;
 800140c:	2301      	movs	r3, #1
 800140e:	75fb      	strb	r3, [r7, #23]
  uint8_t rx_pnd = 0U;
 8001410:	2300      	movs	r3, #0
 8001412:	75bb      	strb	r3, [r7, #22]
  uint8_t new_data = 0U;
 8001414:	2300      	movs	r3, #0
 8001416:	757b      	strb	r3, [r7, #21]
  uint32_t mo_type = (uint32_t)((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_DIR_Msk) >> CAN_MO_MOSTAT_DIR_Pos;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	69db      	ldr	r3, [r3, #28]
 800141e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001422:	0adb      	lsrs	r3, r3, #11
 8001424:	613b      	str	r3, [r7, #16]
  uint32_t mo_recepcion_ongoing = (uint32_t)((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_RXUPD_Msk) >> CAN_MO_MOSTAT_RXUPD_Pos;
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	69db      	ldr	r3, [r3, #28]
 800142c:	f003 0304 	and.w	r3, r3, #4
 8001430:	089b      	lsrs	r3, r3, #2
 8001432:	60fb      	str	r3, [r7, #12]
  /* check if message object is a receive message object */
  if (mo_type != (uint32_t)XMC_CAN_MO_TYPE_RECMSGOBJ)
 8001434:	693b      	ldr	r3, [r7, #16]
 8001436:	2b00      	cmp	r3, #0
 8001438:	d002      	beq.n	8001440 <XMC_CAN_MO_Receive+0x3c>
  {
    error = XMC_CAN_STATUS_MO_NOT_ACCEPTABLE;
 800143a:	2303      	movs	r3, #3
 800143c:	75fb      	strb	r3, [r7, #23]
 800143e:	e0a7      	b.n	8001590 <XMC_CAN_MO_Receive+0x18c>
  }
  /* check if reception is ongoing on message object */
  else if (mo_recepcion_ongoing == 1U)
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	2b01      	cmp	r3, #1
 8001444:	d102      	bne.n	800144c <XMC_CAN_MO_Receive+0x48>
  {
    error = XMC_CAN_STATUS_BUSY;
 8001446:	2302      	movs	r3, #2
 8001448:	75fb      	strb	r3, [r7, #23]
 800144a:	e0a1      	b.n	8001590 <XMC_CAN_MO_Receive+0x18c>
  else
  {
    /* read message parameters */
    do
    {
      can_mo->can_mo_ptr->MOCTR = CAN_MO_MOCTR_RESNEWDAT_Msk;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	2208      	movs	r2, #8
 8001452:	61da      	str	r2, [r3, #28]
      if ((((can_mo->can_mo_ptr->MOAR) & CAN_MO_MOAR_IDE_Msk) >> CAN_MO_MOAR_IDE_Pos) == 0U)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	699b      	ldr	r3, [r3, #24]
 800145a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800145e:	0f5b      	lsrs	r3, r3, #29
 8001460:	2b00      	cmp	r3, #0
 8001462:	d140      	bne.n	80014e6 <XMC_CAN_MO_Receive+0xe2>
      {
        can_mo->can_id_mode = (uint32_t)XMC_CAN_FRAME_TYPE_STANDARD_11BITS;
 8001464:	687a      	ldr	r2, [r7, #4]
 8001466:	79d3      	ldrb	r3, [r2, #7]
 8001468:	f36f 1345 	bfc	r3, #5, #1
 800146c:	71d3      	strb	r3, [r2, #7]
        can_mo->can_identifier = (can_mo->can_mo_ptr->MOAR & XMC_CAN_MO_MOAR_STDID_Msk) >> XMC_CAN_MO_MOAR_STDID_Pos;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	699a      	ldr	r2, [r3, #24]
 8001474:	4b4a      	ldr	r3, [pc, #296]	; (80015a0 <XMC_CAN_MO_Receive+0x19c>)
 8001476:	4013      	ands	r3, r2
 8001478:	0c9b      	lsrs	r3, r3, #18
 800147a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800147e:	687a      	ldr	r2, [r7, #4]
 8001480:	6853      	ldr	r3, [r2, #4]
 8001482:	f361 031c 	bfi	r3, r1, #0, #29
 8001486:	6053      	str	r3, [r2, #4]
        can_mo->can_ide_mask = (uint32_t)(can_mo->can_mo_ptr->MOAMR & CAN_MO_MOAMR_MIDE_Msk) >> CAN_MO_MOAMR_MIDE_Pos;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	68db      	ldr	r3, [r3, #12]
 800148e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001492:	0f5b      	lsrs	r3, r3, #29
 8001494:	b2db      	uxtb	r3, r3
 8001496:	f003 0301 	and.w	r3, r3, #1
 800149a:	b2d9      	uxtb	r1, r3
 800149c:	687a      	ldr	r2, [r7, #4]
 800149e:	7ad3      	ldrb	r3, [r2, #11]
 80014a0:	f361 1345 	bfi	r3, r1, #5, #1
 80014a4:	72d3      	strb	r3, [r2, #11]
        if (can_mo->can_ide_mask == 1U)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	7adb      	ldrb	r3, [r3, #11]
 80014aa:	f003 0320 	and.w	r3, r3, #32
 80014ae:	b2db      	uxtb	r3, r3
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d00d      	beq.n	80014d0 <XMC_CAN_MO_Receive+0xcc>
        {
          can_mo->can_id_mask = (uint32_t)(can_mo->can_mo_ptr->MOAMR & XMC_CAN_MO_MOAR_STDID_Msk) >> XMC_CAN_MO_MOAR_STDID_Pos;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	68da      	ldr	r2, [r3, #12]
 80014ba:	4b39      	ldr	r3, [pc, #228]	; (80015a0 <XMC_CAN_MO_Receive+0x19c>)
 80014bc:	4013      	ands	r3, r2
 80014be:	0c9b      	lsrs	r3, r3, #18
 80014c0:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80014c4:	687a      	ldr	r2, [r7, #4]
 80014c6:	6893      	ldr	r3, [r2, #8]
 80014c8:	f361 031c 	bfi	r3, r1, #0, #29
 80014cc:	6093      	str	r3, [r2, #8]
 80014ce:	e032      	b.n	8001536 <XMC_CAN_MO_Receive+0x132>
        }
        else
        {
          can_mo->can_id_mask = (uint32_t)(can_mo->can_mo_ptr->MOAMR & CAN_MO_MOAMR_AM_Msk);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	68db      	ldr	r3, [r3, #12]
 80014d6:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80014da:	687a      	ldr	r2, [r7, #4]
 80014dc:	6893      	ldr	r3, [r2, #8]
 80014de:	f361 031c 	bfi	r3, r1, #0, #29
 80014e2:	6093      	str	r3, [r2, #8]
 80014e4:	e027      	b.n	8001536 <XMC_CAN_MO_Receive+0x132>
        }
      }
      else
      {
        can_mo->can_id_mode = (uint32_t)XMC_CAN_FRAME_TYPE_EXTENDED_29BITS;
 80014e6:	687a      	ldr	r2, [r7, #4]
 80014e8:	79d3      	ldrb	r3, [r2, #7]
 80014ea:	f043 0320 	orr.w	r3, r3, #32
 80014ee:	71d3      	strb	r3, [r2, #7]
        can_mo->can_identifier = (can_mo->can_mo_ptr->MOAR & CAN_MO_MOAR_ID_Msk);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	699b      	ldr	r3, [r3, #24]
 80014f6:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80014fa:	687a      	ldr	r2, [r7, #4]
 80014fc:	6853      	ldr	r3, [r2, #4]
 80014fe:	f361 031c 	bfi	r3, r1, #0, #29
 8001502:	6053      	str	r3, [r2, #4]
        can_mo->can_id_mask = (uint32_t)(can_mo->can_mo_ptr->MOAMR & CAN_MO_MOAMR_AM_Msk);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	68db      	ldr	r3, [r3, #12]
 800150a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800150e:	687a      	ldr	r2, [r7, #4]
 8001510:	6893      	ldr	r3, [r2, #8]
 8001512:	f361 031c 	bfi	r3, r1, #0, #29
 8001516:	6093      	str	r3, [r2, #8]
        can_mo->can_ide_mask = (uint32_t)(can_mo->can_mo_ptr->MOAMR & CAN_MO_MOAMR_MIDE_Msk) >> CAN_MO_MOAMR_MIDE_Pos;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	68db      	ldr	r3, [r3, #12]
 800151e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001522:	0f5b      	lsrs	r3, r3, #29
 8001524:	b2db      	uxtb	r3, r3
 8001526:	f003 0301 	and.w	r3, r3, #1
 800152a:	b2d9      	uxtb	r1, r3
 800152c:	687a      	ldr	r2, [r7, #4]
 800152e:	7ad3      	ldrb	r3, [r2, #11]
 8001530:	f361 1345 	bfi	r3, r1, #5, #1
 8001534:	72d3      	strb	r3, [r2, #11]
      }
      can_mo->can_data_length = (uint8_t)((uint32_t)((can_mo->can_mo_ptr->MOFCR) & CAN_MO_MOFCR_DLC_Msk) >> CAN_MO_MOFCR_DLC_Pos);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8001540:	0e1b      	lsrs	r3, r3, #24
 8001542:	b2da      	uxtb	r2, r3
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	731a      	strb	r2, [r3, #12]

      can_mo->can_data[0] = can_mo->can_mo_ptr->MODATAL;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	691a      	ldr	r2, [r3, #16]
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	611a      	str	r2, [r3, #16]
      can_mo->can_data[1] = can_mo->can_mo_ptr->MODATAH;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	695a      	ldr	r2, [r3, #20]
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	615a      	str	r2, [r3, #20]

      rx_pnd = (uint8_t)((uint32_t)((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_RXUPD_Msk) >> CAN_MO_MOSTAT_RXUPD_Pos);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	69db      	ldr	r3, [r3, #28]
 8001562:	f003 0304 	and.w	r3, r3, #4
 8001566:	089b      	lsrs	r3, r3, #2
 8001568:	75bb      	strb	r3, [r7, #22]
      new_data = (uint8_t)((uint32_t)((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_NEWDAT_Msk) >> CAN_MO_MOSTAT_NEWDAT_Pos);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	69db      	ldr	r3, [r3, #28]
 8001570:	f003 0308 	and.w	r3, r3, #8
 8001574:	08db      	lsrs	r3, r3, #3
 8001576:	757b      	strb	r3, [r7, #21]
    }
    while ((rx_pnd != 0U) && (new_data != 0U));
 8001578:	7dbb      	ldrb	r3, [r7, #22]
 800157a:	2b00      	cmp	r3, #0
 800157c:	d003      	beq.n	8001586 <XMC_CAN_MO_Receive+0x182>
 800157e:	7d7b      	ldrb	r3, [r7, #21]
 8001580:	2b00      	cmp	r3, #0
 8001582:	f47f af63 	bne.w	800144c <XMC_CAN_MO_Receive+0x48>

    can_mo->can_mo_type = XMC_CAN_MO_TYPE_RECMSGOBJ;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	2200      	movs	r2, #0
 800158a:	761a      	strb	r2, [r3, #24]
    error = XMC_CAN_STATUS_SUCCESS;
 800158c:	2300      	movs	r3, #0
 800158e:	75fb      	strb	r3, [r7, #23]
  }
  return error;
 8001590:	7dfb      	ldrb	r3, [r7, #23]
}
 8001592:	4618      	mov	r0, r3
 8001594:	371c      	adds	r7, #28
 8001596:	46bd      	mov	sp, r7
 8001598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159c:	4770      	bx	lr
 800159e:	bf00      	nop
 80015a0:	1ffc0000 	.word	0x1ffc0000

080015a4 <XMC_CAN_NODE_EnableEvent>:

/* Function to enable node event */
void XMC_CAN_NODE_EnableEvent(XMC_CAN_NODE_t *const can_node, const XMC_CAN_NODE_EVENT_t event)
{
 80015a4:	b480      	push	{r7}
 80015a6:	b083      	sub	sp, #12
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
 80015ac:	6039      	str	r1, [r7, #0]
  if (event != XMC_CAN_NODE_EVENT_CFCIE)
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80015b4:	d006      	beq.n	80015c4 <XMC_CAN_NODE_EnableEvent+0x20>
  {
    can_node->NCR |= (uint32_t)event;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681a      	ldr	r2, [r3, #0]
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	431a      	orrs	r2, r3
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	601a      	str	r2, [r3, #0]
 80015c2:	e005      	b.n	80015d0 <XMC_CAN_NODE_EnableEvent+0x2c>
  }
  else
  {
    can_node->NFCR |= (uint32_t)event;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	699a      	ldr	r2, [r3, #24]
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	431a      	orrs	r2, r3
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	619a      	str	r2, [r3, #24]
  }
}
 80015d0:	370c      	adds	r7, #12
 80015d2:	46bd      	mov	sp, r7
 80015d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d8:	4770      	bx	lr
 80015da:	bf00      	nop

080015dc <XMC_CCU4_StartPrescaler>:
 * \par<b>Related APIs:</b><br>
 * XMC_CCU4_Init()<BR> XMC_CCU4_EnableClock()<BR> XMC_CCU4_DisableClock()<BR> XMC_CCU4_StartPrescaler()<BR>
 * XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_StartPrescaler(XMC_CCU4_MODULE_t *const module)
{
 80015dc:	b480      	push	{r7}
 80015de:	b083      	sub	sp, #12
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_StartPrescaler:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  module->GIDLC = (uint32_t) CCU4_GIDLC_SPRB_Msk;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80015ea:	60da      	str	r2, [r3, #12]
}
 80015ec:	370c      	adds	r7, #12
 80015ee:	46bd      	mov	sp, r7
 80015f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f4:	4770      	bx	lr
 80015f6:	bf00      	nop

080015f8 <XMC_CCU4_lDeassertReset>:
    XMC_ASSERT("XMC_CCU4_lAssertReset:Invalid Module Pointer", 0);
  }
}

__STATIC_INLINE void XMC_CCU4_lDeassertReset(const XMC_CCU4_MODULE_t *const module)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b082      	sub	sp, #8
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  if (module == CCU40)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	4a08      	ldr	r2, [pc, #32]	; (8001624 <XMC_CCU4_lDeassertReset+0x2c>)
 8001604:	4293      	cmp	r3, r2
 8001606:	d103      	bne.n	8001610 <XMC_CCU4_lDeassertReset+0x18>
  {
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU40);
 8001608:	2004      	movs	r0, #4
 800160a:	f7ff f84d 	bl	80006a8 <XMC_SCU_RESET_DeassertPeripheralReset>
 800160e:	e006      	b.n	800161e <XMC_CCU4_lDeassertReset+0x26>
  }
#if defined(CCU41)
  else if (module == CCU41)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	4a05      	ldr	r2, [pc, #20]	; (8001628 <XMC_CCU4_lDeassertReset+0x30>)
 8001614:	4293      	cmp	r3, r2
 8001616:	d102      	bne.n	800161e <XMC_CCU4_lDeassertReset+0x26>
  {
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU41);
 8001618:	2008      	movs	r0, #8
 800161a:	f7ff f845 	bl	80006a8 <XMC_SCU_RESET_DeassertPeripheralReset>
#endif
  else
  {
    XMC_ASSERT("XMC_CCU4_lDeassertReset:Invalid Module Pointer", 0);
  }
}
 800161e:	3708      	adds	r7, #8
 8001620:	46bd      	mov	sp, r7
 8001622:	bd80      	pop	{r7, pc}
 8001624:	4000c000 	.word	0x4000c000
 8001628:	40010000 	.word	0x40010000

0800162c <XMC_CCU4_lUngateClock>:
    XMC_ASSERT("XMC_CCU4_lGateClock:Invalid Module Pointer", 0);
  }
}

__STATIC_INLINE void XMC_CCU4_lUngateClock(const XMC_CCU4_MODULE_t *const module)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b082      	sub	sp, #8
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
  if (module == CCU40)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	4a08      	ldr	r2, [pc, #32]	; (8001658 <XMC_CCU4_lUngateClock+0x2c>)
 8001638:	4293      	cmp	r3, r2
 800163a:	d103      	bne.n	8001644 <XMC_CCU4_lUngateClock+0x18>
  {
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU40);
 800163c:	2004      	movs	r0, #4
 800163e:	f7ff f9a3 	bl	8000988 <XMC_SCU_CLOCK_UngatePeripheralClock>
 8001642:	e006      	b.n	8001652 <XMC_CCU4_lUngateClock+0x26>
  }
#if defined(CCU41)
  else if (module == CCU41)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	4a05      	ldr	r2, [pc, #20]	; (800165c <XMC_CCU4_lUngateClock+0x30>)
 8001648:	4293      	cmp	r3, r2
 800164a:	d102      	bne.n	8001652 <XMC_CCU4_lUngateClock+0x26>
  {
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU41);
 800164c:	2008      	movs	r0, #8
 800164e:	f7ff f99b 	bl	8000988 <XMC_SCU_CLOCK_UngatePeripheralClock>
#endif
  else
  {
    XMC_ASSERT("XMC_CCU4_lUngateClock:Invalid Module Pointer", 0);
  }
}
 8001652:	3708      	adds	r7, #8
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}
 8001658:	4000c000 	.word	0x4000c000
 800165c:	40010000 	.word	0x40010000

08001660 <XMC_CCU4_EnableModule>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 ********************************************************************************************************************/

void XMC_CCU4_EnableModule(XMC_CCU4_MODULE_t *const module)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b082      	sub	sp, #8
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_EnableModule:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));

#if UC_FAMILY == XMC4
  /* Enable CCU4 module clock */
  XMC_SCU_CLOCK_EnableClock(XMC_SCU_CLOCK_CCU);
 8001668:	2010      	movs	r0, #16
 800166a:	f7ff f97d 	bl	8000968 <XMC_SCU_CLOCK_EnableClock>
#endif

#if defined(CLOCK_GATING_SUPPORTED)
  XMC_CCU4_lUngateClock(module);
 800166e:	6878      	ldr	r0, [r7, #4]
 8001670:	f7ff ffdc 	bl	800162c <XMC_CCU4_lUngateClock>
#endif

#if defined(PERIPHERAL_RESET_SUPPORTED)
  XMC_CCU4_lDeassertReset(module);
 8001674:	6878      	ldr	r0, [r7, #4]
 8001676:	f7ff ffbf 	bl	80015f8 <XMC_CCU4_lDeassertReset>
#endif
}
 800167a:	3708      	adds	r7, #8
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}

08001680 <XMC_CCU4_Init>:
#endif
}

/* API to initialize CCU4 global resources  */
void XMC_CCU4_Init(XMC_CCU4_MODULE_t *const module, const XMC_CCU4_SLICE_MCMS_ACTION_t mcs_action)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b084      	sub	sp, #16
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
 8001688:	460b      	mov	r3, r1
 800168a:	70fb      	strb	r3, [r7, #3]

  XMC_ASSERT("XMC_CCU4_Init:Invalid module pointer", XMC_CCU4_IsValidModule(module));
  XMC_ASSERT("XMC_CCU4_Init:Invalid mcs action", XMC_CCU4_SLICE_CHECK_MCS_ACTION(mcs_action));

  /* Enable CCU4 module */
  XMC_CCU4_EnableModule(module);
 800168c:	6878      	ldr	r0, [r7, #4]
 800168e:	f7ff ffe7 	bl	8001660 <XMC_CCU4_EnableModule>
  /* Start the prescaler */
  XMC_CCU4_StartPrescaler(module);
 8001692:	6878      	ldr	r0, [r7, #4]
 8001694:	f7ff ffa2 	bl	80015dc <XMC_CCU4_StartPrescaler>

  gctrl = module->GCTRL;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	60fb      	str	r3, [r7, #12]
  gctrl &= ~((uint32_t) CCU4_GCTRL_MSDE_Msk);
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80016a4:	60fb      	str	r3, [r7, #12]
  gctrl |= ((uint32_t) mcs_action) << CCU4_GCTRL_MSDE_Pos;
 80016a6:	78fb      	ldrb	r3, [r7, #3]
 80016a8:	039b      	lsls	r3, r3, #14
 80016aa:	68fa      	ldr	r2, [r7, #12]
 80016ac:	4313      	orrs	r3, r2
 80016ae:	60fb      	str	r3, [r7, #12]

  module->GCTRL = gctrl;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	68fa      	ldr	r2, [r7, #12]
 80016b4:	601a      	str	r2, [r3, #0]
}
 80016b6:	3710      	adds	r7, #16
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}

080016bc <XMC_CCU4_SLICE_CompareInit>:
}

/* API to configure CC4 Slice as Timer */
void XMC_CCU4_SLICE_CompareInit(XMC_CCU4_SLICE_t *const slice,
                                const XMC_CCU4_SLICE_COMPARE_CONFIG_t *const compare_init)
{
 80016bc:	b480      	push	{r7}
 80016be:	b083      	sub	sp, #12
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
 80016c4:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU4_SLICE_CompareInit:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_CompareInit:Compare Init Pointer is NULL",
             (XMC_CCU4_SLICE_COMPARE_CONFIG_t *) NULL != compare_init);

  /* Program the timer mode */
  slice->TC = compare_init->tc;
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	681a      	ldr	r2, [r3, #0]
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	615a      	str	r2, [r3, #20]
  /* Enable the timer concatenation */
  slice->CMC = ((uint32_t) compare_init->timer_concatenation << CCU4_CC4_CMC_TCE_Pos);
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	795b      	ldrb	r3, [r3, #5]
 80016d2:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80016d6:	b2db      	uxtb	r3, r3
 80016d8:	051a      	lsls	r2, r3, #20
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	605a      	str	r2, [r3, #4]
  /* Program initial prescaler divider value */
  slice->PSC = (uint32_t) compare_init->prescaler_initval;
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	791b      	ldrb	r3, [r3, #4]
 80016e2:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80016e6:	b2db      	uxtb	r3, r3
 80016e8:	461a      	mov	r2, r3
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	625a      	str	r2, [r3, #36]	; 0x24
  /* Program the dither compare value */
  slice->DITS = (uint32_t) compare_init->dither_limit;
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	795b      	ldrb	r3, [r3, #5]
 80016f2:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80016f6:	b2db      	uxtb	r3, r3
 80016f8:	461a      	mov	r2, r3
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	621a      	str	r2, [r3, #32]
  /* Program timer output passive level */
  slice->PSL = (uint32_t) compare_init->passive_level;
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	795b      	ldrb	r3, [r3, #5]
 8001702:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8001706:	b2db      	uxtb	r3, r3
 8001708:	461a      	mov	r2, r3
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	619a      	str	r2, [r3, #24]
  /* Program floating prescaler compare value */
  slice->FPCS = (uint32_t) compare_init->float_limit;
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	791b      	ldrb	r3, [r3, #4]
 8001712:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001716:	b2db      	uxtb	r3, r3
 8001718:	461a      	mov	r2, r3
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800171e:	370c      	adds	r7, #12
 8001720:	46bd      	mov	sp, r7
 8001722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001726:	4770      	bx	lr

08001728 <XMC_CCU4_SLICE_SetInterruptNode>:

/* Binds a capcom event to an NVIC node  */
void XMC_CCU4_SLICE_SetInterruptNode(XMC_CCU4_SLICE_t *const slice,
                                     const XMC_CCU4_SLICE_IRQ_ID_t event,
                                     const XMC_CCU4_SLICE_SR_ID_t sr)
{
 8001728:	b480      	push	{r7}
 800172a:	b087      	sub	sp, #28
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
 8001730:	460b      	mov	r3, r1
 8001732:	70fb      	strb	r3, [r7, #3]
 8001734:	4613      	mov	r3, r2
 8001736:	70bb      	strb	r3, [r7, #2]

  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid SR ID ", XMC_CCU4_SLICE_CHECK_SR_ID(sr));
  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid event", XMC_CCU4_SLICE_CHECK_INTERRUPT(event));

  switch (event)
 8001738:	78fb      	ldrb	r3, [r7, #3]
 800173a:	2b0b      	cmp	r3, #11
 800173c:	d836      	bhi.n	80017ac <XMC_CCU4_SLICE_SetInterruptNode+0x84>
 800173e:	a201      	add	r2, pc, #4	; (adr r2, 8001744 <XMC_CCU4_SLICE_SetInterruptNode+0x1c>)
 8001740:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001744:	08001775 	.word	0x08001775
 8001748:	08001775 	.word	0x08001775
 800174c:	0800177f 	.word	0x0800177f
 8001750:	0800177f 	.word	0x0800177f
 8001754:	080017ad 	.word	0x080017ad
 8001758:	080017ad 	.word	0x080017ad
 800175c:	080017ad 	.word	0x080017ad
 8001760:	080017ad 	.word	0x080017ad
 8001764:	08001789 	.word	0x08001789
 8001768:	08001795 	.word	0x08001795
 800176c:	080017a1 	.word	0x080017a1
 8001770:	080017a1 	.word	0x080017a1
  {
    case XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH:
    case XMC_CCU4_SLICE_IRQ_ID_ONE_MATCH:
      mask = ((uint32_t) CCU4_CC4_SRS_POSR_Msk);
 8001774:	2303      	movs	r3, #3
 8001776:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_POSR_Pos;
 8001778:	2300      	movs	r3, #0
 800177a:	617b      	str	r3, [r7, #20]
      break;
 800177c:	e01b      	b.n	80017b6 <XMC_CCU4_SLICE_SetInterruptNode+0x8e>

    case XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_UP:
    case XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_DOWN:
      mask = ((uint32_t) CCU4_CC4_SRS_CMSR_Msk);
 800177e:	230c      	movs	r3, #12
 8001780:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_CMSR_Pos;
 8001782:	2302      	movs	r3, #2
 8001784:	617b      	str	r3, [r7, #20]
      break;
 8001786:	e016      	b.n	80017b6 <XMC_CCU4_SLICE_SetInterruptNode+0x8e>

    case XMC_CCU4_SLICE_IRQ_ID_EVENT0:
      mask = ((uint32_t) CCU4_CC4_SRS_E0SR_Msk);
 8001788:	f44f 7340 	mov.w	r3, #768	; 0x300
 800178c:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_E0SR_Pos;
 800178e:	2308      	movs	r3, #8
 8001790:	617b      	str	r3, [r7, #20]
      break;
 8001792:	e010      	b.n	80017b6 <XMC_CCU4_SLICE_SetInterruptNode+0x8e>

    case XMC_CCU4_SLICE_IRQ_ID_EVENT1:
      mask = ((uint32_t) CCU4_CC4_SRS_E1SR_Msk);
 8001794:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001798:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_E1SR_Pos;
 800179a:	230a      	movs	r3, #10
 800179c:	617b      	str	r3, [r7, #20]
      break;
 800179e:	e00a      	b.n	80017b6 <XMC_CCU4_SLICE_SetInterruptNode+0x8e>

    case XMC_CCU4_SLICE_IRQ_ID_EVENT2:
    case XMC_CCU4_SLICE_IRQ_ID_TRAP:
      mask = ((uint32_t) CCU4_CC4_SRS_E2SR_Msk);
 80017a0:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80017a4:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_E2SR_Pos;
 80017a6:	230c      	movs	r3, #12
 80017a8:	617b      	str	r3, [r7, #20]
      break;
 80017aa:	e004      	b.n	80017b6 <XMC_CCU4_SLICE_SetInterruptNode+0x8e>
	  
	default:
	  mask = 0;
 80017ac:	2300      	movs	r3, #0
 80017ae:	613b      	str	r3, [r7, #16]
	  pos = 0;
 80017b0:	2300      	movs	r3, #0
 80017b2:	617b      	str	r3, [r7, #20]
	  break;
 80017b4:	bf00      	nop
  }

  if (mask != 0)
 80017b6:	693b      	ldr	r3, [r7, #16]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d013      	beq.n	80017e4 <XMC_CCU4_SLICE_SetInterruptNode+0xbc>
  {
    srs = slice->SRS;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80017c2:	60fb      	str	r3, [r7, #12]
    srs &= ~mask;
 80017c4:	693b      	ldr	r3, [r7, #16]
 80017c6:	43db      	mvns	r3, r3
 80017c8:	68fa      	ldr	r2, [r7, #12]
 80017ca:	4013      	ands	r3, r2
 80017cc:	60fb      	str	r3, [r7, #12]
    srs |= (uint32_t)sr << pos;
 80017ce:	78ba      	ldrb	r2, [r7, #2]
 80017d0:	697b      	ldr	r3, [r7, #20]
 80017d2:	fa02 f303 	lsl.w	r3, r2, r3
 80017d6:	68fa      	ldr	r2, [r7, #12]
 80017d8:	4313      	orrs	r3, r2
 80017da:	60fb      	str	r3, [r7, #12]
    slice->SRS = srs;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	68fa      	ldr	r2, [r7, #12]
 80017e0:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  }
}
 80017e4:	371c      	adds	r7, #28
 80017e6:	46bd      	mov	sp, r7
 80017e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ec:	4770      	bx	lr
 80017ee:	bf00      	nop

080017f0 <XMC_ERU_ETL_Init>:
 ********************************************************************************************************************/
/* Initializes the selected ERU_ETLx channel with the config structure.  */
void XMC_ERU_ETL_Init(XMC_ERU_t *const eru,
                      const uint8_t channel,
                      const XMC_ERU_ETL_CONFIG_t *const config)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b084      	sub	sp, #16
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	60f8      	str	r0, [r7, #12]
 80017f8:	460b      	mov	r3, r1
 80017fa:	607a      	str	r2, [r7, #4]
 80017fc:	72fb      	strb	r3, [r7, #11]
  XMC_ASSERT("XMC_ERU_ETL_Init:Invalid Module Pointer", XMC_ERU_CHECK_MODULE_PTR(eru));
  XMC_ASSERT("XMC_ERU_ETL_Init:Invalid Channel Number", (channel < 4U));

  XMC_ERU_Enable(eru);
 80017fe:	68f8      	ldr	r0, [r7, #12]
 8001800:	f7fe fdcc 	bl	800039c <XMC_ERU_Enable>

  eru->EXISEL = (eru->EXISEL &
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	681a      	ldr	r2, [r3, #0]
                 ~((uint32_t)(ERU_EXISEL_EXS0A_Msk | ERU_EXISEL_EXS0B_Msk) << (channel * ERU_EXISEL_BITSIZE))) |
 8001808:	7afb      	ldrb	r3, [r7, #11]
 800180a:	009b      	lsls	r3, r3, #2
 800180c:	4619      	mov	r1, r3
 800180e:	230f      	movs	r3, #15
 8001810:	408b      	lsls	r3, r1
 8001812:	43db      	mvns	r3, r3
  XMC_ASSERT("XMC_ERU_ETL_Init:Invalid Module Pointer", XMC_ERU_CHECK_MODULE_PTR(eru));
  XMC_ASSERT("XMC_ERU_ETL_Init:Invalid Channel Number", (channel < 4U));

  XMC_ERU_Enable(eru);

  eru->EXISEL = (eru->EXISEL &
 8001814:	401a      	ands	r2, r3
                 ~((uint32_t)(ERU_EXISEL_EXS0A_Msk | ERU_EXISEL_EXS0B_Msk) << (channel * ERU_EXISEL_BITSIZE))) |
                (config->input << (channel * (uint32_t)ERU_EXISEL_BITSIZE));
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	7af9      	ldrb	r1, [r7, #11]
 800181c:	0089      	lsls	r1, r1, #2
 800181e:	408b      	lsls	r3, r1
  XMC_ASSERT("XMC_ERU_ETL_Init:Invalid Channel Number", (channel < 4U));

  XMC_ERU_Enable(eru);

  eru->EXISEL = (eru->EXISEL &
                 ~((uint32_t)(ERU_EXISEL_EXS0A_Msk | ERU_EXISEL_EXS0B_Msk) << (channel * ERU_EXISEL_BITSIZE))) |
 8001820:	431a      	orrs	r2, r3
  XMC_ASSERT("XMC_ERU_ETL_Init:Invalid Module Pointer", XMC_ERU_CHECK_MODULE_PTR(eru));
  XMC_ASSERT("XMC_ERU_ETL_Init:Invalid Channel Number", (channel < 4U));

  XMC_ERU_Enable(eru);

  eru->EXISEL = (eru->EXISEL &
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	601a      	str	r2, [r3, #0]
                 ~((uint32_t)(ERU_EXISEL_EXS0A_Msk | ERU_EXISEL_EXS0B_Msk) << (channel * ERU_EXISEL_BITSIZE))) |
                (config->input << (channel * (uint32_t)ERU_EXISEL_BITSIZE));

  eru->EXICON[channel] = config->raw;
 8001826:	7afa      	ldrb	r2, [r7, #11]
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6859      	ldr	r1, [r3, #4]
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	3204      	adds	r2, #4
 8001830:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8001834:	3710      	adds	r7, #16
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop

0800183c <XMC_ERU_ETL_SetEdgeDetection>:

/* Configure event trigger edge/s by setting (RE, FE) bits of EXICONx(x = [0 to 3]) register.*/
void XMC_ERU_ETL_SetEdgeDetection(XMC_ERU_t *const eru,
                                  const uint8_t channel,
                                  const XMC_ERU_ETL_EDGE_DETECTION_t edge_detection)
{
 800183c:	b480      	push	{r7}
 800183e:	b083      	sub	sp, #12
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
 8001844:	460b      	mov	r3, r1
 8001846:	70fb      	strb	r3, [r7, #3]
 8001848:	4613      	mov	r3, r2
 800184a:	70bb      	strb	r3, [r7, #2]
  XMC_ASSERT("XMC_ERU_ETL_SetEdgeDetection:Invalid Module Pointer", XMC_ERU_CHECK_MODULE_PTR(eru));
  XMC_ASSERT("XMC_ERU_ETL_SetEdgeDetection:Invalid Channel Number", (channel < 4U));
  XMC_ASSERT("XMC_ERU_ETL_SetEdgeDetection:Invalid Trigger Edge", XMC_ERU_ETL_CHECK_TRIGGER_EDGE(edge_detection));

  eru->EXICON_b[channel].ED = (uint8_t)edge_detection;
 800184c:	78fa      	ldrb	r2, [r7, #3]
 800184e:	78bb      	ldrb	r3, [r7, #2]
 8001850:	f003 0303 	and.w	r3, r3, #3
 8001854:	b2d9      	uxtb	r1, r3
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	3204      	adds	r2, #4
 800185a:	f001 0103 	and.w	r1, r1, #3
 800185e:	0089      	lsls	r1, r1, #2
 8001860:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8001864:	f020 000c 	bic.w	r0, r0, #12
 8001868:	4301      	orrs	r1, r0
 800186a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 800186e:	370c      	adds	r7, #12
 8001870:	46bd      	mov	sp, r7
 8001872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001876:	4770      	bx	lr

08001878 <XMC_ERU_OGU_SetServiceRequestMode>:

/* Configures the gating scheme for service request generation by setting (GP) bit. */
void XMC_ERU_OGU_SetServiceRequestMode(XMC_ERU_t *const eru,
                                       const uint8_t channel,
                                       const XMC_ERU_OGU_SERVICE_REQUEST_t mode)
{
 8001878:	b480      	push	{r7}
 800187a:	b083      	sub	sp, #12
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
 8001880:	460b      	mov	r3, r1
 8001882:	70fb      	strb	r3, [r7, #3]
 8001884:	4613      	mov	r3, r2
 8001886:	70bb      	strb	r3, [r7, #2]
  XMC_ASSERT("XMC_ERU_OGU_SetServiceRequestMode:Invalid Module Pointer", XMC_ERU_CHECK_MODULE_PTR(eru));
  XMC_ASSERT("XMC_ERU_OGU_SetServiceRequestMode:Invalid Channel Number", (channel < 4U));
  XMC_ASSERT("XMC_ERU_OGU_SetServiceRequestMode:Invalid Service Request Mode", XMC_ERU_OGU_CHECK_SERIVCE_REQUEST(mode));

  eru->EXOCON_b[channel].GP = (uint8_t)mode;
 8001888:	78fa      	ldrb	r2, [r7, #3]
 800188a:	78bb      	ldrb	r3, [r7, #2]
 800188c:	f003 0303 	and.w	r3, r3, #3
 8001890:	b2d9      	uxtb	r1, r3
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	3208      	adds	r2, #8
 8001896:	f001 0103 	and.w	r1, r1, #3
 800189a:	0109      	lsls	r1, r1, #4
 800189c:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80018a0:	f020 0030 	bic.w	r0, r0, #48	; 0x30
 80018a4:	4301      	orrs	r1, r0
 80018a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

}
 80018aa:	370c      	adds	r7, #12
 80018ac:	46bd      	mov	sp, r7
 80018ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b2:	4770      	bx	lr

080018b4 <XMC_GPIO_SetMode>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_GPIO_SetMode(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_MODE_t mode)
{
 80018b4:	b480      	push	{r7}
 80018b6:	b083      	sub	sp, #12
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
 80018bc:	460b      	mov	r3, r1
 80018be:	70fb      	strb	r3, [r7, #3]
 80018c0:	4613      	mov	r3, r2
 80018c2:	70bb      	strb	r3, [r7, #2]
  XMC_ASSERT("XMC_GPIO_SetMode: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_SetMode: Invalid mode", XMC_GPIO_IsModeValid(mode));

  port->IOCR[(uint32_t)pin >> 2U] &= ~(uint32_t)((uint32_t)PORT_IOCR_PC_Msk << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U)));
 80018c4:	78fb      	ldrb	r3, [r7, #3]
 80018c6:	089b      	lsrs	r3, r3, #2
 80018c8:	b2db      	uxtb	r3, r3
 80018ca:	4618      	mov	r0, r3
 80018cc:	78fb      	ldrb	r3, [r7, #3]
 80018ce:	089b      	lsrs	r3, r3, #2
 80018d0:	b2db      	uxtb	r3, r3
 80018d2:	461a      	mov	r2, r3
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	3204      	adds	r2, #4
 80018d8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80018dc:	78fb      	ldrb	r3, [r7, #3]
 80018de:	f003 0303 	and.w	r3, r3, #3
 80018e2:	00db      	lsls	r3, r3, #3
 80018e4:	4619      	mov	r1, r3
 80018e6:	23f8      	movs	r3, #248	; 0xf8
 80018e8:	408b      	lsls	r3, r1
 80018ea:	43db      	mvns	r3, r3
 80018ec:	ea02 0103 	and.w	r1, r2, r3
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	1d02      	adds	r2, r0, #4
 80018f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  port->IOCR[(uint32_t)pin >> 2U] |= (uint32_t)mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
 80018f8:	78fb      	ldrb	r3, [r7, #3]
 80018fa:	089b      	lsrs	r3, r3, #2
 80018fc:	b2db      	uxtb	r3, r3
 80018fe:	4618      	mov	r0, r3
 8001900:	78fb      	ldrb	r3, [r7, #3]
 8001902:	089b      	lsrs	r3, r3, #2
 8001904:	b2db      	uxtb	r3, r3
 8001906:	461a      	mov	r2, r3
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	3204      	adds	r2, #4
 800190c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001910:	78bb      	ldrb	r3, [r7, #2]
 8001912:	78f9      	ldrb	r1, [r7, #3]
 8001914:	f001 0103 	and.w	r1, r1, #3
 8001918:	00c9      	lsls	r1, r1, #3
 800191a:	408b      	lsls	r3, r1
 800191c:	ea42 0103 	orr.w	r1, r2, r3
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	1d02      	adds	r2, r0, #4
 8001924:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8001928:	370c      	adds	r7, #12
 800192a:	46bd      	mov	sp, r7
 800192c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001930:	4770      	bx	lr
 8001932:	bf00      	nop

08001934 <XMC_GPIO_SetHardwareControl>:

void XMC_GPIO_SetHardwareControl(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_HWCTRL_t hwctrl)
{
 8001934:	b480      	push	{r7}
 8001936:	b083      	sub	sp, #12
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
 800193c:	460b      	mov	r3, r1
 800193e:	70fb      	strb	r3, [r7, #3]
 8001940:	4613      	mov	r3, r2
 8001942:	70bb      	strb	r3, [r7, #2]
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid hwctrl", XMC_GPIO_CHECK_HWCTRL(hwctrl));

  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8001948:	78fb      	ldrb	r3, [r7, #3]
 800194a:	005b      	lsls	r3, r3, #1
 800194c:	4619      	mov	r1, r3
 800194e:	2303      	movs	r3, #3
 8001950:	408b      	lsls	r3, r1
 8001952:	43db      	mvns	r3, r3
 8001954:	401a      	ands	r2, r3
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	675a      	str	r2, [r3, #116]	; 0x74
  port->HWSEL |= (uint32_t)hwctrl << ((uint32_t)pin << 1U);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800195e:	78bb      	ldrb	r3, [r7, #2]
 8001960:	78f9      	ldrb	r1, [r7, #3]
 8001962:	0049      	lsls	r1, r1, #1
 8001964:	408b      	lsls	r3, r1
 8001966:	431a      	orrs	r2, r3
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	675a      	str	r2, [r3, #116]	; 0x74
}
 800196c:	370c      	adds	r7, #12
 800196e:	46bd      	mov	sp, r7
 8001970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001974:	4770      	bx	lr
 8001976:	bf00      	nop

08001978 <XMC_USIC_CH_GetTransmitBufferStatus>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetDataOutputMode() \n\n\n
 */
__STATIC_INLINE XMC_USIC_CH_TBUF_STATUS_t XMC_USIC_CH_GetTransmitBufferStatus(XMC_USIC_CH_t *const channel)
{
 8001978:	b480      	push	{r7}
 800197a:	b083      	sub	sp, #12
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  return (XMC_USIC_CH_TBUF_STATUS_t)(channel->TCSR & USIC_CH_TCSR_TDV_Msk);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001984:	b2db      	uxtb	r3, r3
 8001986:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800198a:	b2db      	uxtb	r3, r3
}
 800198c:	4618      	mov	r0, r3
 800198e:	370c      	adds	r7, #12
 8001990:	46bd      	mov	sp, r7
 8001992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001996:	4770      	bx	lr

08001998 <XMC_I2C_CH_ClearStatusFlag>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_I2C_CH_GetStatusFlag()\n\n
 */
__STATIC_INLINE void XMC_I2C_CH_ClearStatusFlag(XMC_USIC_CH_t *const channel, uint32_t flag)
{
 8001998:	b480      	push	{r7}
 800199a:	b083      	sub	sp, #12
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
 80019a0:	6039      	str	r1, [r7, #0]
  channel->PSCR |= flag;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	431a      	orrs	r2, r3
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	64da      	str	r2, [r3, #76]	; 0x4c
}
 80019ae:	370c      	adds	r7, #12
 80019b0:	46bd      	mov	sp, r7
 80019b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b6:	4770      	bx	lr

080019b8 <XMC_I2C_CH_InitEx>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 *********************************************************************************************************************/
/* Initializes the USIC channel by setting the data format, slave address, baudrate, transfer buffer */
void XMC_I2C_CH_InitEx(XMC_USIC_CH_t *const channel, const XMC_I2C_CH_CONFIG_t *const config, bool init_brg)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b084      	sub	sp, #16
 80019bc:	af00      	add	r7, sp, #0
 80019be:	60f8      	str	r0, [r7, #12]
 80019c0:	60b9      	str	r1, [r7, #8]
 80019c2:	4613      	mov	r3, r2
 80019c4:	71fb      	strb	r3, [r7, #7]
  XMC_USIC_CH_Enable(channel);
 80019c6:	68f8      	ldr	r0, [r7, #12]
 80019c8:	f000 fa80 	bl	8001ecc <XMC_USIC_CH_Enable>

  /* Data format configuration */
  channel->SCTR = ((uint32_t)TRANSMISSION_MODE << (uint32_t)USIC_CH_SCTR_TRM_Pos) | /* Transmision mode */
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	4a11      	ldr	r2, [pc, #68]	; (8001a14 <XMC_I2C_CH_InitEx+0x5c>)
 80019d0:	635a      	str	r2, [r3, #52]	; 0x34
                  ((uint32_t)WORDLENGTH << (uint32_t)USIC_CH_SCTR_WLE_Pos) | /* 8 data bits */
                  USIC_CH_SCTR_FLE_Msk |           /* unlimited data flow */
                  USIC_CH_SCTR_SDIR_Msk |          /* MSB shifted first */
                  USIC_CH_SCTR_PDL_Msk;            /* Passive Data Level */

  XMC_I2C_CH_SetSlaveAddress(channel, config->address);
 80019d2:	68bb      	ldr	r3, [r7, #8]
 80019d4:	88db      	ldrh	r3, [r3, #6]
 80019d6:	68f8      	ldr	r0, [r7, #12]
 80019d8:	4619      	mov	r1, r3
 80019da:	f000 f81d 	bl	8001a18 <XMC_I2C_CH_SetSlaveAddress>

  if (init_brg)
 80019de:	79fb      	ldrb	r3, [r7, #7]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d008      	beq.n	80019f6 <XMC_I2C_CH_InitEx+0x3e>
  {
    (void)XMC_I2C_CH_SetBaudrateEx(channel, config->baudrate, config->normal_divider_mode);
 80019e4:	68bb      	ldr	r3, [r7, #8]
 80019e6:	681a      	ldr	r2, [r3, #0]
 80019e8:	68bb      	ldr	r3, [r7, #8]
 80019ea:	791b      	ldrb	r3, [r3, #4]
 80019ec:	68f8      	ldr	r0, [r7, #12]
 80019ee:	4611      	mov	r1, r2
 80019f0:	461a      	mov	r2, r3
 80019f2:	f000 f83b 	bl	8001a6c <XMC_I2C_CH_SetBaudrateEx>
  }


  /* Enable transfer buffer */
  channel->TCSR = ((uint32_t)SET_TDV << (uint32_t)USIC_CH_TCSR_TDEN_Pos) | USIC_CH_TCSR_TDSSM_Msk;
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 80019fc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Clear status flags */
  channel->PSCR = 0xFFFFFFFFU;
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	f04f 32ff 	mov.w	r2, #4294967295
 8001a04:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Disable parity generation */
  channel->CCR = 0x0U;
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	2200      	movs	r2, #0
 8001a0a:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001a0c:	3710      	adds	r7, #16
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	bf00      	nop
 8001a14:	073f0303 	.word	0x073f0303

08001a18 <XMC_I2C_CH_SetSlaveAddress>:

/* Sets the slave address */
void XMC_I2C_CH_SetSlaveAddress(XMC_USIC_CH_t *const channel, const uint16_t address)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	b083      	sub	sp, #12
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
 8001a20:	460b      	mov	r3, r1
 8001a22:	807b      	strh	r3, [r7, #2]
  if ((address & XMC_I2C_10BIT_ADDR_MASK) == XMC_I2C_10BIT_ADDR_GROUP)
 8001a24:	887b      	ldrh	r3, [r7, #2]
 8001a26:	f403 43f8 	and.w	r3, r3, #31744	; 0x7c00
 8001a2a:	f5b3 4ff0 	cmp.w	r3, #30720	; 0x7800
 8001a2e:	d10e      	bne.n	8001a4e <XMC_I2C_CH_SetSlaveAddress+0x36>
  {
    channel->PCR_IICMode = (channel->PCR_IICMode & (uint32_t)~USIC_CH_PCR_IICMode_SLAD_Msk) |
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a34:	0c1b      	lsrs	r3, r3, #16
 8001a36:	041b      	lsls	r3, r3, #16
 8001a38:	887a      	ldrh	r2, [r7, #2]
 8001a3a:	b2d2      	uxtb	r2, r2
 8001a3c:	431a      	orrs	r2, r3
                           (address & 0x00ffU) | ((address << 1) & 0xfe00U);
 8001a3e:	887b      	ldrh	r3, [r7, #2]
 8001a40:	005b      	lsls	r3, r3, #1
 8001a42:	f403 437e 	and.w	r3, r3, #65024	; 0xfe00
 8001a46:	431a      	orrs	r2, r3
/* Sets the slave address */
void XMC_I2C_CH_SetSlaveAddress(XMC_USIC_CH_t *const channel, const uint16_t address)
{
  if ((address & XMC_I2C_10BIT_ADDR_MASK) == XMC_I2C_10BIT_ADDR_GROUP)
  {
    channel->PCR_IICMode = (channel->PCR_IICMode & (uint32_t)~USIC_CH_PCR_IICMode_SLAD_Msk) |
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	63da      	str	r2, [r3, #60]	; 0x3c
 8001a4c:	e008      	b.n	8001a60 <XMC_I2C_CH_SetSlaveAddress+0x48>
                           (address & 0x00ffU) | ((address << 1) & 0xfe00U);
  }
  else
  {
    channel->PCR_IICMode = (channel->PCR_IICMode & (uint32_t)~USIC_CH_PCR_IICMode_SLAD_Msk) |
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a52:	0c1b      	lsrs	r3, r3, #16
 8001a54:	041b      	lsls	r3, r3, #16
                           ((uint32_t)address) << XMC_I2C_7BIT_ADDR_Pos;
 8001a56:	887a      	ldrh	r2, [r7, #2]
 8001a58:	0212      	lsls	r2, r2, #8
    channel->PCR_IICMode = (channel->PCR_IICMode & (uint32_t)~USIC_CH_PCR_IICMode_SLAD_Msk) |
                           (address & 0x00ffU) | ((address << 1) & 0xfe00U);
  }
  else
  {
    channel->PCR_IICMode = (channel->PCR_IICMode & (uint32_t)~USIC_CH_PCR_IICMode_SLAD_Msk) |
 8001a5a:	431a      	orrs	r2, r3
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	63da      	str	r2, [r3, #60]	; 0x3c
                           ((uint32_t)address) << XMC_I2C_7BIT_ADDR_Pos;
  }
}
 8001a60:	370c      	adds	r7, #12
 8001a62:	46bd      	mov	sp, r7
 8001a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a68:	4770      	bx	lr
 8001a6a:	bf00      	nop

08001a6c <XMC_I2C_CH_SetBaudrateEx>:
  return status;
}

/* Sets the baudrate and oversampling based on standard speed or fast speed */
XMC_I2C_CH_STATUS_t XMC_I2C_CH_SetBaudrateEx(XMC_USIC_CH_t *const channel, uint32_t rate, bool normal_divider_mode)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b086      	sub	sp, #24
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	60f8      	str	r0, [r7, #12]
 8001a74:	60b9      	str	r1, [r7, #8]
 8001a76:	4613      	mov	r3, r2
 8001a78:	71fb      	strb	r3, [r7, #7]
  XMC_USIC_CH_STATUS_t status;

  if (rate <= (uint32_t)XMC_I2C_CH_MAX_SPEED_STANDARD)
 8001a7a:	68bb      	ldr	r3, [r7, #8]
 8001a7c:	4a20      	ldr	r2, [pc, #128]	; (8001b00 <XMC_I2C_CH_SetBaudrateEx+0x94>)
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d819      	bhi.n	8001ab6 <XMC_I2C_CH_SetBaudrateEx+0x4a>
  {
    channel->PCR_IICMode &= (uint32_t)~USIC_CH_PCR_IICMode_STIM_Msk;
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a86:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	63da      	str	r2, [r3, #60]	; 0x3c
    if (normal_divider_mode)
 8001a8e:	79fb      	ldrb	r3, [r7, #7]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d008      	beq.n	8001aa6 <XMC_I2C_CH_SetBaudrateEx+0x3a>
    {
      status = XMC_USIC_CH_SetBaudrateEx(channel, rate, (uint32_t)XMC_I2C_CH_CLOCK_OVERSAMPLING_STANDARD);
 8001a94:	68bb      	ldr	r3, [r7, #8]
 8001a96:	68f8      	ldr	r0, [r7, #12]
 8001a98:	4619      	mov	r1, r3
 8001a9a:	220a      	movs	r2, #10
 8001a9c:	f000 fac2 	bl	8002024 <XMC_USIC_CH_SetBaudrateEx>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	75fb      	strb	r3, [r7, #23]
 8001aa4:	e027      	b.n	8001af6 <XMC_I2C_CH_SetBaudrateEx+0x8a>
    }
    else
    {
      /* Fractional divider mode */
      status = XMC_USIC_CH_SetBaudrate(channel, rate, (uint32_t)XMC_I2C_CH_CLOCK_OVERSAMPLING_STANDARD);
 8001aa6:	68f8      	ldr	r0, [r7, #12]
 8001aa8:	68b9      	ldr	r1, [r7, #8]
 8001aaa:	220a      	movs	r2, #10
 8001aac:	f000 fa48 	bl	8001f40 <XMC_USIC_CH_SetBaudrate>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	75fb      	strb	r3, [r7, #23]
 8001ab4:	e01f      	b.n	8001af6 <XMC_I2C_CH_SetBaudrateEx+0x8a>
    }
  }
  else if (rate <= (uint32_t)XMC_I2C_CH_MAX_SPEED_FAST)
 8001ab6:	68bb      	ldr	r3, [r7, #8]
 8001ab8:	4a12      	ldr	r2, [pc, #72]	; (8001b04 <XMC_I2C_CH_SetBaudrateEx+0x98>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d819      	bhi.n	8001af2 <XMC_I2C_CH_SetBaudrateEx+0x86>
  {
    channel->PCR_IICMode |= (uint32_t)USIC_CH_PCR_IICMode_STIM_Msk;
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ac2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	63da      	str	r2, [r3, #60]	; 0x3c
    if (normal_divider_mode)
 8001aca:	79fb      	ldrb	r3, [r7, #7]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d008      	beq.n	8001ae2 <XMC_I2C_CH_SetBaudrateEx+0x76>
    {
      status = XMC_USIC_CH_SetBaudrateEx(channel, rate, (uint32_t)XMC_I2C_CH_CLOCK_OVERSAMPLING_FAST);
 8001ad0:	68bb      	ldr	r3, [r7, #8]
 8001ad2:	68f8      	ldr	r0, [r7, #12]
 8001ad4:	4619      	mov	r1, r3
 8001ad6:	2219      	movs	r2, #25
 8001ad8:	f000 faa4 	bl	8002024 <XMC_USIC_CH_SetBaudrateEx>
 8001adc:	4603      	mov	r3, r0
 8001ade:	75fb      	strb	r3, [r7, #23]
 8001ae0:	e009      	b.n	8001af6 <XMC_I2C_CH_SetBaudrateEx+0x8a>
    }
    else
    {
      /* Fractional divider mode */
      status = XMC_USIC_CH_SetBaudrate(channel, rate, (uint32_t)XMC_I2C_CH_CLOCK_OVERSAMPLING_FAST);
 8001ae2:	68f8      	ldr	r0, [r7, #12]
 8001ae4:	68b9      	ldr	r1, [r7, #8]
 8001ae6:	2219      	movs	r2, #25
 8001ae8:	f000 fa2a 	bl	8001f40 <XMC_USIC_CH_SetBaudrate>
 8001aec:	4603      	mov	r3, r0
 8001aee:	75fb      	strb	r3, [r7, #23]
 8001af0:	e001      	b.n	8001af6 <XMC_I2C_CH_SetBaudrateEx+0x8a>
    }
  }
  else
  {
    status = XMC_USIC_CH_STATUS_ERROR;
 8001af2:	2301      	movs	r3, #1
 8001af4:	75fb      	strb	r3, [r7, #23]
  }

  return (XMC_I2C_CH_STATUS_t)status;
 8001af6:	7dfb      	ldrb	r3, [r7, #23]
}
 8001af8:	4618      	mov	r0, r3
 8001afa:	3718      	adds	r7, #24
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bd80      	pop	{r7, pc}
 8001b00:	000186a0 	.word	0x000186a0
 8001b04:	00061a80 	.word	0x00061a80

08001b08 <XMC_I2C_CH_MasterStart>:

/* Sends master start condition along with read/write command to IN/TBUF register based on FIFO/non-FIFO modes. */
void XMC_I2C_CH_MasterStart(XMC_USIC_CH_t *const channel, const uint16_t addr, const XMC_I2C_CH_CMD_t command)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b084      	sub	sp, #16
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
 8001b10:	460b      	mov	r3, r1
 8001b12:	807b      	strh	r3, [r7, #2]
 8001b14:	4613      	mov	r3, r2
 8001b16:	707b      	strb	r3, [r7, #1]
  uint32_t temp;

  temp = addr | (uint32_t)XMC_I2C_CH_TDF_MASTER_START;
 8001b18:	887b      	ldrh	r3, [r7, #2]
 8001b1a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b1e:	b29b      	uxth	r3, r3
 8001b20:	60fb      	str	r3, [r7, #12]
  if (command == XMC_I2C_CH_CMD_READ)
 8001b22:	787b      	ldrb	r3, [r7, #1]
 8001b24:	2b01      	cmp	r3, #1
 8001b26:	d103      	bne.n	8001b30 <XMC_I2C_CH_MasterStart+0x28>
  {
    temp |= 0x1U;
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	f043 0301 	orr.w	r3, r3, #1
 8001b2e:	60fb      	str	r3, [r7, #12]
  }

  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001b36:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d110      	bne.n	8001b60 <XMC_I2C_CH_MasterStart+0x58>
  {
    while (XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 8001b3e:	bf00      	nop
 8001b40:	6878      	ldr	r0, [r7, #4]
 8001b42:	f7ff ff19 	bl	8001978 <XMC_USIC_CH_GetTransmitBufferStatus>
 8001b46:	4603      	mov	r3, r0
 8001b48:	2b80      	cmp	r3, #128	; 0x80
 8001b4a:	d0f9      	beq.n	8001b40 <XMC_I2C_CH_MasterStart+0x38>
    {
      /* check TDV, wait until TBUF is ready */
    }

    /* clear PSR_TBIF */
    XMC_I2C_CH_ClearStatusFlag(channel, (uint32_t)XMC_I2C_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
 8001b4c:	6878      	ldr	r0, [r7, #4]
 8001b4e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b52:	f7ff ff21 	bl	8001998 <XMC_I2C_CH_ClearStatusFlag>

    channel->TBUF[0] = temp;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	68fa      	ldr	r2, [r7, #12]
 8001b5a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8001b5e:	e003      	b.n	8001b68 <XMC_I2C_CH_MasterStart+0x60>
  }
  else
  {
    channel->IN[0U] = temp;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	68fa      	ldr	r2, [r7, #12]
 8001b64:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  }
}
 8001b68:	3710      	adds	r7, #16
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	bf00      	nop

08001b70 <XMC_I2C_CH_MasterRepeatedStart>:
/* Sends master repeated start condition along with read/write command to IN/TBUF register based on FIFO/non-FIFO modes. */
void XMC_I2C_CH_MasterRepeatedStart(XMC_USIC_CH_t *const channel, const uint16_t addr, const XMC_I2C_CH_CMD_t command)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b084      	sub	sp, #16
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
 8001b78:	460b      	mov	r3, r1
 8001b7a:	807b      	strh	r3, [r7, #2]
 8001b7c:	4613      	mov	r3, r2
 8001b7e:	707b      	strb	r3, [r7, #1]
  uint32_t tmp;
  tmp = addr | (uint32_t)XMC_I2C_CH_TDF_MASTER_RESTART;
 8001b80:	887b      	ldrh	r3, [r7, #2]
 8001b82:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
 8001b86:	b29b      	uxth	r3, r3
 8001b88:	60fb      	str	r3, [r7, #12]
  if (command == XMC_I2C_CH_CMD_READ)
 8001b8a:	787b      	ldrb	r3, [r7, #1]
 8001b8c:	2b01      	cmp	r3, #1
 8001b8e:	d103      	bne.n	8001b98 <XMC_I2C_CH_MasterRepeatedStart+0x28>
  {
    tmp |= 0x1U;
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	f043 0301 	orr.w	r3, r3, #1
 8001b96:	60fb      	str	r3, [r7, #12]
  }

  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001b9e:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d110      	bne.n	8001bc8 <XMC_I2C_CH_MasterRepeatedStart+0x58>
  {
    while (XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 8001ba6:	bf00      	nop
 8001ba8:	6878      	ldr	r0, [r7, #4]
 8001baa:	f7ff fee5 	bl	8001978 <XMC_USIC_CH_GetTransmitBufferStatus>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	2b80      	cmp	r3, #128	; 0x80
 8001bb2:	d0f9      	beq.n	8001ba8 <XMC_I2C_CH_MasterRepeatedStart+0x38>
    {
      /* check TDV, wait until TBUF is ready */
    }

    /* clear PSR_TBIF */
    XMC_I2C_CH_ClearStatusFlag(channel, (uint32_t)XMC_I2C_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
 8001bb4:	6878      	ldr	r0, [r7, #4]
 8001bb6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001bba:	f7ff feed 	bl	8001998 <XMC_I2C_CH_ClearStatusFlag>

    channel->TBUF[0] = tmp;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	68fa      	ldr	r2, [r7, #12]
 8001bc2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8001bc6:	e003      	b.n	8001bd0 <XMC_I2C_CH_MasterRepeatedStart+0x60>
  }
  else
  {
    channel->IN[0U] = tmp;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	68fa      	ldr	r2, [r7, #12]
 8001bcc:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  }
}
 8001bd0:	3710      	adds	r7, #16
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	bf00      	nop

08001bd8 <XMC_I2C_CH_MasterStop>:

/* Sends master stop command to IN/TBUF register based on FIFO/non-FIFO modes. */
void XMC_I2C_CH_MasterStop(XMC_USIC_CH_t *const channel)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b082      	sub	sp, #8
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001be6:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d111      	bne.n	8001c12 <XMC_I2C_CH_MasterStop+0x3a>
  {
    while (XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 8001bee:	bf00      	nop
 8001bf0:	6878      	ldr	r0, [r7, #4]
 8001bf2:	f7ff fec1 	bl	8001978 <XMC_USIC_CH_GetTransmitBufferStatus>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	2b80      	cmp	r3, #128	; 0x80
 8001bfa:	d0f9      	beq.n	8001bf0 <XMC_I2C_CH_MasterStop+0x18>
    {
      /* check TDV, wait until TBUF is ready */
    }

    /* clear PSR_TBIF */
    XMC_I2C_CH_ClearStatusFlag(channel, (uint32_t)XMC_I2C_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
 8001bfc:	6878      	ldr	r0, [r7, #4]
 8001bfe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c02:	f7ff fec9 	bl	8001998 <XMC_I2C_CH_ClearStatusFlag>

    channel->TBUF[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_STOP;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8001c0c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8001c10:	e004      	b.n	8001c1c <XMC_I2C_CH_MasterStop+0x44>
  }
  else
  {
    channel->IN[0U] = (uint32_t)XMC_I2C_CH_TDF_MASTER_STOP;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8001c18:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  }
}
 8001c1c:	3708      	adds	r7, #8
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	bf00      	nop

08001c24 <XMC_I2C_CH_MasterTransmit>:

/* Sends master send command along with data to IN/TBUF register based on FIFO/non-FIFO modes. */
void XMC_I2C_CH_MasterTransmit(XMC_USIC_CH_t *const channel, const uint8_t data)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b082      	sub	sp, #8
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
 8001c2c:	460b      	mov	r3, r1
 8001c2e:	70fb      	strb	r3, [r7, #3]
  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001c36:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d110      	bne.n	8001c60 <XMC_I2C_CH_MasterTransmit+0x3c>
  {
    while (XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 8001c3e:	bf00      	nop
 8001c40:	6878      	ldr	r0, [r7, #4]
 8001c42:	f7ff fe99 	bl	8001978 <XMC_USIC_CH_GetTransmitBufferStatus>
 8001c46:	4603      	mov	r3, r0
 8001c48:	2b80      	cmp	r3, #128	; 0x80
 8001c4a:	d0f9      	beq.n	8001c40 <XMC_I2C_CH_MasterTransmit+0x1c>
    {
      /* check TDV, wait until TBUF is ready */
    }

    /* clear PSR_TBIF */
    XMC_I2C_CH_ClearStatusFlag(channel, (uint32_t)XMC_I2C_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
 8001c4c:	6878      	ldr	r0, [r7, #4]
 8001c4e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c52:	f7ff fea1 	bl	8001998 <XMC_I2C_CH_ClearStatusFlag>

    channel->TBUF[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_SEND | data;
 8001c56:	78fa      	ldrb	r2, [r7, #3]
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8001c5e:	e003      	b.n	8001c68 <XMC_I2C_CH_MasterTransmit+0x44>
  }
  else
  {
    channel->IN[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_SEND | data;
 8001c60:	78fa      	ldrb	r2, [r7, #3]
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  }
}
 8001c68:	3708      	adds	r7, #8
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop

08001c70 <XMC_I2C_CH_MasterReceiveAck>:
  }
}

/* Sends master receive ack command to IN/TBUF register based on FIFO/non-FIFO modes. */
void XMC_I2C_CH_MasterReceiveAck(XMC_USIC_CH_t *const channel)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b082      	sub	sp, #8
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001c7e:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d111      	bne.n	8001caa <XMC_I2C_CH_MasterReceiveAck+0x3a>
  {
    while (XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 8001c86:	bf00      	nop
 8001c88:	6878      	ldr	r0, [r7, #4]
 8001c8a:	f7ff fe75 	bl	8001978 <XMC_USIC_CH_GetTransmitBufferStatus>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	2b80      	cmp	r3, #128	; 0x80
 8001c92:	d0f9      	beq.n	8001c88 <XMC_I2C_CH_MasterReceiveAck+0x18>
    {
      /* check TDV, wait until TBUF is ready */
    }

    /* clear PSR_TBIF */
    XMC_I2C_CH_ClearStatusFlag(channel, (uint32_t)XMC_I2C_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
 8001c94:	6878      	ldr	r0, [r7, #4]
 8001c96:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c9a:	f7ff fe7d 	bl	8001998 <XMC_I2C_CH_ClearStatusFlag>

    channel->TBUF[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_RECEIVE_ACK;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ca4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8001ca8:	e004      	b.n	8001cb4 <XMC_I2C_CH_MasterReceiveAck+0x44>
  }
  else
  {
    channel->IN[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_RECEIVE_ACK;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001cb0:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  }
}
 8001cb4:	3708      	adds	r7, #8
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}
 8001cba:	bf00      	nop

08001cbc <XMC_I2C_CH_MasterReceiveNack>:

/* Sends master receive nack command to IN/TBUF register based on FIFO/non-FIFO modes. */
void XMC_I2C_CH_MasterReceiveNack(XMC_USIC_CH_t *const channel)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b082      	sub	sp, #8
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001cca:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d111      	bne.n	8001cf6 <XMC_I2C_CH_MasterReceiveNack+0x3a>
  {
    while (XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 8001cd2:	bf00      	nop
 8001cd4:	6878      	ldr	r0, [r7, #4]
 8001cd6:	f7ff fe4f 	bl	8001978 <XMC_USIC_CH_GetTransmitBufferStatus>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	2b80      	cmp	r3, #128	; 0x80
 8001cde:	d0f9      	beq.n	8001cd4 <XMC_I2C_CH_MasterReceiveNack+0x18>
    {
      /* check TDV, wait until TBUF is ready */
    }

    /* clear PSR_TBIF */
    XMC_I2C_CH_ClearStatusFlag(channel, (uint32_t)XMC_I2C_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
 8001ce0:	6878      	ldr	r0, [r7, #4]
 8001ce2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001ce6:	f7ff fe57 	bl	8001998 <XMC_I2C_CH_ClearStatusFlag>

    channel->TBUF[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_RECEIVE_NACK;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001cf0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8001cf4:	e004      	b.n	8001d00 <XMC_I2C_CH_MasterReceiveNack+0x44>
  }
  else
  {
    channel->IN[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_RECEIVE_NACK;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001cfc:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  }
}
 8001d00:	3708      	adds	r7, #8
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	bf00      	nop

08001d08 <XMC_I2C_CH_GetReceivedData>:

/* Reads the data from RBUF if FIFO size is 0 otherwise from OUTR. */
uint8_t XMC_I2C_CH_GetReceivedData(const XMC_USIC_CH_t *const channel)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b085      	sub	sp, #20
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  uint8_t retval;

  /* Check FIFO size */
  if ((channel->RBCTR & USIC_CH_RBCTR_SIZE_Msk) == 0U)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8001d16:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d103      	bne.n	8001d26 <XMC_I2C_CH_GetReceivedData+0x1e>
  {
    retval = (uint8_t)channel->RBUF;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d22:	73fb      	strb	r3, [r7, #15]
 8001d24:	e003      	b.n	8001d2e <XMC_I2C_CH_GetReceivedData+0x26>
  }
  else
  {
    retval = (uint8_t)channel->OUTR;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8001d2c:	73fb      	strb	r3, [r7, #15]
  }

  return retval;
 8001d2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d30:	4618      	mov	r0, r3
 8001d32:	3714      	adds	r7, #20
 8001d34:	46bd      	mov	sp, r7
 8001d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3a:	4770      	bx	lr

08001d3c <XMC_USIC_CH_GetTransmitBufferStatus>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetDataOutputMode() \n\n\n
 */
__STATIC_INLINE XMC_USIC_CH_TBUF_STATUS_t XMC_USIC_CH_GetTransmitBufferStatus(XMC_USIC_CH_t *const channel)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b083      	sub	sp, #12
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  return (XMC_USIC_CH_TBUF_STATUS_t)(channel->TCSR & USIC_CH_TCSR_TDV_Msk);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d48:	b2db      	uxtb	r3, r3
 8001d4a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001d4e:	b2db      	uxtb	r3, r3
}
 8001d50:	4618      	mov	r0, r3
 8001d52:	370c      	adds	r7, #12
 8001d54:	46bd      	mov	sp, r7
 8001d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5a:	4770      	bx	lr

08001d5c <XMC_UART_CH_ClearStatusFlag>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_UART_CH_DisableEvent(),  XMC_UART_CH_GetStatusFlag()\n\n\n
 */
__STATIC_INLINE void XMC_UART_CH_ClearStatusFlag(XMC_USIC_CH_t *const channel, const uint32_t flag)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	b083      	sub	sp, #12
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
 8001d64:	6039      	str	r1, [r7, #0]
  channel->PSCR = flag;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	683a      	ldr	r2, [r7, #0]
 8001d6a:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8001d6c:	370c      	adds	r7, #12
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d74:	4770      	bx	lr
 8001d76:	bf00      	nop

08001d78 <XMC_UART_CH_InitEx>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 *********************************************************************************************************************/

void XMC_UART_CH_InitEx(XMC_USIC_CH_t *channel, const XMC_UART_CH_CONFIG_t *const config, bool init_brg)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b086      	sub	sp, #24
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	60f8      	str	r0, [r7, #12]
 8001d80:	60b9      	str	r1, [r7, #8]
 8001d82:	4613      	mov	r3, r2
 8001d84:	71fb      	strb	r3, [r7, #7]
  uint32_t oversampling = XMC_UART_CH_OVERSAMPLING;
 8001d86:	2310      	movs	r3, #16
 8001d88:	617b      	str	r3, [r7, #20]

  /* USIC channel switched on*/
  XMC_USIC_CH_Enable(channel);
 8001d8a:	68f8      	ldr	r0, [r7, #12]
 8001d8c:	f000 f89e 	bl	8001ecc <XMC_USIC_CH_Enable>

  if (config->oversampling != 0U)
 8001d90:	68bb      	ldr	r3, [r7, #8]
 8001d92:	7a1b      	ldrb	r3, [r3, #8]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d002      	beq.n	8001d9e <XMC_UART_CH_InitEx+0x26>
  {
    oversampling = (uint32_t)config->oversampling;
 8001d98:	68bb      	ldr	r3, [r7, #8]
 8001d9a:	7a1b      	ldrb	r3, [r3, #8]
 8001d9c:	617b      	str	r3, [r7, #20]
  }

  if (init_brg)
 8001d9e:	79fb      	ldrb	r3, [r7, #7]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d014      	beq.n	8001dce <XMC_UART_CH_InitEx+0x56>
  {
    /* Configure baud rate */
    if (config->normal_divider_mode)
 8001da4:	68bb      	ldr	r3, [r7, #8]
 8001da6:	791b      	ldrb	r3, [r3, #4]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d009      	beq.n	8001dc0 <XMC_UART_CH_InitEx+0x48>
    {
      /* Normal divider mode */
      (void)XMC_USIC_CH_SetBaudrateEx(channel, config->baudrate, oversampling);
 8001dac:	68bb      	ldr	r3, [r7, #8]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	461a      	mov	r2, r3
 8001db2:	697b      	ldr	r3, [r7, #20]
 8001db4:	68f8      	ldr	r0, [r7, #12]
 8001db6:	4611      	mov	r1, r2
 8001db8:	461a      	mov	r2, r3
 8001dba:	f000 f933 	bl	8002024 <XMC_USIC_CH_SetBaudrateEx>
 8001dbe:	e006      	b.n	8001dce <XMC_UART_CH_InitEx+0x56>
    }
    else
    {
      /* Fractional divider mode */
      (void)XMC_USIC_CH_SetBaudrate(channel, config->baudrate, oversampling);
 8001dc0:	68bb      	ldr	r3, [r7, #8]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	68f8      	ldr	r0, [r7, #12]
 8001dc6:	4619      	mov	r1, r3
 8001dc8:	697a      	ldr	r2, [r7, #20]
 8001dca:	f000 f8b9 	bl	8001f40 <XMC_USIC_CH_SetBaudrate>
   * i.e. the 0 level is signaled during the complete bit time
   * Sampling point set equal to the half of the oversampling period
   * Enable Sample Majority Decision
   * Enable Transfer Status BUSY
   */
  channel->PCR_ASCMode = (uint32_t)(((config->stop_bits - 1UL) << USIC_CH_PCR_ASCMode_STPB_Pos) |
 8001dce:	68bb      	ldr	r3, [r7, #8]
 8001dd0:	79db      	ldrb	r3, [r3, #7]
 8001dd2:	3b01      	subs	r3, #1
 8001dd4:	005a      	lsls	r2, r3, #1
                                    (((oversampling >> 1UL) + 1UL) << USIC_CH_PCR_ASCMode_SP_Pos) |
 8001dd6:	697b      	ldr	r3, [r7, #20]
 8001dd8:	085b      	lsrs	r3, r3, #1
 8001dda:	3301      	adds	r3, #1
 8001ddc:	021b      	lsls	r3, r3, #8
   * i.e. the 0 level is signaled during the complete bit time
   * Sampling point set equal to the half of the oversampling period
   * Enable Sample Majority Decision
   * Enable Transfer Status BUSY
   */
  channel->PCR_ASCMode = (uint32_t)(((config->stop_bits - 1UL) << USIC_CH_PCR_ASCMode_STPB_Pos) |
 8001dde:	4313      	orrs	r3, r2
 8001de0:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 8001de4:	f043 0301 	orr.w	r3, r3, #1
 8001de8:	68fa      	ldr	r2, [r7, #12]
 8001dea:	63d3      	str	r3, [r2, #60]	; 0x3c
  /* Set passive data level, high
     Set word length. Data bits - 1
     If frame length is > 0, frame_lemgth-1; else, FLE = WLE (Data bits - 1)
     Transmission Mode: The shift control signal is considered active if it
     is at 1-level. This is the setting to be programmed to allow data transfers */
  channel->SCTR = (uint32_t)((((uint32_t)config->data_bits - 1UL) << USIC_CH_SCTR_WLE_Pos) |
 8001dec:	68bb      	ldr	r3, [r7, #8]
 8001dee:	795b      	ldrb	r3, [r3, #5]
 8001df0:	3b01      	subs	r3, #1
 8001df2:	061b      	lsls	r3, r3, #24
 8001df4:	f443 7281 	orr.w	r2, r3, #258	; 0x102
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	635a      	str	r2, [r3, #52]	; 0x34
                             ((0x1UL << USIC_CH_SCTR_TRM_Pos) | USIC_CH_SCTR_PDL_Msk));

  if (config->frame_length != 0U)
 8001dfc:	68bb      	ldr	r3, [r7, #8]
 8001dfe:	799b      	ldrb	r3, [r3, #6]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d009      	beq.n	8001e18 <XMC_UART_CH_InitEx+0xa0>
  {
    channel->SCTR |= (uint32_t)(((uint32_t)config->frame_length - 1UL) << USIC_CH_SCTR_FLE_Pos);
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e08:	68bb      	ldr	r3, [r7, #8]
 8001e0a:	799b      	ldrb	r3, [r3, #6]
 8001e0c:	3b01      	subs	r3, #1
 8001e0e:	041b      	lsls	r3, r3, #16
 8001e10:	431a      	orrs	r2, r3
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	635a      	str	r2, [r3, #52]	; 0x34
 8001e16:	e008      	b.n	8001e2a <XMC_UART_CH_InitEx+0xb2>
  }
  else
  {
    channel->SCTR |= (uint32_t)(((uint32_t)config->data_bits - 1UL) << USIC_CH_SCTR_FLE_Pos);
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e1c:	68bb      	ldr	r3, [r7, #8]
 8001e1e:	795b      	ldrb	r3, [r3, #5]
 8001e20:	3b01      	subs	r3, #1
 8001e22:	041b      	lsls	r3, r3, #16
 8001e24:	431a      	orrs	r2, r3
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Enable transfer buffer */
  channel->TCSR = (0x1UL << USIC_CH_TCSR_TDEN_Pos) |
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 8001e30:	639a      	str	r2, [r3, #56]	; 0x38
                  USIC_CH_TCSR_TDSSM_Msk;

  /* Clear protocol status */
  channel->PSCR = 0xFFFFFFFFUL;
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	f04f 32ff 	mov.w	r2, #4294967295
 8001e38:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set parity settings */
  channel->CCR = (uint32_t)config->parity_mode;
 8001e3a:	68bb      	ldr	r3, [r7, #8]
 8001e3c:	895b      	ldrh	r3, [r3, #10]
 8001e3e:	461a      	mov	r2, r3
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001e44:	3718      	adds	r7, #24
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}
 8001e4a:	bf00      	nop

08001e4c <XMC_UART_CH_Transmit>:

  return (XMC_UART_CH_STATUS_t)status;
}

void XMC_UART_CH_Transmit(XMC_USIC_CH_t *const channel, const uint16_t data)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b082      	sub	sp, #8
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
 8001e54:	460b      	mov	r3, r1
 8001e56:	807b      	strh	r3, [r7, #2]
  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0UL)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001e5e:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d110      	bne.n	8001e88 <XMC_UART_CH_Transmit+0x3c>
  {
    /* Wait till the Transmit Buffer is free for transmission */
    while (XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 8001e66:	bf00      	nop
 8001e68:	6878      	ldr	r0, [r7, #4]
 8001e6a:	f7ff ff67 	bl	8001d3c <XMC_USIC_CH_GetTransmitBufferStatus>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	2b80      	cmp	r3, #128	; 0x80
 8001e72:	d0f9      	beq.n	8001e68 <XMC_UART_CH_Transmit+0x1c>
    {
    }

    /* Clear the Transmit Buffer indication flag */
    XMC_UART_CH_ClearStatusFlag(channel, (uint32_t)XMC_UART_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
 8001e74:	6878      	ldr	r0, [r7, #4]
 8001e76:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001e7a:	f7ff ff6f 	bl	8001d5c <XMC_UART_CH_ClearStatusFlag>

    /*Transmit data */
    channel->TBUF[0U] = data;
 8001e7e:	887a      	ldrh	r2, [r7, #2]
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8001e86:	e003      	b.n	8001e90 <XMC_UART_CH_Transmit+0x44>
  }
  else
  {
    channel->IN[0U] = data;
 8001e88:	887a      	ldrh	r2, [r7, #2]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  }
}
 8001e90:	3708      	adds	r7, #8
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	bf00      	nop

08001e98 <XMC_UART_CH_GetReceivedData>:

uint16_t XMC_UART_CH_GetReceivedData(XMC_USIC_CH_t *const channel)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b085      	sub	sp, #20
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  uint16_t retval;

  /* Check FIFO size */
  if ((channel->RBCTR & USIC_CH_RBCTR_SIZE_Msk) == 0U)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8001ea6:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d103      	bne.n	8001eb6 <XMC_UART_CH_GetReceivedData+0x1e>
  {
    retval = (uint16_t)channel->RBUF;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001eb2:	81fb      	strh	r3, [r7, #14]
 8001eb4:	e003      	b.n	8001ebe <XMC_UART_CH_GetReceivedData+0x26>
  }
  else
  {
    retval = (uint16_t)channel->OUTR;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8001ebc:	81fb      	strh	r3, [r7, #14]
  }

  return retval;
 8001ebe:	89fb      	ldrh	r3, [r7, #14]
}
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	3714      	adds	r7, #20
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eca:	4770      	bx	lr

08001ecc <XMC_USIC_CH_Enable>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_USIC_CH_Enable(XMC_USIC_CH_t *const channel)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b082      	sub	sp, #8
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_USIC_CH_Enable: channel not valid", XMC_USIC_IsChannelValid(channel));

  if ((channel == XMC_USIC0_CH0) || (channel == XMC_USIC0_CH1))
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	4a14      	ldr	r2, [pc, #80]	; (8001f28 <XMC_USIC_CH_Enable+0x5c>)
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d003      	beq.n	8001ee4 <XMC_USIC_CH_Enable+0x18>
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	4a13      	ldr	r2, [pc, #76]	; (8001f2c <XMC_USIC_CH_Enable+0x60>)
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d103      	bne.n	8001eec <XMC_USIC_CH_Enable+0x20>
  {
    XMC_USIC_Enable(XMC_USIC0);
 8001ee4:	4812      	ldr	r0, [pc, #72]	; (8001f30 <XMC_USIC_CH_Enable+0x64>)
 8001ee6:	f000 f98b 	bl	8002200 <XMC_USIC_Enable>
 8001eea:	e00a      	b.n	8001f02 <XMC_USIC_CH_Enable+0x36>
  }
#if defined(USIC1)
  else if ((channel == XMC_USIC1_CH0) || (channel == XMC_USIC1_CH1))
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	4a11      	ldr	r2, [pc, #68]	; (8001f34 <XMC_USIC_CH_Enable+0x68>)
 8001ef0:	4293      	cmp	r3, r2
 8001ef2:	d003      	beq.n	8001efc <XMC_USIC_CH_Enable+0x30>
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	4a10      	ldr	r2, [pc, #64]	; (8001f38 <XMC_USIC_CH_Enable+0x6c>)
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	d102      	bne.n	8001f02 <XMC_USIC_CH_Enable+0x36>
  {
    XMC_USIC_Enable(XMC_USIC1);
 8001efc:	480f      	ldr	r0, [pc, #60]	; (8001f3c <XMC_USIC_CH_Enable+0x70>)
 8001efe:	f000 f97f 	bl	8002200 <XMC_USIC_Enable>
  {
    XMC_ASSERT("USIC module not available", 0U/*Always*/);
  }

  /* USIC channel switched on*/
  channel->KSCFG = (USIC_CH_KSCFG_MODEN_Msk | USIC_CH_KSCFG_BPMODEN_Msk);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2203      	movs	r2, #3
 8001f06:	60da      	str	r2, [r3, #12]
  while ((channel->KSCFG & USIC_CH_KSCFG_MODEN_Msk) == 0U)
 8001f08:	bf00      	nop
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	68db      	ldr	r3, [r3, #12]
 8001f0e:	f003 0301 	and.w	r3, r3, #1
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d0f9      	beq.n	8001f0a <XMC_USIC_CH_Enable+0x3e>
  {
    /* Wait till the channel is enabled */
  }

  /* Set USIC channel in IDLE mode */
  channel->CCR &= (uint32_t)~USIC_CH_CCR_MODE_Msk;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f1a:	f023 020f 	bic.w	r2, r3, #15
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001f22:	3708      	adds	r7, #8
 8001f24:	46bd      	mov	sp, r7
 8001f26:	bd80      	pop	{r7, pc}
 8001f28:	40030000 	.word	0x40030000
 8001f2c:	40030200 	.word	0x40030200
 8001f30:	40030008 	.word	0x40030008
 8001f34:	48020000 	.word	0x48020000
 8001f38:	48020200 	.word	0x48020200
 8001f3c:	48020008 	.word	0x48020008

08001f40 <XMC_USIC_CH_SetBaudrate>:
{
  channel->KSCFG = (uint32_t)((channel->KSCFG & (~USIC_CH_KSCFG_MODEN_Msk)) | USIC_CH_KSCFG_BPMODEN_Msk);
}

XMC_USIC_CH_STATUS_t XMC_USIC_CH_SetBaudrate(XMC_USIC_CH_t *const channel, uint32_t rate, uint32_t oversampling)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b08e      	sub	sp, #56	; 0x38
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	60f8      	str	r0, [r7, #12]
 8001f48:	60b9      	str	r1, [r7, #8]
 8001f4a:	607a      	str	r2, [r7, #4]

  uint32_t pdiv_frac;
  uint32_t pdiv_frac_min;

  /* The rate and peripheral clock are divided by 100 to be able to use only 32bit arithmetic */
  if ((rate >= 100U) && (oversampling != 0U))
 8001f4c:	68bb      	ldr	r3, [r7, #8]
 8001f4e:	2b63      	cmp	r3, #99	; 0x63
 8001f50:	d95a      	bls.n	8002008 <XMC_USIC_CH_SetBaudrate+0xc8>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d057      	beq.n	8002008 <XMC_USIC_CH_SetBaudrate+0xc8>
  {
    peripheral_clock = XMC_SCU_CLOCK_GetPeripheralClockFrequency() / 100U;
 8001f58:	f7fe fbe6 	bl	8000728 <XMC_SCU_CLOCK_GetPeripheralClockFrequency>
 8001f5c:	4602      	mov	r2, r0
 8001f5e:	4b2f      	ldr	r3, [pc, #188]	; (800201c <XMC_USIC_CH_SetBaudrate+0xdc>)
 8001f60:	fba3 2302 	umull	r2, r3, r3, r2
 8001f64:	095b      	lsrs	r3, r3, #5
 8001f66:	623b      	str	r3, [r7, #32]
    rate = rate / 100U;
 8001f68:	68bb      	ldr	r3, [r7, #8]
 8001f6a:	4a2c      	ldr	r2, [pc, #176]	; (800201c <XMC_USIC_CH_SetBaudrate+0xdc>)
 8001f6c:	fba2 2303 	umull	r2, r3, r2, r3
 8001f70:	095b      	lsrs	r3, r3, #5
 8001f72:	60bb      	str	r3, [r7, #8]

    clock_divider_min = 1024U;
 8001f74:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f78:	62fb      	str	r3, [r7, #44]	; 0x2c
    pdiv_int_min = 1U;
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	62bb      	str	r3, [r7, #40]	; 0x28
    pdiv_frac_min = 0x3ffU;
 8001f7e:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8001f82:	627b      	str	r3, [r7, #36]	; 0x24

    for (clock_divider = 1024U; clock_divider > 0U; --clock_divider)
 8001f84:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f88:	633b      	str	r3, [r7, #48]	; 0x30
 8001f8a:	e022      	b.n	8001fd2 <XMC_USIC_CH_SetBaudrate+0x92>
    {
      pdiv = ((peripheral_clock * clock_divider) / (rate * oversampling));
 8001f8c:	6a3b      	ldr	r3, [r7, #32]
 8001f8e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001f90:	fb02 f203 	mul.w	r2, r2, r3
 8001f94:	68bb      	ldr	r3, [r7, #8]
 8001f96:	6879      	ldr	r1, [r7, #4]
 8001f98:	fb01 f303 	mul.w	r3, r1, r3
 8001f9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fa0:	61fb      	str	r3, [r7, #28]
      pdiv_int = pdiv >> 10U;
 8001fa2:	69fb      	ldr	r3, [r7, #28]
 8001fa4:	0a9b      	lsrs	r3, r3, #10
 8001fa6:	61bb      	str	r3, [r7, #24]
      pdiv_frac = pdiv & 0x3ffU;
 8001fa8:	69fb      	ldr	r3, [r7, #28]
 8001faa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001fae:	617b      	str	r3, [r7, #20]

      if ((pdiv_int <= 1024U) && (pdiv_frac < pdiv_frac_min))
 8001fb0:	69bb      	ldr	r3, [r7, #24]
 8001fb2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001fb6:	d809      	bhi.n	8001fcc <XMC_USIC_CH_SetBaudrate+0x8c>
 8001fb8:	697a      	ldr	r2, [r7, #20]
 8001fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fbc:	429a      	cmp	r2, r3
 8001fbe:	d205      	bcs.n	8001fcc <XMC_USIC_CH_SetBaudrate+0x8c>
      {
        pdiv_frac_min = pdiv_frac;
 8001fc0:	697b      	ldr	r3, [r7, #20]
 8001fc2:	627b      	str	r3, [r7, #36]	; 0x24
        pdiv_int_min = pdiv_int;
 8001fc4:	69bb      	ldr	r3, [r7, #24]
 8001fc6:	62bb      	str	r3, [r7, #40]	; 0x28
        clock_divider_min = clock_divider;
 8001fc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fca:	62fb      	str	r3, [r7, #44]	; 0x2c

    clock_divider_min = 1024U;
    pdiv_int_min = 1U;
    pdiv_frac_min = 0x3ffU;

    for (clock_divider = 1024U; clock_divider > 0U; --clock_divider)
 8001fcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fce:	3b01      	subs	r3, #1
 8001fd0:	633b      	str	r3, [r7, #48]	; 0x30
 8001fd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d1d9      	bne.n	8001f8c <XMC_USIC_CH_SetBaudrate+0x4c>
        clock_divider_min = clock_divider;
      }
    }

    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_FRACTIONAL |
                   ((clock_divider_min - 1) << USIC_CH_FDR_STEP_Pos);
 8001fd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fda:	3b01      	subs	r3, #1
        pdiv_int_min = pdiv_int;
        clock_divider_min = clock_divider;
      }
    }

    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_FRACTIONAL |
 8001fdc:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	611a      	str	r2, [r3, #16]
                   ((clock_divider_min - 1) << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	695a      	ldr	r2, [r3, #20]
 8001fe8:	4b0d      	ldr	r3, [pc, #52]	; (8002020 <XMC_USIC_CH_SetBaudrate+0xe0>)
 8001fea:	4013      	ands	r3, r2
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
 8001fec:	687a      	ldr	r2, [r7, #4]
 8001fee:	3a01      	subs	r2, #1
 8001ff0:	0292      	lsls	r2, r2, #10
                   ((clock_divider_min - 1) << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
 8001ff2:	431a      	orrs	r2, r3
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
                   ((pdiv_int_min - 1U) << USIC_CH_BRG_PDIV_Pos);
 8001ff4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ff6:	3b01      	subs	r3, #1
 8001ff8:	041b      	lsls	r3, r3, #16

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
 8001ffa:	431a      	orrs	r2, r3
    }

    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_FRACTIONAL |
                   ((clock_divider_min - 1) << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	615a      	str	r2, [r3, #20]
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
                   ((pdiv_int_min - 1U) << USIC_CH_BRG_PDIV_Pos);

    status = XMC_USIC_CH_STATUS_OK;
 8002000:	2300      	movs	r3, #0
 8002002:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8002006:	e002      	b.n	800200e <XMC_USIC_CH_SetBaudrate+0xce>
  }
  else
  {
    status = XMC_USIC_CH_STATUS_ERROR;
 8002008:	2301      	movs	r3, #1
 800200a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }

  return status;
 800200e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8002012:	4618      	mov	r0, r3
 8002014:	3738      	adds	r7, #56	; 0x38
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}
 800201a:	bf00      	nop
 800201c:	51eb851f 	.word	0x51eb851f
 8002020:	fc0080ef 	.word	0xfc0080ef

08002024 <XMC_USIC_CH_SetBaudrateEx>:

XMC_USIC_CH_STATUS_t XMC_USIC_CH_SetBaudrateEx(XMC_USIC_CH_t *const channel, int32_t rate, int32_t oversampling)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b08c      	sub	sp, #48	; 0x30
 8002028:	af00      	add	r7, sp, #0
 800202a:	60f8      	str	r0, [r7, #12]
 800202c:	60b9      	str	r1, [r7, #8]
 800202e:	607a      	str	r2, [r7, #4]
  int32_t peripheral_clock = XMC_SCU_CLOCK_GetPeripheralClockFrequency();
 8002030:	f7fe fb7a 	bl	8000728 <XMC_SCU_CLOCK_GetPeripheralClockFrequency>
 8002034:	4603      	mov	r3, r0
 8002036:	623b      	str	r3, [r7, #32]
  int32_t brg_clock = rate * oversampling;
 8002038:	68bb      	ldr	r3, [r7, #8]
 800203a:	687a      	ldr	r2, [r7, #4]
 800203c:	fb02 f303 	mul.w	r3, r2, r3
 8002040:	61fb      	str	r3, [r7, #28]
  int32_t actual_rate_upper;
  int32_t actual_rate_lower;
  uint32_t pdiv = 1;
 8002042:	2301      	movs	r3, #1
 8002044:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t divider_step;
  XMC_USIC_CH_STATUS_t status;

  if (peripheral_clock > brg_clock)
 8002046:	6a3a      	ldr	r2, [r7, #32]
 8002048:	69fb      	ldr	r3, [r7, #28]
 800204a:	429a      	cmp	r2, r3
 800204c:	dd5f      	ble.n	800210e <XMC_USIC_CH_SetBaudrateEx+0xea>
  {
    divider_step = peripheral_clock / brg_clock; // integer division gets truncated
 800204e:	6a3a      	ldr	r2, [r7, #32]
 8002050:	69fb      	ldr	r3, [r7, #28]
 8002052:	fb92 f3f3 	sdiv	r3, r2, r3
 8002056:	62bb      	str	r3, [r7, #40]	; 0x28
    while (divider_step >= 1023)
 8002058:	e010      	b.n	800207c <XMC_USIC_CH_SetBaudrateEx+0x58>
    {
      pdiv++;
 800205a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800205c:	3301      	adds	r3, #1
 800205e:	62fb      	str	r3, [r7, #44]	; 0x2c
      brg_clock = rate * oversampling * pdiv;
 8002060:	68bb      	ldr	r3, [r7, #8]
 8002062:	687a      	ldr	r2, [r7, #4]
 8002064:	fb02 f303 	mul.w	r3, r2, r3
 8002068:	461a      	mov	r2, r3
 800206a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800206c:	fb03 f302 	mul.w	r3, r3, r2
 8002070:	61fb      	str	r3, [r7, #28]
      divider_step = peripheral_clock / brg_clock; // integer division gets truncated
 8002072:	6a3a      	ldr	r2, [r7, #32]
 8002074:	69fb      	ldr	r3, [r7, #28]
 8002076:	fb92 f3f3 	sdiv	r3, r2, r3
 800207a:	62bb      	str	r3, [r7, #40]	; 0x28
  XMC_USIC_CH_STATUS_t status;

  if (peripheral_clock > brg_clock)
  {
    divider_step = peripheral_clock / brg_clock; // integer division gets truncated
    while (divider_step >= 1023)
 800207c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800207e:	f240 32fe 	movw	r2, #1022	; 0x3fe
 8002082:	4293      	cmp	r3, r2
 8002084:	d8e9      	bhi.n	800205a <XMC_USIC_CH_SetBaudrateEx+0x36>
    {
      pdiv++;
      brg_clock = rate * oversampling * pdiv;
      divider_step = peripheral_clock / brg_clock; // integer division gets truncated
    }
    actual_rate_upper = peripheral_clock / (divider_step * oversampling * pdiv);
 8002086:	6a3a      	ldr	r2, [r7, #32]
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800208c:	fb01 f303 	mul.w	r3, r1, r3
 8002090:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002092:	fb01 f303 	mul.w	r3, r1, r3
 8002096:	fbb2 f3f3 	udiv	r3, r2, r3
 800209a:	61bb      	str	r3, [r7, #24]
    actual_rate_lower = peripheral_clock / ((divider_step + 1) * oversampling * pdiv);
 800209c:	6a3a      	ldr	r2, [r7, #32]
 800209e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020a0:	3301      	adds	r3, #1
 80020a2:	6879      	ldr	r1, [r7, #4]
 80020a4:	fb01 f303 	mul.w	r3, r1, r3
 80020a8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80020aa:	fb01 f303 	mul.w	r3, r1, r3
 80020ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80020b2:	617b      	str	r3, [r7, #20]

    // choose better approximation if the peripheral frequency is not a multiple of the baudrate
    if (abs(rate - actual_rate_lower) < abs(rate - actual_rate_upper))
 80020b4:	68ba      	ldr	r2, [r7, #8]
 80020b6:	697b      	ldr	r3, [r7, #20]
 80020b8:	1ad3      	subs	r3, r2, r3
 80020ba:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80020be:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80020c2:	68b9      	ldr	r1, [r7, #8]
 80020c4:	69bb      	ldr	r3, [r7, #24]
 80020c6:	1acb      	subs	r3, r1, r3
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	bfb8      	it	lt
 80020cc:	425b      	neglt	r3, r3
 80020ce:	429a      	cmp	r2, r3
 80020d0:	da02      	bge.n	80020d8 <XMC_USIC_CH_SetBaudrateEx+0xb4>
    {
      divider_step += 1;
 80020d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020d4:	3301      	adds	r3, #1
 80020d6:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    divider_step = 1024 - divider_step;
 80020d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020da:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 80020de:	62bb      	str	r3, [r7, #40]	; 0x28


    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_NORMAL |
 80020e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020e2:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	611a      	str	r2, [r3, #16]
                   (divider_step << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	695a      	ldr	r2, [r3, #20]
 80020ee:	4b0c      	ldr	r3, [pc, #48]	; (8002120 <XMC_USIC_CH_SetBaudrateEx+0xfc>)
 80020f0:	4013      	ands	r3, r2
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
 80020f2:	687a      	ldr	r2, [r7, #4]
 80020f4:	3a01      	subs	r2, #1
 80020f6:	0292      	lsls	r2, r2, #10
                   (divider_step << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
 80020f8:	431a      	orrs	r2, r3
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
                   ((pdiv - 1) << USIC_CH_BRG_PDIV_Pos);
 80020fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020fc:	3b01      	subs	r3, #1
 80020fe:	041b      	lsls	r3, r3, #16

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
 8002100:	431a      	orrs	r2, r3


    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_NORMAL |
                   (divider_step << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	615a      	str	r2, [r3, #20]
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
                   ((pdiv - 1) << USIC_CH_BRG_PDIV_Pos);

    status = XMC_USIC_CH_STATUS_OK;
 8002106:	2300      	movs	r3, #0
 8002108:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800210c:	e002      	b.n	8002114 <XMC_USIC_CH_SetBaudrateEx+0xf0>
  }
  else
  {
    status = XMC_USIC_CH_STATUS_ERROR;
 800210e:	2301      	movs	r3, #1
 8002110:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return status;
 8002114:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002118:	4618      	mov	r0, r3
 800211a:	3730      	adds	r7, #48	; 0x30
 800211c:	46bd      	mov	sp, r7
 800211e:	bd80      	pop	{r7, pc}
 8002120:	fc0080ef 	.word	0xfc0080ef

08002124 <XMC_USIC_CH_TXFIFO_Configure>:

void XMC_USIC_CH_TXFIFO_Configure(XMC_USIC_CH_t *const channel,
                                  const uint32_t data_pointer,
                                  const XMC_USIC_CH_FIFO_SIZE_t size,
                                  const uint32_t limit)
{
 8002124:	b480      	push	{r7}
 8002126:	b085      	sub	sp, #20
 8002128:	af00      	add	r7, sp, #0
 800212a:	60f8      	str	r0, [r7, #12]
 800212c:	60b9      	str	r1, [r7, #8]
 800212e:	603b      	str	r3, [r7, #0]
 8002130:	4613      	mov	r3, r2
 8002132:	71fb      	strb	r3, [r7, #7]
  /* Disable FIFO */
  channel->TBCTR &= (uint32_t)~USIC_CH_TBCTR_SIZE_Msk;
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800213a:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
  /* LOF = 0, A standard transmit buffer event occurs when the filling level equals the limit value and gets
   * lower due to transmission of a data word
   * STBTEN = 0, the trigger of the standard transmit buffer event is based on the transition of the fill level
   *  from equal to below the limit, not the fact being below
   */
  channel->TBCTR = (uint32_t)(channel->TBCTR & (uint32_t)~(USIC_CH_TBCTR_LIMIT_Msk |
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 800214a:	4b09      	ldr	r3, [pc, #36]	; (8002170 <XMC_USIC_CH_TXFIFO_Configure+0x4c>)
 800214c:	4013      	ands	r3, r2
                              USIC_CH_TBCTR_DPTR_Msk |
                              USIC_CH_TBCTR_SIZE_Msk)) |
                   (uint32_t)((limit << USIC_CH_TBCTR_LIMIT_Pos) |
 800214e:	683a      	ldr	r2, [r7, #0]
 8002150:	0211      	lsls	r1, r2, #8
 8002152:	68ba      	ldr	r2, [r7, #8]
 8002154:	4311      	orrs	r1, r2
                              (data_pointer << USIC_CH_TBCTR_DPTR_Pos) |
                              ((uint32_t)size << USIC_CH_TBCTR_SIZE_Pos));
 8002156:	79fa      	ldrb	r2, [r7, #7]
 8002158:	0612      	lsls	r2, r2, #24
   *  from equal to below the limit, not the fact being below
   */
  channel->TBCTR = (uint32_t)(channel->TBCTR & (uint32_t)~(USIC_CH_TBCTR_LIMIT_Msk |
                              USIC_CH_TBCTR_DPTR_Msk |
                              USIC_CH_TBCTR_SIZE_Msk)) |
                   (uint32_t)((limit << USIC_CH_TBCTR_LIMIT_Pos) |
 800215a:	430a      	orrs	r2, r1
   * STBTEN = 0, the trigger of the standard transmit buffer event is based on the transition of the fill level
   *  from equal to below the limit, not the fact being below
   */
  channel->TBCTR = (uint32_t)(channel->TBCTR & (uint32_t)~(USIC_CH_TBCTR_LIMIT_Msk |
                              USIC_CH_TBCTR_DPTR_Msk |
                              USIC_CH_TBCTR_SIZE_Msk)) |
 800215c:	431a      	orrs	r2, r3
  /* LOF = 0, A standard transmit buffer event occurs when the filling level equals the limit value and gets
   * lower due to transmission of a data word
   * STBTEN = 0, the trigger of the standard transmit buffer event is based on the transition of the fill level
   *  from equal to below the limit, not the fact being below
   */
  channel->TBCTR = (uint32_t)(channel->TBCTR & (uint32_t)~(USIC_CH_TBCTR_LIMIT_Msk |
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
                              USIC_CH_TBCTR_DPTR_Msk |
                              USIC_CH_TBCTR_SIZE_Msk)) |
                   (uint32_t)((limit << USIC_CH_TBCTR_LIMIT_Pos) |
                              (data_pointer << USIC_CH_TBCTR_DPTR_Pos) |
                              ((uint32_t)size << USIC_CH_TBCTR_SIZE_Pos));
}
 8002164:	3714      	adds	r7, #20
 8002166:	46bd      	mov	sp, r7
 8002168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216c:	4770      	bx	lr
 800216e:	bf00      	nop
 8002170:	f8ffc0c0 	.word	0xf8ffc0c0

08002174 <XMC_USIC_CH_RXFIFO_Configure>:

void XMC_USIC_CH_RXFIFO_Configure(XMC_USIC_CH_t *const channel,
                                  const uint32_t data_pointer,
                                  const XMC_USIC_CH_FIFO_SIZE_t size,
                                  const uint32_t limit)
{
 8002174:	b480      	push	{r7}
 8002176:	b085      	sub	sp, #20
 8002178:	af00      	add	r7, sp, #0
 800217a:	60f8      	str	r0, [r7, #12]
 800217c:	60b9      	str	r1, [r7, #8]
 800217e:	603b      	str	r3, [r7, #0]
 8002180:	4613      	mov	r3, r2
 8002182:	71fb      	strb	r3, [r7, #7]
  /* Disable FIFO */
  channel->RBCTR &= (uint32_t)~USIC_CH_RBCTR_SIZE_Msk;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800218a:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c

  /* LOF = 1, A standard receive buffer event occurs when the filling level equals the limit value and gets bigger
   *  due to the reception of a new data word
   */
  channel->RBCTR = (uint32_t)((channel->RBCTR & (uint32_t)~(USIC_CH_RBCTR_LIMIT_Msk |
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 800219a:	4b0a      	ldr	r3, [pc, #40]	; (80021c4 <XMC_USIC_CH_RXFIFO_Configure+0x50>)
 800219c:	4013      	ands	r3, r2
                               USIC_CH_RBCTR_DPTR_Msk |
                               USIC_CH_RBCTR_LOF_Msk)) |
                              ((limit << USIC_CH_RBCTR_LIMIT_Pos) |
 800219e:	683a      	ldr	r2, [r7, #0]
 80021a0:	0211      	lsls	r1, r2, #8
 80021a2:	68ba      	ldr	r2, [r7, #8]
 80021a4:	4311      	orrs	r1, r2
                               (data_pointer << USIC_CH_RBCTR_DPTR_Pos) |
                               ((uint32_t)size << USIC_CH_RBCTR_SIZE_Pos) |
 80021a6:	79fa      	ldrb	r2, [r7, #7]
 80021a8:	0612      	lsls	r2, r2, #24
   */
  channel->RBCTR = (uint32_t)((channel->RBCTR & (uint32_t)~(USIC_CH_RBCTR_LIMIT_Msk |
                               USIC_CH_RBCTR_DPTR_Msk |
                               USIC_CH_RBCTR_LOF_Msk)) |
                              ((limit << USIC_CH_RBCTR_LIMIT_Pos) |
                               (data_pointer << USIC_CH_RBCTR_DPTR_Pos) |
 80021aa:	430a      	orrs	r2, r1
  channel->RBCTR &= (uint32_t)~USIC_CH_RBCTR_SIZE_Msk;

  /* LOF = 1, A standard receive buffer event occurs when the filling level equals the limit value and gets bigger
   *  due to the reception of a new data word
   */
  channel->RBCTR = (uint32_t)((channel->RBCTR & (uint32_t)~(USIC_CH_RBCTR_LIMIT_Msk |
 80021ac:	4313      	orrs	r3, r2
 80021ae:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
                               USIC_CH_RBCTR_LOF_Msk)) |
                              ((limit << USIC_CH_RBCTR_LIMIT_Pos) |
                               (data_pointer << USIC_CH_RBCTR_DPTR_Pos) |
                               ((uint32_t)size << USIC_CH_RBCTR_SIZE_Pos) |
                               (uint32_t)USIC_CH_RBCTR_LOF_Msk));
}
 80021b8:	3714      	adds	r7, #20
 80021ba:	46bd      	mov	sp, r7
 80021bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c0:	4770      	bx	lr
 80021c2:	bf00      	nop
 80021c4:	efffc0c0 	.word	0xefffc0c0

080021c8 <XMC_USIC_CH_SetInterruptNodePointer>:
}

void XMC_USIC_CH_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
    const XMC_USIC_CH_INTERRUPT_NODE_POINTER_t interrupt_node,
    const uint32_t service_request)
{
 80021c8:	b480      	push	{r7}
 80021ca:	b085      	sub	sp, #20
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	60f8      	str	r0, [r7, #12]
 80021d0:	460b      	mov	r3, r1
 80021d2:	607a      	str	r2, [r7, #4]
 80021d4:	72fb      	strb	r3, [r7, #11]
  channel->INPR = (uint32_t)((channel->INPR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	699a      	ldr	r2, [r3, #24]
 80021da:	7afb      	ldrb	r3, [r7, #11]
 80021dc:	2107      	movs	r1, #7
 80021de:	fa01 f303 	lsl.w	r3, r1, r3
 80021e2:	43db      	mvns	r3, r3
 80021e4:	401a      	ands	r2, r3
                             (service_request << (uint32_t)interrupt_node));
 80021e6:	7afb      	ldrb	r3, [r7, #11]
 80021e8:	6879      	ldr	r1, [r7, #4]
 80021ea:	fa01 f303 	lsl.w	r3, r1, r3

void XMC_USIC_CH_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
    const XMC_USIC_CH_INTERRUPT_NODE_POINTER_t interrupt_node,
    const uint32_t service_request)
{
  channel->INPR = (uint32_t)((channel->INPR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
 80021ee:	431a      	orrs	r2, r3
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	619a      	str	r2, [r3, #24]
                             (service_request << (uint32_t)interrupt_node));
}
 80021f4:	3714      	adds	r7, #20
 80021f6:	46bd      	mov	sp, r7
 80021f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fc:	4770      	bx	lr
 80021fe:	bf00      	nop

08002200 <XMC_USIC_Enable>:
  channel->RBCTR = (uint32_t)((channel->RBCTR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
                              (service_request << (uint32_t)interrupt_node));
}

void XMC_USIC_Enable(XMC_USIC_t *const usic)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b082      	sub	sp, #8
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  if (usic == USIC0)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	4a1b      	ldr	r2, [pc, #108]	; (8002278 <XMC_USIC_Enable+0x78>)
 800220c:	4293      	cmp	r3, r2
 800220e:	d118      	bne.n	8002242 <XMC_USIC_Enable+0x42>
  {
#if defined(CLOCK_GATING_SUPPORTED)
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USIC0);
 8002210:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002214:	f7fe fbb8 	bl	8000988 <XMC_SCU_CLOCK_UngatePeripheralClock>
    while (XMC_SCU_CLOCK_IsPeripheralClockGated(XMC_SCU_PERIPHERAL_CLOCK_USIC0));
 8002218:	bf00      	nop
 800221a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800221e:	f7fe fbcf 	bl	80009c0 <XMC_SCU_CLOCK_IsPeripheralClockGated>
 8002222:	4603      	mov	r3, r0
 8002224:	2b00      	cmp	r3, #0
 8002226:	d1f8      	bne.n	800221a <XMC_USIC_Enable+0x1a>
#endif
#if defined(PERIPHERAL_RESET_SUPPORTED)
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC0);
 8002228:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800222c:	f7fe fa3c 	bl	80006a8 <XMC_SCU_RESET_DeassertPeripheralReset>
    while (XMC_SCU_RESET_IsPeripheralResetAsserted(XMC_SCU_PERIPHERAL_RESET_USIC0));
 8002230:	bf00      	nop
 8002232:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002236:	f7fe fa53 	bl	80006e0 <XMC_SCU_RESET_IsPeripheralResetAsserted>
 800223a:	4603      	mov	r3, r0
 800223c:	2b00      	cmp	r3, #0
 800223e:	d1f8      	bne.n	8002232 <XMC_USIC_Enable+0x32>
 8002240:	e017      	b.n	8002272 <XMC_USIC_Enable+0x72>
#endif
  }
#if defined(USIC1)
  else if (usic == USIC1)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	4a0d      	ldr	r2, [pc, #52]	; (800227c <XMC_USIC_Enable+0x7c>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d113      	bne.n	8002272 <XMC_USIC_Enable+0x72>
  {
#if defined(CLOCK_GATING_SUPPORTED)
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USIC1);
 800224a:	480d      	ldr	r0, [pc, #52]	; (8002280 <XMC_USIC_Enable+0x80>)
 800224c:	f7fe fb9c 	bl	8000988 <XMC_SCU_CLOCK_UngatePeripheralClock>
    while (XMC_SCU_CLOCK_IsPeripheralClockGated(XMC_SCU_PERIPHERAL_CLOCK_USIC1));
 8002250:	bf00      	nop
 8002252:	480b      	ldr	r0, [pc, #44]	; (8002280 <XMC_USIC_Enable+0x80>)
 8002254:	f7fe fbb4 	bl	80009c0 <XMC_SCU_CLOCK_IsPeripheralClockGated>
 8002258:	4603      	mov	r3, r0
 800225a:	2b00      	cmp	r3, #0
 800225c:	d1f9      	bne.n	8002252 <XMC_USIC_Enable+0x52>
#endif
#if defined(PERIPHERAL_RESET_SUPPORTED)
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC1);
 800225e:	4808      	ldr	r0, [pc, #32]	; (8002280 <XMC_USIC_Enable+0x80>)
 8002260:	f7fe fa22 	bl	80006a8 <XMC_SCU_RESET_DeassertPeripheralReset>
    while (XMC_SCU_RESET_IsPeripheralResetAsserted(XMC_SCU_PERIPHERAL_RESET_USIC1));
 8002264:	bf00      	nop
 8002266:	4806      	ldr	r0, [pc, #24]	; (8002280 <XMC_USIC_Enable+0x80>)
 8002268:	f7fe fa3a 	bl	80006e0 <XMC_SCU_RESET_IsPeripheralResetAsserted>
 800226c:	4603      	mov	r3, r0
 800226e:	2b00      	cmp	r3, #0
 8002270:	d1f9      	bne.n	8002266 <XMC_USIC_Enable+0x66>
#endif
  else
  {
    XMC_ASSERT("USIC module not available", 0/*Always*/);
  }
}
 8002272:	3708      	adds	r7, #8
 8002274:	46bd      	mov	sp, r7
 8002276:	bd80      	pop	{r7, pc}
 8002278:	40030008 	.word	0x40030008
 800227c:	48020008 	.word	0x48020008
 8002280:	10000080 	.word	0x10000080

08002284 <XMC_VADC_GROUP_ExternalMuxControlInit>:
 * \par<b>Related APIs:</b><BR>
 * None
 */
__STATIC_INLINE void XMC_VADC_GROUP_ExternalMuxControlInit(XMC_VADC_GROUP_t *const group_ptr,
    const XMC_VADC_GROUP_EMUXCFG_t emux_cfg)
{
 8002284:	b480      	push	{r7}
 8002286:	b085      	sub	sp, #20
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
 800228c:	6039      	str	r1, [r7, #0]
  uint32_t   emux_config;

  XMC_ASSERT("XMC_VADC_GROUP_ExternalMuxControlInit:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))

  emux_config = ((uint32_t)emux_cfg.starting_external_channel << (uint32_t)VADC_G_EMUXCTR_EMUXSET_Pos) |
 800228e:	783b      	ldrb	r3, [r7, #0]
 8002290:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8002294:	b2db      	uxtb	r3, r3
 8002296:	461a      	mov	r2, r3
                ((uint32_t)emux_cfg.connected_channel << (uint32_t)VADC_G_EMUXCTR_EMUXCH_Pos);
 8002298:	887b      	ldrh	r3, [r7, #2]
 800229a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800229e:	b29b      	uxth	r3, r3
 80022a0:	041b      	lsls	r3, r3, #16
{
  uint32_t   emux_config;

  XMC_ASSERT("XMC_VADC_GROUP_ExternalMuxControlInit:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))

  emux_config = ((uint32_t)emux_cfg.starting_external_channel << (uint32_t)VADC_G_EMUXCTR_EMUXSET_Pos) |
 80022a2:	4313      	orrs	r3, r2
 80022a4:	60fb      	str	r3, [r7, #12]
                ((uint32_t)emux_cfg.connected_channel << (uint32_t)VADC_G_EMUXCTR_EMUXCH_Pos);

  group_ptr->EMUXCTR  = emux_config;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	68fa      	ldr	r2, [r7, #12]
 80022aa:	f8c3 21f0 	str.w	r2, [r3, #496]	; 0x1f0
  emux_config = ((uint32_t)emux_cfg.emux_coding << (uint32_t)VADC_G_EMUXCTR_EMXCOD_Pos)  |
 80022ae:	78fb      	ldrb	r3, [r7, #3]
 80022b0:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80022b4:	b2db      	uxtb	r3, r3
 80022b6:	071a      	lsls	r2, r3, #28
                ((uint32_t)emux_cfg.emux_mode  << (uint32_t)VADC_G_EMUXCTR_EMUXMODE_Pos) |
 80022b8:	78fb      	ldrb	r3, [r7, #3]
 80022ba:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80022be:	b2db      	uxtb	r3, r3
 80022c0:	069b      	lsls	r3, r3, #26

  emux_config = ((uint32_t)emux_cfg.starting_external_channel << (uint32_t)VADC_G_EMUXCTR_EMUXSET_Pos) |
                ((uint32_t)emux_cfg.connected_channel << (uint32_t)VADC_G_EMUXCTR_EMUXCH_Pos);

  group_ptr->EMUXCTR  = emux_config;
  emux_config = ((uint32_t)emux_cfg.emux_coding << (uint32_t)VADC_G_EMUXCTR_EMXCOD_Pos)  |
 80022c2:	431a      	orrs	r2, r3
                ((uint32_t)emux_cfg.emux_mode  << (uint32_t)VADC_G_EMUXCTR_EMUXMODE_Pos) |
                ((uint32_t)emux_cfg.stce_usage << (uint32_t)VADC_G_EMUXCTR_EMXST_Pos);
 80022c4:	78fb      	ldrb	r3, [r7, #3]
 80022c6:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80022ca:	b2db      	uxtb	r3, r3
 80022cc:	075b      	lsls	r3, r3, #29

  emux_config = ((uint32_t)emux_cfg.starting_external_channel << (uint32_t)VADC_G_EMUXCTR_EMUXSET_Pos) |
                ((uint32_t)emux_cfg.connected_channel << (uint32_t)VADC_G_EMUXCTR_EMUXCH_Pos);

  group_ptr->EMUXCTR  = emux_config;
  emux_config = ((uint32_t)emux_cfg.emux_coding << (uint32_t)VADC_G_EMUXCTR_EMXCOD_Pos)  |
 80022ce:	4313      	orrs	r3, r2
 80022d0:	60fb      	str	r3, [r7, #12]
                ((uint32_t)emux_cfg.emux_mode  << (uint32_t)VADC_G_EMUXCTR_EMUXMODE_Pos) |
                ((uint32_t)emux_cfg.stce_usage << (uint32_t)VADC_G_EMUXCTR_EMXST_Pos);

#if (XMC_VADC_EMUX_CH_SEL_STYLE == 1U)
  emux_config |= ((uint32_t)emux_cfg.emux_channel_select_style << (uint32_t)VADC_G_EMUXCTR_EMXCSS_Pos);
 80022d2:	78fb      	ldrb	r3, [r7, #3]
 80022d4:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80022d8:	b2db      	uxtb	r3, r3
 80022da:	079b      	lsls	r3, r3, #30
 80022dc:	68fa      	ldr	r2, [r7, #12]
 80022de:	4313      	orrs	r3, r2
 80022e0:	60fb      	str	r3, [r7, #12]
#endif
  group_ptr->EMUXCTR  |= (emux_config | ((uint32_t)VADC_G_EMUXCTR_EMXWC_Msk)) ;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	f8d3 21f0 	ldr.w	r2, [r3, #496]	; 0x1f0
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	4313      	orrs	r3, r2
 80022ec:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	f8c3 21f0 	str.w	r2, [r3, #496]	; 0x1f0
}
 80022f6:	3714      	adds	r7, #20
 80022f8:	46bd      	mov	sp, r7
 80022fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fe:	4770      	bx	lr

08002300 <XMC_VADC_GROUP_BackgroundEnableArbitrationSlot>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_VADC_GROUP_BackgroundDisableArbitrationSlot()<BR>
 */
__STATIC_INLINE void XMC_VADC_GROUP_BackgroundEnableArbitrationSlot(XMC_VADC_GROUP_t *const group_ptr)
{
 8002300:	b480      	push	{r7}
 8002302:	b083      	sub	sp, #12
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_VADC_GROUP_BackgroundEnableArbitrationSlot:Wrong Group Pointer",  XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  group_ptr->ARBPR |= (uint32_t)VADC_G_ARBPR_ASEN2_Msk;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800230e:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 8002318:	370c      	adds	r7, #12
 800231a:	46bd      	mov	sp, r7
 800231c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002320:	4770      	bx	lr
 8002322:	bf00      	nop

08002324 <XMC_VADC_GROUP_BackgroundDisableArbitrationSlot>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_VADC_GROUP_BackgroundEnableArbitrationSlot()<BR>
 */
__STATIC_INLINE void XMC_VADC_GROUP_BackgroundDisableArbitrationSlot(XMC_VADC_GROUP_t *const group_ptr)
{
 8002324:	b480      	push	{r7}
 8002326:	b083      	sub	sp, #12
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_VADC_GROUP_BackgroundDisableArbitrationSlot:Wrong Group Pointer",  XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  group_ptr->ARBPR &= ~((uint32_t)VADC_G_ARBPR_ASEN2_Msk);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002332:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800233c:	370c      	adds	r7, #12
 800233e:	46bd      	mov	sp, r7
 8002340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002344:	4770      	bx	lr
 8002346:	bf00      	nop

08002348 <XMC_VADC_GLOBAL_EnableModule>:
 * API IMPLEMENTATION
 ********************************************************************************************************************/

/*API to enable the VADC Module*/
void XMC_VADC_GLOBAL_EnableModule(void)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	af00      	add	r7, sp, #0
#if defined (COMPARATOR)
  COMPARATOR->ORCCTRL = (uint32_t)0xFF;
#endif

#if defined(CLOCK_GATING_SUPPORTED)
  XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_VADC);
 800234c:	2001      	movs	r0, #1
 800234e:	f7fe fb1b 	bl	8000988 <XMC_SCU_CLOCK_UngatePeripheralClock>
#endif

#if defined(PERIPHERAL_RESET_SUPPORTED)
  /* Reset the Hardware */
  XMC_SCU_RESET_DeassertPeripheralReset((XMC_SCU_PERIPHERAL_RESET_t)XMC_SCU_PERIPHERAL_RESET_VADC );
 8002352:	2001      	movs	r0, #1
 8002354:	f7fe f9a8 	bl	80006a8 <XMC_SCU_RESET_DeassertPeripheralReset>
#endif
}
 8002358:	bd80      	pop	{r7, pc}
 800235a:	bf00      	nop

0800235c <XMC_VADC_GLOBAL_Init>:
}


/* API to initialize global resources */
void XMC_VADC_GLOBAL_Init(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_GLOBAL_CONFIG_t *config)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b082      	sub	sp, #8
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
 8002364:	6039      	str	r1, [r7, #0]
#if (UC_SERIES == XMC14)
  XMC_SCU_CLOCK_SetAdcClockSrc(XMC_SCU_CLOCK_ADCCLKSRC_48MHZ);
#endif

  /* Enable the VADC module*/
  XMC_VADC_GLOBAL_EnableModule();
 8002366:	f7ff ffef 	bl	8002348 <XMC_VADC_GLOBAL_EnableModule>

  global_ptr->CLC = (uint32_t)(config->clc);
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	695a      	ldr	r2, [r3, #20]
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	601a      	str	r2, [r3, #0]

  /* Clock configuration */

#if (XMC_VADC_GROUP_AVAILABLE == 1U)
  global_ptr->GLOBCFG  = (uint32_t)(config->clock_config.globcfg | (uint32_t)(VADC_GLOBCFG_DIVWC_Msk));
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#endif

  /* ICLASS-0 configuration */
  global_ptr->GLOBICLASS[0] = (uint32_t)(config->class0.globiclass);
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	689a      	ldr	r2, [r3, #8]
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* ICLASS-1 configuration */
  global_ptr->GLOBICLASS[1] = (uint32_t)(config->class1.globiclass);
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	68da      	ldr	r2, [r3, #12]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4


  /*Result generation related configuration */
  global_ptr->GLOBRCR = (uint32_t)(config->globrcr);
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	691a      	ldr	r2, [r3, #16]
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	f8c3 2280 	str.w	r2, [r3, #640]	; 0x280

#if (XMC_VADC_BOUNDARY_AVAILABLE == 1U)

  /* Boundaries */
  global_ptr->GLOBBOUND = (uint32_t)(config->globbound);
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	681a      	ldr	r2, [r3, #0]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

  /* From the Errata sheet of XMC1100 V1.7*/
  XMC_VADC_CONV_ENABLE_FOR_XMC11 = 1U;
#endif

}
 80023a8:	3708      	adds	r7, #8
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}
 80023ae:	bf00      	nop

080023b0 <XMC_VADC_GLOBAL_InputClassInit>:

/* API to Set the Global IClass registers*/
void XMC_VADC_GLOBAL_InputClassInit(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_GLOBAL_CLASS_t config,
                                    const XMC_VADC_GROUP_CONV_t conv_type, const uint32_t set_num)
{
 80023b0:	b480      	push	{r7}
 80023b2:	b085      	sub	sp, #20
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	60f8      	str	r0, [r7, #12]
 80023b8:	60b9      	str	r1, [r7, #8]
 80023ba:	603b      	str	r3, [r7, #0]
 80023bc:	4613      	mov	r3, r2
 80023be:	71fb      	strb	r3, [r7, #7]
  XMC_ASSERT("XMC_VADC_GLOBAL_InputClassInit:Wrong Module Pointer", (global_ptr == VADC))
  XMC_ASSERT("XMC_VADC_GLOBAL_InputClassInit:Wrong Conversion Type", ((conv_type) <= XMC_VADC_GROUP_CONV_EMUX))
  XMC_ASSERT("XMC_VADC_GLOBAL_InputClassInit:Wrong ICLASS set number", (set_num < XMC_VADC_MAX_ICLASS_SET))

#if(XMC_VADC_EMUX_AVAILABLE == 1U)
  if (conv_type == XMC_VADC_GROUP_CONV_STD )
 80023c0:	79fb      	ldrb	r3, [r7, #7]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d109      	bne.n	80023da <XMC_VADC_GLOBAL_InputClassInit+0x2a>
  {
#endif
    XMC_UNUSED_ARG(conv_type);
    global_ptr->GLOBICLASS[set_num] = config.globiclass &
 80023c6:	68ba      	ldr	r2, [r7, #8]
 80023c8:	f240 731f 	movw	r3, #1823	; 0x71f
 80023cc:	4013      	ands	r3, r2
 80023ce:	68fa      	ldr	r2, [r7, #12]
 80023d0:	6839      	ldr	r1, [r7, #0]
 80023d2:	3128      	adds	r1, #40	; 0x28
 80023d4:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 80023d8:	e007      	b.n	80023ea <XMC_VADC_GLOBAL_InputClassInit+0x3a>
                                      (uint32_t)(VADC_GLOBICLASS_CMS_Msk | VADC_GLOBICLASS_STCS_Msk);
#if(XMC_VADC_EMUX_AVAILABLE == 1U)
  }
  else
  {
    global_ptr->GLOBICLASS[set_num] = config.globiclass & (uint32_t)(VADC_GLOBICLASS_CME_Msk | VADC_GLOBICLASS_STCE_Msk);
 80023da:	68ba      	ldr	r2, [r7, #8]
 80023dc:	4b05      	ldr	r3, [pc, #20]	; (80023f4 <XMC_VADC_GLOBAL_InputClassInit+0x44>)
 80023de:	4013      	ands	r3, r2
 80023e0:	68fa      	ldr	r2, [r7, #12]
 80023e2:	6839      	ldr	r1, [r7, #0]
 80023e4:	3128      	adds	r1, #40	; 0x28
 80023e6:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  }
#endif
}
 80023ea:	3714      	adds	r7, #20
 80023ec:	46bd      	mov	sp, r7
 80023ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f2:	4770      	bx	lr
 80023f4:	071f0000 	.word	0x071f0000

080023f8 <XMC_VADC_GLOBAL_StartupCalibration>:

/* API to enable startup calibration feature */
void XMC_VADC_GLOBAL_StartupCalibration(XMC_VADC_GLOBAL_t *const global_ptr)
{
 80023f8:	b480      	push	{r7}
 80023fa:	b085      	sub	sp, #20
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
  VADC_G_TypeDef *group_ptr;
#endif

  XMC_ASSERT("XMC_VADC_GLOBAL_StartupCalibration:Wrong Module Pointer", (global_ptr == VADC))

  global_ptr->GLOBCFG |= (uint32_t)VADC_GLOBCFG_SUCAL_Msk;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002406:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

#if (XMC_VADC_GROUP_AVAILABLE == 1U)
  /* Loop until all active groups finish calibration */
  for (i = 0U; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 8002410:	2300      	movs	r3, #0
 8002412:	73fb      	strb	r3, [r7, #15]
 8002414:	e017      	b.n	8002446 <XMC_VADC_GLOBAL_StartupCalibration+0x4e>
  {
    group_ptr = g_xmc_vadc_group_array[i];
 8002416:	7bfb      	ldrb	r3, [r7, #15]
 8002418:	4a0f      	ldr	r2, [pc, #60]	; (8002458 <XMC_VADC_GLOBAL_StartupCalibration+0x60>)
 800241a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800241e:	60bb      	str	r3, [r7, #8]
    if ( (group_ptr->ARBCFG) & (uint32_t)VADC_G_ARBCFG_ANONS_Msk)
 8002420:	68bb      	ldr	r3, [r7, #8]
 8002422:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002426:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800242a:	2b00      	cmp	r3, #0
 800242c:	d008      	beq.n	8002440 <XMC_VADC_GLOBAL_StartupCalibration+0x48>
      while ((group_ptr->ARBCFG & (uint32_t)VADC_G_ARBCFG_CALS_Msk) == 0)
      {
        __NOP();
      }
#endif
      while ((group_ptr->ARBCFG) & (uint32_t)VADC_G_ARBCFG_CAL_Msk)
 800242e:	e000      	b.n	8002432 <XMC_VADC_GLOBAL_StartupCalibration+0x3a>
      {
        __NOP();
 8002430:	bf00      	nop
      while ((group_ptr->ARBCFG & (uint32_t)VADC_G_ARBCFG_CALS_Msk) == 0)
      {
        __NOP();
      }
#endif
      while ((group_ptr->ARBCFG) & (uint32_t)VADC_G_ARBCFG_CAL_Msk)
 8002432:	68bb      	ldr	r3, [r7, #8]
 8002434:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002438:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800243c:	2b00      	cmp	r3, #0
 800243e:	d1f7      	bne.n	8002430 <XMC_VADC_GLOBAL_StartupCalibration+0x38>

  global_ptr->GLOBCFG |= (uint32_t)VADC_GLOBCFG_SUCAL_Msk;

#if (XMC_VADC_GROUP_AVAILABLE == 1U)
  /* Loop until all active groups finish calibration */
  for (i = 0U; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 8002440:	7bfb      	ldrb	r3, [r7, #15]
 8002442:	3301      	adds	r3, #1
 8002444:	73fb      	strb	r3, [r7, #15]
 8002446:	7bfb      	ldrb	r3, [r7, #15]
 8002448:	2b01      	cmp	r3, #1
 800244a:	d9e4      	bls.n	8002416 <XMC_VADC_GLOBAL_StartupCalibration+0x1e>
         XMC_VADC_SHS_START_UP_CAL_ACTIVE )
  {
    __NOP();
  }
#endif
}
 800244c:	3714      	adds	r7, #20
 800244e:	46bd      	mov	sp, r7
 8002450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002454:	4770      	bx	lr
 8002456:	bf00      	nop
 8002458:	08007b14 	.word	0x08007b14

0800245c <XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode>:
  global_ptr->GLOBEVNP |= (uint32_t)(node << VADC_GLOBEVNP_REV0NP_Pos);
}

/* API to bind request source event with a service request line */
void XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode(XMC_VADC_GLOBAL_t *const global_ptr, XMC_VADC_SR_t sr)
{
 800245c:	b480      	push	{r7}
 800245e:	b085      	sub	sp, #20
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
 8002464:	460b      	mov	r3, r1
 8002466:	70fb      	strb	r3, [r7, #3]
  uint32_t node;

  XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode:Wrong Module Pointer", (global_ptr == VADC))

  if (sr >= XMC_VADC_SR_SHARED_SR0)
 8002468:	78fb      	ldrb	r3, [r7, #3]
 800246a:	2b03      	cmp	r3, #3
 800246c:	d903      	bls.n	8002476 <XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode+0x1a>
  {
    node = (uint32_t)sr - (uint32_t)XMC_VADC_SR_SHARED_SR0;
 800246e:	78fb      	ldrb	r3, [r7, #3]
 8002470:	3b04      	subs	r3, #4
 8002472:	60fb      	str	r3, [r7, #12]
 8002474:	e001      	b.n	800247a <XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode+0x1e>
  }
  else
  {
    node = (uint32_t)sr;
 8002476:	78fb      	ldrb	r3, [r7, #3]
 8002478:	60fb      	str	r3, [r7, #12]
  }

  global_ptr->GLOBEVNP &= ~((uint32_t)VADC_GLOBEVNP_SEV0NP_Msk);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002480:	f023 020f 	bic.w	r2, r3, #15
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
  global_ptr->GLOBEVNP |= (uint32_t) (node << VADC_GLOBEVNP_SEV0NP_Pos);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	431a      	orrs	r2, r3
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
}
 800249a:	3714      	adds	r7, #20
 800249c:	46bd      	mov	sp, r7
 800249e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a2:	4770      	bx	lr

080024a4 <XMC_VADC_GROUP_Init>:

/* API to initialize an instance of group of VADC hardware */
#if (XMC_VADC_GROUP_AVAILABLE == 1U)
void XMC_VADC_GROUP_Init( XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_GROUP_CONFIG_t *config)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b082      	sub	sp, #8
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
 80024ac:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_VADC_GROUP_Init:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))

  /* Program the input classes */
  XMC_VADC_GROUP_InputClassInit(group_ptr, config->class0, XMC_VADC_GROUP_CONV_STD, 0U);
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	6878      	ldr	r0, [r7, #4]
 80024b2:	6859      	ldr	r1, [r3, #4]
 80024b4:	2200      	movs	r2, #0
 80024b6:	2300      	movs	r3, #0
 80024b8:	f000 f828 	bl	800250c <XMC_VADC_GROUP_InputClassInit>
  XMC_VADC_GROUP_InputClassInit(group_ptr, config->class0, XMC_VADC_GROUP_CONV_EMUX, 0U);
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	6878      	ldr	r0, [r7, #4]
 80024c0:	6859      	ldr	r1, [r3, #4]
 80024c2:	2201      	movs	r2, #1
 80024c4:	2300      	movs	r3, #0
 80024c6:	f000 f821 	bl	800250c <XMC_VADC_GROUP_InputClassInit>
  XMC_VADC_GROUP_InputClassInit(group_ptr, config->class1, XMC_VADC_GROUP_CONV_STD, 1U);
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	6878      	ldr	r0, [r7, #4]
 80024ce:	6899      	ldr	r1, [r3, #8]
 80024d0:	2200      	movs	r2, #0
 80024d2:	2301      	movs	r3, #1
 80024d4:	f000 f81a 	bl	800250c <XMC_VADC_GROUP_InputClassInit>
  XMC_VADC_GROUP_InputClassInit(group_ptr, config->class1, XMC_VADC_GROUP_CONV_EMUX, 1U);
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	6878      	ldr	r0, [r7, #4]
 80024dc:	6899      	ldr	r1, [r3, #8]
 80024de:	2201      	movs	r2, #1
 80024e0:	2301      	movs	r3, #1
 80024e2:	f000 f813 	bl	800250c <XMC_VADC_GROUP_InputClassInit>

  group_ptr->ARBCFG = config->g_arbcfg;
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	691a      	ldr	r2, [r3, #16]
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  group_ptr->BOUND = config->g_bound;
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	68da      	ldr	r2, [r3, #12]
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

  /* External mux configuration */
  XMC_VADC_GROUP_ExternalMuxControlInit(group_ptr, config->emux_config);
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	6878      	ldr	r0, [r7, #4]
 80024fe:	6819      	ldr	r1, [r3, #0]
 8002500:	f7ff fec0 	bl	8002284 <XMC_VADC_GROUP_ExternalMuxControlInit>

}
 8002504:	3708      	adds	r7, #8
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}
 800250a:	bf00      	nop

0800250c <XMC_VADC_GROUP_InputClassInit>:

/* API to program conversion characteristics */
void XMC_VADC_GROUP_InputClassInit(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_GROUP_CLASS_t config,
                                   const XMC_VADC_GROUP_CONV_t conv_type, const uint32_t set_num)
{
 800250c:	b480      	push	{r7}
 800250e:	b08d      	sub	sp, #52	; 0x34
 8002510:	af00      	add	r7, sp, #0
 8002512:	60f8      	str	r0, [r7, #12]
 8002514:	60b9      	str	r1, [r7, #8]
 8002516:	603b      	str	r3, [r7, #0]
 8002518:	4613      	mov	r3, r2
 800251a:	71fb      	strb	r3, [r7, #7]

  /*
   * Obtain the mask and position macros of the parameters based on what is being requested - Standard channels vs
   * external mux channels.
   */
  if (XMC_VADC_GROUP_CONV_STD == conv_type)
 800251c:	79fb      	ldrb	r3, [r7, #7]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d113      	bne.n	800254a <XMC_VADC_GROUP_InputClassInit+0x3e>
  {
    conv_mode_pos    = (uint32_t) VADC_G_ICLASS_CMS_Pos;
 8002522:	2308      	movs	r3, #8
 8002524:	62fb      	str	r3, [r7, #44]	; 0x2c
    conv_mode_mask   = (uint32_t) VADC_G_ICLASS_CMS_Msk;
 8002526:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800252a:	627b      	str	r3, [r7, #36]	; 0x24
    sample_time_pos  = (uint32_t) VADC_G_ICLASS_STCS_Pos;
 800252c:	2300      	movs	r3, #0
 800252e:	62bb      	str	r3, [r7, #40]	; 0x28
    sample_time_mask = (uint32_t) VADC_G_ICLASS_STCS_Msk;
 8002530:	231f      	movs	r3, #31
 8002532:	623b      	str	r3, [r7, #32]
    sample_time      = (uint32_t) config.sample_time_std_conv;
 8002534:	7a3b      	ldrb	r3, [r7, #8]
 8002536:	f3c3 0304 	ubfx	r3, r3, #0, #5
 800253a:	b2db      	uxtb	r3, r3
 800253c:	61fb      	str	r3, [r7, #28]
    conv_mode        = (XMC_VADC_CONVMODE_t)config.conversion_mode_standard;
 800253e:	7a7b      	ldrb	r3, [r7, #9]
 8002540:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8002544:	b2db      	uxtb	r3, r3
 8002546:	76fb      	strb	r3, [r7, #27]
 8002548:	e013      	b.n	8002572 <XMC_VADC_GROUP_InputClassInit+0x66>
  }
  else
  {
    conv_mode_pos    = (uint32_t) VADC_G_ICLASS_CME_Pos;
 800254a:	2318      	movs	r3, #24
 800254c:	62fb      	str	r3, [r7, #44]	; 0x2c
    conv_mode_mask   = (uint32_t) VADC_G_ICLASS_CME_Msk;
 800254e:	f04f 63e0 	mov.w	r3, #117440512	; 0x7000000
 8002552:	627b      	str	r3, [r7, #36]	; 0x24
    sample_time_pos  = (uint32_t) VADC_G_ICLASS_STCE_Pos;
 8002554:	2310      	movs	r3, #16
 8002556:	62bb      	str	r3, [r7, #40]	; 0x28
    sample_time_mask = (uint32_t) VADC_G_ICLASS_STCE_Msk;
 8002558:	f44f 13f8 	mov.w	r3, #2031616	; 0x1f0000
 800255c:	623b      	str	r3, [r7, #32]
    sample_time      = (uint32_t) config.sampling_phase_emux_channel;
 800255e:	7abb      	ldrb	r3, [r7, #10]
 8002560:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8002564:	b2db      	uxtb	r3, r3
 8002566:	61fb      	str	r3, [r7, #28]
    conv_mode        = (XMC_VADC_CONVMODE_t)config.conversion_mode_emux;
 8002568:	7afb      	ldrb	r3, [r7, #11]
 800256a:	f3c3 0302 	ubfx	r3, r3, #0, #3
 800256e:	b2db      	uxtb	r3, r3
 8002570:	76fb      	strb	r3, [r7, #27]
  }

  /* Determine the class */
  conv_class  = group_ptr->ICLASS[set_num];
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	683a      	ldr	r2, [r7, #0]
 8002576:	3228      	adds	r2, #40	; 0x28
 8002578:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800257c:	617b      	str	r3, [r7, #20]

  /* Program the class register */
  conv_class &= ~(conv_mode_mask);
 800257e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002580:	43db      	mvns	r3, r3
 8002582:	697a      	ldr	r2, [r7, #20]
 8002584:	4013      	ands	r3, r2
 8002586:	617b      	str	r3, [r7, #20]
  conv_class |= (uint32_t)((uint32_t) conv_mode << conv_mode_pos);
 8002588:	7efa      	ldrb	r2, [r7, #27]
 800258a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800258c:	fa02 f303 	lsl.w	r3, r2, r3
 8002590:	697a      	ldr	r2, [r7, #20]
 8002592:	4313      	orrs	r3, r2
 8002594:	617b      	str	r3, [r7, #20]
  conv_class &= ~(sample_time_mask);
 8002596:	6a3b      	ldr	r3, [r7, #32]
 8002598:	43db      	mvns	r3, r3
 800259a:	697a      	ldr	r2, [r7, #20]
 800259c:	4013      	ands	r3, r2
 800259e:	617b      	str	r3, [r7, #20]
  conv_class |= (uint32_t)(sample_time <<  sample_time_pos);
 80025a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025a2:	69fa      	ldr	r2, [r7, #28]
 80025a4:	fa02 f303 	lsl.w	r3, r2, r3
 80025a8:	697a      	ldr	r2, [r7, #20]
 80025aa:	4313      	orrs	r3, r2
 80025ac:	617b      	str	r3, [r7, #20]
  group_ptr->ICLASS[set_num] = conv_class;
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	683a      	ldr	r2, [r7, #0]
 80025b2:	3228      	adds	r2, #40	; 0x28
 80025b4:	6979      	ldr	r1, [r7, #20]
 80025b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 80025ba:	3734      	adds	r7, #52	; 0x34
 80025bc:	46bd      	mov	sp, r7
 80025be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c2:	4770      	bx	lr

080025c4 <XMC_VADC_GROUP_SetPowerMode>:

/* API which sets the power mode of analog converter of a VADC group */
void XMC_VADC_GROUP_SetPowerMode(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_GROUP_POWERMODE_t power_mode)
{
 80025c4:	b480      	push	{r7}
 80025c6:	b085      	sub	sp, #20
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
 80025cc:	460b      	mov	r3, r1
 80025ce:	70fb      	strb	r3, [r7, #3]
  uint32_t arbcfg;

  XMC_ASSERT("XMC_VADC_GROUP_SetPowerMode:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  XMC_ASSERT("XMC_VADC_GROUP_SetPowerMode:Wrong Power Mode", (power_mode <= XMC_VADC_GROUP_POWERMODE_NORMAL))

  arbcfg = group_ptr->ARBCFG;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80025d6:	60fb      	str	r3, [r7, #12]

  arbcfg &= ~((uint32_t)VADC_G_ARBCFG_ANONC_Msk);
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	f023 0303 	bic.w	r3, r3, #3
 80025de:	60fb      	str	r3, [r7, #12]
  arbcfg |= (uint32_t)power_mode;
 80025e0:	78fb      	ldrb	r3, [r7, #3]
 80025e2:	68fa      	ldr	r2, [r7, #12]
 80025e4:	4313      	orrs	r3, r2
 80025e6:	60fb      	str	r3, [r7, #12]

  group_ptr->ARBCFG = arbcfg;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	68fa      	ldr	r2, [r7, #12]
 80025ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 80025f0:	3714      	adds	r7, #20
 80025f2:	46bd      	mov	sp, r7
 80025f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f8:	4770      	bx	lr
 80025fa:	bf00      	nop

080025fc <XMC_VADC_GLOBAL_BackgroundInit>:
}
#endif

/* API to initialize background scan request source hardware */
void XMC_VADC_GLOBAL_BackgroundInit(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_BACKGROUND_CONFIG_t *config)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b086      	sub	sp, #24
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
 8002604:	6039      	str	r1, [r7, #0]
#endif

  XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundInit:Wrong Module Pointer", (global_ptr == VADC))

#if (XMC_VADC_GROUP_AVAILABLE ==1U)
  for (i = (uint8_t)0; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 8002606:	2300      	movs	r3, #0
 8002608:	75fb      	strb	r3, [r7, #23]
 800260a:	e009      	b.n	8002620 <XMC_VADC_GLOBAL_BackgroundInit+0x24>
  {
    XMC_VADC_GROUP_BackgroundDisableArbitrationSlot((XMC_VADC_GROUP_t *)g_xmc_vadc_group_array[i]);
 800260c:	7dfb      	ldrb	r3, [r7, #23]
 800260e:	4a39      	ldr	r2, [pc, #228]	; (80026f4 <XMC_VADC_GLOBAL_BackgroundInit+0xf8>)
 8002610:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002614:	4618      	mov	r0, r3
 8002616:	f7ff fe85 	bl	8002324 <XMC_VADC_GROUP_BackgroundDisableArbitrationSlot>
#endif

  XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundInit:Wrong Module Pointer", (global_ptr == VADC))

#if (XMC_VADC_GROUP_AVAILABLE ==1U)
  for (i = (uint8_t)0; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 800261a:	7dfb      	ldrb	r3, [r7, #23]
 800261c:	3301      	adds	r3, #1
 800261e:	75fb      	strb	r3, [r7, #23]
 8002620:	7dfb      	ldrb	r3, [r7, #23]
 8002622:	2b01      	cmp	r3, #1
 8002624:	d9f2      	bls.n	800260c <XMC_VADC_GLOBAL_BackgroundInit+0x10>
  {
    XMC_VADC_GROUP_BackgroundDisableArbitrationSlot((XMC_VADC_GROUP_t *)g_xmc_vadc_group_array[i]);
  }

  conv_start_mask = (uint32_t) 0;
 8002626:	2300      	movs	r3, #0
 8002628:	613b      	str	r3, [r7, #16]
  if (XMC_VADC_STARTMODE_WFS != (XMC_VADC_STARTMODE_t)config->conv_start_mode)
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	781b      	ldrb	r3, [r3, #0]
 800262e:	f003 0303 	and.w	r3, r3, #3
 8002632:	b2db      	uxtb	r3, r3
 8002634:	2b00      	cmp	r3, #0
 8002636:	d002      	beq.n	800263e <XMC_VADC_GLOBAL_BackgroundInit+0x42>
  {
    conv_start_mask = (uint32_t)VADC_G_ARBPR_CSM2_Msk;
 8002638:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800263c:	613b      	str	r3, [r7, #16]
  }

  for (i = 0U; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 800263e:	2300      	movs	r3, #0
 8002640:	75fb      	strb	r3, [r7, #23]
 8002642:	e021      	b.n	8002688 <XMC_VADC_GLOBAL_BackgroundInit+0x8c>
  {
    reg = g_xmc_vadc_group_array[i]->ARBPR;
 8002644:	7dfb      	ldrb	r3, [r7, #23]
 8002646:	4a2b      	ldr	r2, [pc, #172]	; (80026f4 <XMC_VADC_GLOBAL_BackgroundInit+0xf8>)
 8002648:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800264c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002650:	60fb      	str	r3, [r7, #12]

    reg &= ~(uint32_t)(VADC_G_ARBPR_PRIO2_Msk);
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002658:	60fb      	str	r3, [r7, #12]

    /* Program the priority of the request source */
    reg |= (uint32_t)((uint32_t)config->req_src_priority << VADC_G_ARBPR_PRIO2_Pos);
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	781b      	ldrb	r3, [r3, #0]
 800265e:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8002662:	b2db      	uxtb	r3, r3
 8002664:	021b      	lsls	r3, r3, #8
 8002666:	68fa      	ldr	r2, [r7, #12]
 8002668:	4313      	orrs	r3, r2
 800266a:	60fb      	str	r3, [r7, #12]

    /* Program the start mode */
    reg |= conv_start_mask;
 800266c:	68fa      	ldr	r2, [r7, #12]
 800266e:	693b      	ldr	r3, [r7, #16]
 8002670:	4313      	orrs	r3, r2
 8002672:	60fb      	str	r3, [r7, #12]

    g_xmc_vadc_group_array[i]->ARBPR = reg;
 8002674:	7dfb      	ldrb	r3, [r7, #23]
 8002676:	4a1f      	ldr	r2, [pc, #124]	; (80026f4 <XMC_VADC_GLOBAL_BackgroundInit+0xf8>)
 8002678:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800267c:	68fa      	ldr	r2, [r7, #12]
 800267e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  if (XMC_VADC_STARTMODE_WFS != (XMC_VADC_STARTMODE_t)config->conv_start_mode)
  {
    conv_start_mask = (uint32_t)VADC_G_ARBPR_CSM2_Msk;
  }

  for (i = 0U; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 8002682:	7dfb      	ldrb	r3, [r7, #23]
 8002684:	3301      	adds	r3, #1
 8002686:	75fb      	strb	r3, [r7, #23]
 8002688:	7dfb      	ldrb	r3, [r7, #23]
 800268a:	2b01      	cmp	r3, #1
 800268c:	d9da      	bls.n	8002644 <XMC_VADC_GLOBAL_BackgroundInit+0x48>

  }
#endif

  /* program BRSCTRL register */
  global_ptr->BRSCTRL = (uint32_t)(config->asctrl | (uint32_t)VADC_BRSCTRL_XTWC_Msk | (uint32_t)VADC_BRSCTRL_GTWC_Msk);
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002696:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800269a:	687a      	ldr	r2, [r7, #4]
 800269c:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

  /* program BRSMR register */
  global_ptr->BRSMR = (uint32_t)((config->asmr) | (uint32_t)((uint32_t)XMC_VADC_GATEMODE_IGNORE << VADC_BRSMR_ENGT_Pos));
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	689b      	ldr	r3, [r3, #8]
 80026a4:	f043 0201 	orr.w	r2, r3, #1
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

#if (XMC_VADC_GROUP_AVAILABLE ==1U)
  if (XMC_VADC_STARTMODE_CNR == (XMC_VADC_STARTMODE_t)(config->conv_start_mode))
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	781b      	ldrb	r3, [r3, #0]
 80026b2:	f003 0303 	and.w	r3, r3, #3
 80026b6:	b2db      	uxtb	r3, r3
 80026b8:	2b02      	cmp	r3, #2
 80026ba:	d107      	bne.n	80026cc <XMC_VADC_GLOBAL_BackgroundInit+0xd0>
  {
    global_ptr->BRSMR |= (uint32_t)VADC_BRSMR_RPTDIS_Msk;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80026c2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
  }
#endif

#if (XMC_VADC_GROUP_AVAILABLE ==1U)
  for (i = (uint8_t)0; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 80026cc:	2300      	movs	r3, #0
 80026ce:	75fb      	strb	r3, [r7, #23]
 80026d0:	e009      	b.n	80026e6 <XMC_VADC_GLOBAL_BackgroundInit+0xea>
  {
    XMC_VADC_GROUP_BackgroundEnableArbitrationSlot((XMC_VADC_GROUP_t *)g_xmc_vadc_group_array[i]);
 80026d2:	7dfb      	ldrb	r3, [r7, #23]
 80026d4:	4a07      	ldr	r2, [pc, #28]	; (80026f4 <XMC_VADC_GLOBAL_BackgroundInit+0xf8>)
 80026d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026da:	4618      	mov	r0, r3
 80026dc:	f7ff fe10 	bl	8002300 <XMC_VADC_GROUP_BackgroundEnableArbitrationSlot>
    global_ptr->BRSMR |= (uint32_t)VADC_BRSMR_RPTDIS_Msk;
  }
#endif

#if (XMC_VADC_GROUP_AVAILABLE ==1U)
  for (i = (uint8_t)0; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 80026e0:	7dfb      	ldrb	r3, [r7, #23]
 80026e2:	3301      	adds	r3, #1
 80026e4:	75fb      	strb	r3, [r7, #23]
 80026e6:	7dfb      	ldrb	r3, [r7, #23]
 80026e8:	2b01      	cmp	r3, #1
 80026ea:	d9f2      	bls.n	80026d2 <XMC_VADC_GLOBAL_BackgroundInit+0xd6>
  {
    XMC_VADC_GROUP_BackgroundEnableArbitrationSlot((XMC_VADC_GROUP_t *)g_xmc_vadc_group_array[i]);
  }
#endif

}
 80026ec:	3718      	adds	r7, #24
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bd80      	pop	{r7, pc}
 80026f2:	bf00      	nop
 80026f4:	08007b14 	.word	0x08007b14

080026f8 <XMC_VADC_GROUP_ChannelInit>:

#if (XMC_VADC_GROUP_AVAILABLE ==1U)
/* API to initialize a channel unit */
void XMC_VADC_GROUP_ChannelInit(XMC_VADC_GROUP_t *const group_ptr, const uint32_t ch_num,
                                const XMC_VADC_CHANNEL_CONFIG_t *config)
{
 80026f8:	b480      	push	{r7}
 80026fa:	b089      	sub	sp, #36	; 0x24
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	60f8      	str	r0, [r7, #12]
 8002700:	60b9      	str	r1, [r7, #8]
 8002702:	607a      	str	r2, [r7, #4]


  XMC_ASSERT("XMC_VADC_GROUP_ChannelInit:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  XMC_ASSERT("XMC_VADC_GROUP_ChannelInit:Wrong Channel Number", ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))

  prio  = (uint32_t)config->channel_priority;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	7b1b      	ldrb	r3, [r3, #12]
 8002708:	61bb      	str	r3, [r7, #24]

  /* Priority channel */
  ch_assign  = group_ptr->CHASS;
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002710:	617b      	str	r3, [r7, #20]
  ch_assign &= ~((uint32_t)((uint32_t)1 << ch_num));
 8002712:	68bb      	ldr	r3, [r7, #8]
 8002714:	2201      	movs	r2, #1
 8002716:	fa02 f303 	lsl.w	r3, r2, r3
 800271a:	43db      	mvns	r3, r3
 800271c:	697a      	ldr	r2, [r7, #20]
 800271e:	4013      	ands	r3, r2
 8002720:	617b      	str	r3, [r7, #20]
  ch_assign |= (uint32_t)(prio << ch_num);
 8002722:	68bb      	ldr	r3, [r7, #8]
 8002724:	69ba      	ldr	r2, [r7, #24]
 8002726:	fa02 f303 	lsl.w	r3, r2, r3
 800272a:	697a      	ldr	r2, [r7, #20]
 800272c:	4313      	orrs	r3, r2
 800272e:	617b      	str	r3, [r7, #20]
  group_ptr->CHASS = ch_assign;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	697a      	ldr	r2, [r7, #20]
 8002734:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Alias channel */
  if (config->alias_channel >= (int32_t)0)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	7b5b      	ldrb	r3, [r3, #13]
 800273c:	b25b      	sxtb	r3, r3
 800273e:	2b00      	cmp	r3, #0
 8002740:	db29      	blt.n	8002796 <XMC_VADC_GROUP_ChannelInit+0x9e>
  {
    mask = (uint32_t)0;
 8002742:	2300      	movs	r3, #0
 8002744:	61fb      	str	r3, [r7, #28]
    if ((uint32_t)1 == ch_num)
 8002746:	68bb      	ldr	r3, [r7, #8]
 8002748:	2b01      	cmp	r3, #1
 800274a:	d10a      	bne.n	8002762 <XMC_VADC_GROUP_ChannelInit+0x6a>
    {
      mask = VADC_G_ALIAS_ALIAS1_Pos;
 800274c:	2308      	movs	r3, #8
 800274e:	61fb      	str	r3, [r7, #28]
      group_ptr->ALIAS &= ~(uint32_t)(VADC_G_ALIAS_ALIAS1_Msk);
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002756:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8002760:	e00c      	b.n	800277c <XMC_VADC_GROUP_ChannelInit+0x84>
    }
    else if ((uint32_t)0 == ch_num)
 8002762:	68bb      	ldr	r3, [r7, #8]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d109      	bne.n	800277c <XMC_VADC_GROUP_ChannelInit+0x84>
    {
      mask = VADC_G_ALIAS_ALIAS0_Pos;
 8002768:	2300      	movs	r3, #0
 800276a:	61fb      	str	r3, [r7, #28]
      group_ptr->ALIAS &= ~(uint32_t)(VADC_G_ALIAS_ALIAS0_Msk);
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002772:	f023 021f 	bic.w	r2, r3, #31
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
    }

    group_ptr->ALIAS |= (uint32_t)(config->alias_channel << mask);
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002782:	687a      	ldr	r2, [r7, #4]
 8002784:	7b52      	ldrb	r2, [r2, #13]
 8002786:	b251      	sxtb	r1, r2
 8002788:	69fa      	ldr	r2, [r7, #28]
 800278a:	fa01 f202 	lsl.w	r2, r1, r2
 800278e:	431a      	orrs	r2, r3
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  }

  group_ptr->BFL |= config->bfl;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	431a      	orrs	r2, r3
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

#if (XMC_VADC_BOUNDARY_FLAG_SELECT == 1U)
  group_ptr->BFLC |= config->bflc;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	689b      	ldr	r3, [r3, #8]
 80027b2:	431a      	orrs	r2, r3
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
#endif
  /* Program the CHCTR register */
  group_ptr->CHCTR[ch_num] = config->chctr;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6819      	ldr	r1, [r3, #0]
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	68ba      	ldr	r2, [r7, #8]
 80027c2:	3280      	adds	r2, #128	; 0x80
 80027c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

}
 80027c8:	3724      	adds	r7, #36	; 0x24
 80027ca:	46bd      	mov	sp, r7
 80027cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d0:	4770      	bx	lr
 80027d2:	bf00      	nop

080027d4 <_sbrk>:

// defined in linker script
extern caddr_t Heap_Bank1_Start;
extern caddr_t Heap_Bank1_End;
caddr_t _sbrk(int nbytes)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b084      	sub	sp, #16
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  static caddr_t heap_ptr = NULL;
  caddr_t base;

  if (heap_ptr == NULL) {
 80027dc:	4b14      	ldr	r3, [pc, #80]	; (8002830 <_sbrk+0x5c>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d102      	bne.n	80027ea <_sbrk+0x16>
    heap_ptr = (caddr_t)&Heap_Bank1_Start;
 80027e4:	4b12      	ldr	r3, [pc, #72]	; (8002830 <_sbrk+0x5c>)
 80027e6:	4a13      	ldr	r2, [pc, #76]	; (8002834 <_sbrk+0x60>)
 80027e8:	601a      	str	r2, [r3, #0]
  }

  base = heap_ptr;
 80027ea:	4b11      	ldr	r3, [pc, #68]	; (8002830 <_sbrk+0x5c>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	60fb      	str	r3, [r7, #12]

  /* heap word alignment */
  nbytes = (nbytes + 3) & ~0x3U;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	3303      	adds	r3, #3
 80027f4:	f023 0303 	bic.w	r3, r3, #3
 80027f8:	607b      	str	r3, [r7, #4]
  if ((caddr_t)&Heap_Bank1_End > (heap_ptr + nbytes))
 80027fa:	4b0d      	ldr	r3, [pc, #52]	; (8002830 <_sbrk+0x5c>)
 80027fc:	681a      	ldr	r2, [r3, #0]
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	4413      	add	r3, r2
 8002802:	4a0d      	ldr	r2, [pc, #52]	; (8002838 <_sbrk+0x64>)
 8002804:	4293      	cmp	r3, r2
 8002806:	d207      	bcs.n	8002818 <_sbrk+0x44>
  {
    heap_ptr += nbytes;
 8002808:	4b09      	ldr	r3, [pc, #36]	; (8002830 <_sbrk+0x5c>)
 800280a:	681a      	ldr	r2, [r3, #0]
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	4413      	add	r3, r2
 8002810:	4a07      	ldr	r2, [pc, #28]	; (8002830 <_sbrk+0x5c>)
 8002812:	6013      	str	r3, [r2, #0]
    return (base);
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	e006      	b.n	8002826 <_sbrk+0x52>
  }
  else
  {
    /* Heap overflow */
    errno = ENOMEM;
 8002818:	f003 f836 	bl	8005888 <__errno>
 800281c:	4602      	mov	r2, r0
 800281e:	230c      	movs	r3, #12
 8002820:	6013      	str	r3, [r2, #0]
    return ((caddr_t)-1);
 8002822:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 8002826:	4618      	mov	r0, r3
 8002828:	3710      	adds	r7, #16
 800282a:	46bd      	mov	sp, r7
 800282c:	bd80      	pop	{r7, pc}
 800282e:	bf00      	nop
 8002830:	1fffcaac 	.word	0x1fffcaac
 8002834:	20000000 	.word	0x20000000
 8002838:	20005fc0 	.word	0x20005fc0

0800283c <_init>:

/* Init */
void _init(void)
{}
 800283c:	b480      	push	{r7}
 800283e:	af00      	add	r7, sp, #0
 8002840:	46bd      	mov	sp, r7
 8002842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002846:	4770      	bx	lr

08002848 <XMC_USIC_CH_TXFIFO_Flush>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_GetLevel() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_TXFIFO_Flush(XMC_USIC_CH_t *const channel)
{
 8002848:	b480      	push	{r7}
 800284a:	b083      	sub	sp, #12
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
  channel->TRBSCR = (uint32_t)USIC_CH_TRBSCR_FLUSHTB_Msk;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002856:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
}
 800285a:	370c      	adds	r7, #12
 800285c:	46bd      	mov	sp, r7
 800285e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002862:	4770      	bx	lr

08002864 <XMC_USIC_CH_TXFIFO_IsFull>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_IsEmpty(), XMC_USIC_CH_TXFIFO_Flush() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_TXFIFO_IsFull(XMC_USIC_CH_t *const channel)
{
 8002864:	b480      	push	{r7}
 8002866:	b083      	sub	sp, #12
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_TFULL_Msk);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8002872:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002876:	2b00      	cmp	r3, #0
 8002878:	bf14      	ite	ne
 800287a:	2301      	movne	r3, #1
 800287c:	2300      	moveq	r3, #0
 800287e:	b2db      	uxtb	r3, r3
}
 8002880:	4618      	mov	r0, r3
 8002882:	370c      	adds	r7, #12
 8002884:	46bd      	mov	sp, r7
 8002886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288a:	4770      	bx	lr

0800288c <XMC_USIC_CH_TXFIFO_IsEmpty>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_Flush(), XMC_USIC_CH_TXFIFO_PutData() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_TXFIFO_IsEmpty(XMC_USIC_CH_t *const channel)
{
 800288c:	b480      	push	{r7}
 800288e:	b083      	sub	sp, #12
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_TEMPTY_Msk);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800289a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800289e:	2b00      	cmp	r3, #0
 80028a0:	bf14      	ite	ne
 80028a2:	2301      	movne	r3, #1
 80028a4:	2300      	moveq	r3, #0
 80028a6:	b2db      	uxtb	r3, r3
}
 80028a8:	4618      	mov	r0, r3
 80028aa:	370c      	adds	r7, #12
 80028ac:	46bd      	mov	sp, r7
 80028ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b2:	4770      	bx	lr

080028b4 <UART_Init>:
 *          UART_SUCCESS: for successful UART initialization.<BR>
 *          UART_STATUS_FAILURE  : If UART initialization fails.<BR>
 *
 */
UART_STATUS_t UART_Init(const UART_t *const handle)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b084      	sub	sp, #16
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  UART_STATUS_t status = UART_STATUS_SUCCESS;
 80028bc:	2300      	movs	r3, #0
 80028be:	73fb      	strb	r3, [r7, #15]
  XMC_ASSERT("UART_Init : UART APP handle invalid", (((handle != NULL)&&
      (handle->config != NULL)) &&((handle->config->fptr_uart_config != NULL)&&
      (handle->runtime != NULL))));

  /*Initialize the multiplexers required for UART configuration*/
  status = handle->config->fptr_uart_config();
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	4798      	blx	r3
 80028c8:	4603      	mov	r3, r0
 80028ca:	73fb      	strb	r3, [r7, #15]

  return status;
 80028cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80028ce:	4618      	mov	r0, r3
 80028d0:	3710      	adds	r7, #16
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd80      	pop	{r7, pc}
 80028d6:	bf00      	nop

080028d8 <UART_Transmit>:
 *          UART_STATUS_BUFFER_INVALID: Either if buffer is NULL or count is 0.<BR>
 *          UART_STATUS_MODE_MISMATCH: If the configured mode is invalid.<BR>
 *
 */
UART_STATUS_t UART_Transmit(const UART_t *const handle, uint8_t* data_ptr, uint32_t count)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b086      	sub	sp, #24
 80028dc:	af00      	add	r7, sp, #0
 80028de:	60f8      	str	r0, [r7, #12]
 80028e0:	60b9      	str	r1, [r7, #8]
 80028e2:	607a      	str	r2, [r7, #4]
  UART_STATUS_t ret_stat = UART_STATUS_MODE_MISMATCH;
 80028e4:	2304      	movs	r3, #4
 80028e6:	75fb      	strb	r3, [r7, #23]

  switch(handle->config->transmit_mode)
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80028f0:	2b02      	cmp	r3, #2
 80028f2:	d000      	beq.n	80028f6 <UART_Transmit+0x1e>
  case UART_TRANSFER_MODE_DIRECT:
    ret_stat = UART_lStartTransmitPolling(handle, data_ptr, count);
    break;
#endif
  default:
    break;
 80028f4:	e007      	b.n	8002906 <UART_Transmit+0x2e>
    ret_stat = UART_StartTransmitDMA(handle, data_ptr, count);
    break;
#endif
#ifdef UART_TX_DIRECT_USED
  case UART_TRANSFER_MODE_DIRECT:
    ret_stat = UART_lStartTransmitPolling(handle, data_ptr, count);
 80028f6:	68f8      	ldr	r0, [r7, #12]
 80028f8:	68b9      	ldr	r1, [r7, #8]
 80028fa:	687a      	ldr	r2, [r7, #4]
 80028fc:	f000 f808 	bl	8002910 <UART_lStartTransmitPolling>
 8002900:	4603      	mov	r3, r0
 8002902:	75fb      	strb	r3, [r7, #23]
    break;
 8002904:	bf00      	nop
#endif
  default:
    break;
  }
  return ret_stat;
 8002906:	7dfb      	ldrb	r3, [r7, #23]
}
 8002908:	4618      	mov	r0, r3
 800290a:	3718      	adds	r7, #24
 800290c:	46bd      	mov	sp, r7
 800290e:	bd80      	pop	{r7, pc}

08002910 <UART_lStartTransmitPolling>:
 * cannot be aborted since it is blocking implementation. Based on FIFO selection,
 * either TBUF or IN register is updated with the data.
 *
 */
static UART_STATUS_t UART_lStartTransmitPolling(const UART_t *const handle, uint8_t* data_ptr, uint32_t count)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b086      	sub	sp, #24
 8002914:	af00      	add	r7, sp, #0
 8002916:	60f8      	str	r0, [r7, #12]
 8002918:	60b9      	str	r1, [r7, #8]
 800291a:	607a      	str	r2, [r7, #4]
  UART_STATUS_t ret_stat = UART_STATUS_BUFFER_INVALID;
 800291c:	2303      	movs	r3, #3
 800291e:	75fb      	strb	r3, [r7, #23]
  uint32_t loc_index;

  XMC_ASSERT("UART_Transmit: UART APP handle invalid", (((handle != NULL)&&
            (handle->runtime != NULL))&&(handle->config != NULL)));

  if ((data_ptr != NULL) && (count > 0U))
 8002920:	68bb      	ldr	r3, [r7, #8]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d058      	beq.n	80029d8 <UART_lStartTransmitPolling+0xc8>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d055      	beq.n	80029d8 <UART_lStartTransmitPolling+0xc8>
  {
    ret_stat = UART_STATUS_BUSY;
 800292c:	2302      	movs	r3, #2
 800292e:	75fb      	strb	r3, [r7, #23]
    if (handle->runtime->tx_busy == false)
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	689b      	ldr	r3, [r3, #8]
 8002934:	7e1b      	ldrb	r3, [r3, #24]
 8002936:	b2db      	uxtb	r3, r3
 8002938:	f083 0301 	eor.w	r3, r3, #1
 800293c:	b2db      	uxtb	r3, r3
 800293e:	2b00      	cmp	r3, #0
 8002940:	d04a      	beq.n	80029d8 <UART_lStartTransmitPolling+0xc8>
    {
      handle->runtime->tx_busy = true;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	689b      	ldr	r3, [r3, #8]
 8002946:	2201      	movs	r2, #1
 8002948:	761a      	strb	r2, [r3, #24]
      if (handle->config->tx_fifo_size != XMC_USIC_CH_FIFO_DISABLED)
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8002952:	2b00      	cmp	r3, #0
 8002954:	d004      	beq.n	8002960 <UART_lStartTransmitPolling+0x50>
      {
        /*Clear the transmit FIFO*/
        XMC_USIC_CH_TXFIFO_Flush(handle->channel);
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4618      	mov	r0, r3
 800295c:	f7ff ff74 	bl	8002848 <XMC_USIC_CH_TXFIFO_Flush>
      }
      /*Loop through each byte*/
      for (loc_index = 0U; loc_index < count; loc_index++)
 8002960:	2300      	movs	r3, #0
 8002962:	613b      	str	r3, [r7, #16]
 8002964:	e01c      	b.n	80029a0 <UART_lStartTransmitPolling+0x90>
      {
        /*If FIFO is enabled, FIFO filling status should be checked
         * to avoid overflow error*/
        if (handle->config->tx_fifo_size != XMC_USIC_CH_FIFO_DISABLED)
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800296e:	2b00      	cmp	r3, #0
 8002970:	d008      	beq.n	8002984 <UART_lStartTransmitPolling+0x74>
        {
          /*Wait if transmit FIFO is full*/
          while (XMC_USIC_CH_TXFIFO_IsFull(handle->channel) == true)
 8002972:	bf00      	nop
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4618      	mov	r0, r3
 800297a:	f7ff ff73 	bl	8002864 <XMC_USIC_CH_TXFIFO_IsFull>
 800297e:	4603      	mov	r3, r0
 8002980:	2b00      	cmp	r3, #0
 8002982:	d1f7      	bne.n	8002974 <UART_lStartTransmitPolling+0x64>
          {
          }
        }
        XMC_UART_CH_Transmit(handle->channel, (uint16_t)data_ptr[loc_index]);
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	6819      	ldr	r1, [r3, #0]
 8002988:	68ba      	ldr	r2, [r7, #8]
 800298a:	693b      	ldr	r3, [r7, #16]
 800298c:	4413      	add	r3, r2
 800298e:	781b      	ldrb	r3, [r3, #0]
 8002990:	b29b      	uxth	r3, r3
 8002992:	4608      	mov	r0, r1
 8002994:	4619      	mov	r1, r3
 8002996:	f7ff fa59 	bl	8001e4c <XMC_UART_CH_Transmit>
      {
        /*Clear the transmit FIFO*/
        XMC_USIC_CH_TXFIFO_Flush(handle->channel);
      }
      /*Loop through each byte*/
      for (loc_index = 0U; loc_index < count; loc_index++)
 800299a:	693b      	ldr	r3, [r7, #16]
 800299c:	3301      	adds	r3, #1
 800299e:	613b      	str	r3, [r7, #16]
 80029a0:	693a      	ldr	r2, [r7, #16]
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	429a      	cmp	r2, r3
 80029a6:	d3de      	bcc.n	8002966 <UART_lStartTransmitPolling+0x56>
          }
        }
        XMC_UART_CH_Transmit(handle->channel, (uint16_t)data_ptr[loc_index]);
      }

      if (handle->config->tx_fifo_size != XMC_USIC_CH_FIFO_DISABLED)
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d00b      	beq.n	80029cc <UART_lStartTransmitPolling+0xbc>
      {
        /*Wait till FIFO is empty*/
        while (XMC_USIC_CH_TXFIFO_IsEmpty(handle->channel) == false)
 80029b4:	bf00      	nop
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4618      	mov	r0, r3
 80029bc:	f7ff ff66 	bl	800288c <XMC_USIC_CH_TXFIFO_IsEmpty>
 80029c0:	4603      	mov	r3, r0
 80029c2:	f083 0301 	eor.w	r3, r3, #1
 80029c6:	b2db      	uxtb	r3, r3
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d1f4      	bne.n	80029b6 <UART_lStartTransmitPolling+0xa6>
        {
        }
      }
      ret_stat = UART_STATUS_SUCCESS;
 80029cc:	2300      	movs	r3, #0
 80029ce:	75fb      	strb	r3, [r7, #23]
      handle->runtime->tx_busy = false;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	689b      	ldr	r3, [r3, #8]
 80029d4:	2200      	movs	r2, #0
 80029d6:	761a      	strb	r2, [r3, #24]
    }
  }
  return ret_stat;
 80029d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80029da:	4618      	mov	r0, r3
 80029dc:	3718      	adds	r7, #24
 80029de:	46bd      	mov	sp, r7
 80029e0:	bd80      	pop	{r7, pc}
 80029e2:	bf00      	nop

080029e4 <XMC_USIC_CH_SetInputSource>:
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableInputSync(),
 * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INPUT_t input, const uint8_t source)
{
 80029e4:	b480      	push	{r7}
 80029e6:	b083      	sub	sp, #12
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
 80029ec:	460b      	mov	r3, r1
 80029ee:	70fb      	strb	r3, [r7, #3]
 80029f0:	4613      	mov	r3, r2
 80029f2:	70bb      	strb	r3, [r7, #2]
  channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
 80029f4:	78f8      	ldrb	r0, [r7, #3]
 80029f6:	78fb      	ldrb	r3, [r7, #3]
 80029f8:	687a      	ldr	r2, [r7, #4]
 80029fa:	3306      	adds	r3, #6
 80029fc:	009b      	lsls	r3, r3, #2
 80029fe:	4413      	add	r3, r2
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	f023 0207 	bic.w	r2, r3, #7
                                    ((uint32_t)source << USIC_CH_DXCR_DSEL_Pos));
 8002a06:	78bb      	ldrb	r3, [r7, #2]
 * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableInputSync(),
 * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INPUT_t input, const uint8_t source)
{
  channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
 8002a08:	431a      	orrs	r2, r3
 8002a0a:	6879      	ldr	r1, [r7, #4]
 8002a0c:	1d83      	adds	r3, r0, #6
 8002a0e:	009b      	lsls	r3, r3, #2
 8002a10:	440b      	add	r3, r1
 8002a12:	605a      	str	r2, [r3, #4]
                                    ((uint32_t)source << USIC_CH_DXCR_DSEL_Pos));
}
 8002a14:	370c      	adds	r7, #12
 8002a16:	46bd      	mov	sp, r7
 8002a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1c:	4770      	bx	lr
 8002a1e:	bf00      	nop

08002a20 <XMC_UART_CH_Init>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_UART_CH_Start(), XMC_UART_CH_Stop(), XMC_UART_CH_Transmit()\n\n\n
 */
__STATIC_INLINE void XMC_UART_CH_Init(XMC_USIC_CH_t *const channel, const XMC_UART_CH_CONFIG_t *const config)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b082      	sub	sp, #8
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
 8002a28:	6039      	str	r1, [r7, #0]
  XMC_UART_CH_InitEx(channel, config, true);
 8002a2a:	6878      	ldr	r0, [r7, #4]
 8002a2c:	6839      	ldr	r1, [r7, #0]
 8002a2e:	2201      	movs	r2, #1
 8002a30:	f7ff f9a2 	bl	8001d78 <XMC_UART_CH_InitEx>
}
 8002a34:	3708      	adds	r7, #8
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd80      	pop	{r7, pc}
 8002a3a:	bf00      	nop

08002a3c <XMC_UART_CH_Start>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_UART_CH_Stop(), XMC_UART_CH_Transmit()\n\n\n
 */
__STATIC_INLINE void XMC_UART_CH_Start(XMC_USIC_CH_t *const channel)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b083      	sub	sp, #12
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  channel->CCR = (uint32_t)(((channel->CCR) & (~USIC_CH_CCR_MODE_Msk)) | (uint32_t)XMC_USIC_CH_OPERATING_MODE_UART);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a48:	f023 030f 	bic.w	r3, r3, #15
 8002a4c:	f043 0202 	orr.w	r2, r3, #2
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	641a      	str	r2, [r3, #64]	; 0x40
}
 8002a54:	370c      	adds	r7, #12
 8002a56:	46bd      	mov	sp, r7
 8002a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5c:	4770      	bx	lr
 8002a5e:	bf00      	nop

08002a60 <UART_0_init>:
/**********************************************************************************************************************
 * API IMPLEMENTATION
 **********************************************************************************************************************/
/*Channel initialization function*/
UART_STATUS_t UART_0_init()
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b082      	sub	sp, #8
 8002a64:	af00      	add	r7, sp, #0
  UART_STATUS_t status = UART_STATUS_SUCCESS;
 8002a66:	2300      	movs	r3, #0
 8002a68:	71fb      	strb	r3, [r7, #7]
  /*Configure Receive pin*/
  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT1_BASE, 4U, &UART_0_rx_pin_config);
 8002a6a:	4816      	ldr	r0, [pc, #88]	; (8002ac4 <UART_0_init+0x64>)
 8002a6c:	2104      	movs	r1, #4
 8002a6e:	4a16      	ldr	r2, [pc, #88]	; (8002ac8 <UART_0_init+0x68>)
 8002a70:	f7fd fcaa 	bl	80003c8 <XMC_GPIO_Init>
  /* Initialize USIC channel in UART mode*/
  XMC_UART_CH_Init(XMC_UART0_CH0, &UART_0_channel_config);
 8002a74:	4815      	ldr	r0, [pc, #84]	; (8002acc <UART_0_init+0x6c>)
 8002a76:	4916      	ldr	r1, [pc, #88]	; (8002ad0 <UART_0_init+0x70>)
 8002a78:	f7ff ffd2 	bl	8002a20 <XMC_UART_CH_Init>
  /*Set input source path*/
  XMC_USIC_CH_SetInputSource(XMC_UART0_CH0, XMC_USIC_CH_INPUT_DX0, 1U);
 8002a7c:	4813      	ldr	r0, [pc, #76]	; (8002acc <UART_0_init+0x6c>)
 8002a7e:	2100      	movs	r1, #0
 8002a80:	2201      	movs	r2, #1
 8002a82:	f7ff ffaf 	bl	80029e4 <XMC_USIC_CH_SetInputSource>
  /*Configure transmit FIFO*/
  XMC_USIC_CH_TXFIFO_Configure(XMC_UART0_CH0,
 8002a86:	4811      	ldr	r0, [pc, #68]	; (8002acc <UART_0_init+0x6c>)
 8002a88:	2130      	movs	r1, #48	; 0x30
 8002a8a:	2204      	movs	r2, #4
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	f7ff fb49 	bl	8002124 <XMC_USIC_CH_TXFIFO_Configure>
        48U,
        XMC_USIC_CH_FIFO_SIZE_16WORDS,
        1U);
  /*Configure receive FIFO*/
  XMC_USIC_CH_RXFIFO_Configure(XMC_UART0_CH0,
 8002a92:	480e      	ldr	r0, [pc, #56]	; (8002acc <UART_0_init+0x6c>)
 8002a94:	2120      	movs	r1, #32
 8002a96:	2204      	movs	r2, #4
 8002a98:	230f      	movs	r3, #15
 8002a9a:	f7ff fb6b 	bl	8002174 <XMC_USIC_CH_RXFIFO_Configure>
        32U,
        XMC_USIC_CH_FIFO_SIZE_16WORDS,
        15U);
  /* Start UART */
  XMC_UART_CH_Start(XMC_UART0_CH0);
 8002a9e:	480b      	ldr	r0, [pc, #44]	; (8002acc <UART_0_init+0x6c>)
 8002aa0:	f7ff ffcc 	bl	8002a3c <XMC_UART_CH_Start>

  /* Initialize UART TX pin */
  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT1_BASE, 5U, &UART_0_tx_pin_config);
 8002aa4:	4807      	ldr	r0, [pc, #28]	; (8002ac4 <UART_0_init+0x64>)
 8002aa6:	2105      	movs	r1, #5
 8002aa8:	4a0a      	ldr	r2, [pc, #40]	; (8002ad4 <UART_0_init+0x74>)
 8002aaa:	f7fd fc8d 	bl	80003c8 <XMC_GPIO_Init>

  /*Set service request for UART protocol events*/
  XMC_USIC_CH_SetInterruptNodePointer(XMC_UART0_CH0, XMC_USIC_CH_INTERRUPT_NODE_POINTER_PROTOCOL,
 8002aae:	4807      	ldr	r0, [pc, #28]	; (8002acc <UART_0_init+0x6c>)
 8002ab0:	2110      	movs	r1, #16
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	f7ff fb88 	bl	80021c8 <XMC_USIC_CH_SetInterruptNodePointer>
     0U);
  return status;
 8002ab8:	79fb      	ldrb	r3, [r7, #7]
}
 8002aba:	4618      	mov	r0, r3
 8002abc:	3708      	adds	r7, #8
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bd80      	pop	{r7, pc}
 8002ac2:	bf00      	nop
 8002ac4:	48028100 	.word	0x48028100
 8002ac8:	08007b68 	.word	0x08007b68
 8002acc:	40030000 	.word	0x40030000
 8002ad0:	08007b1c 	.word	0x08007b1c
 8002ad4:	08007b28 	.word	0x08007b28

08002ad8 <XMC_CCU4_EnableClock>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_CCU4_DisableClock()<BR> XMC_CCU4_EnableMultipleClocks()<BR> XMC_CCU4_StartPrescaler()<BR> XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_EnableClock(XMC_CCU4_MODULE_t *const module, const uint8_t slice_number)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	b083      	sub	sp, #12
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
 8002ae0:	460b      	mov	r3, r1
 8002ae2:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU4_EnableClock:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  XMC_ASSERT("XMC_CCU4_EnableClock:Invalid Slice Number", (slice_number < 4U));

  module->GIDLC = ((uint32_t) 1) << slice_number;
 8002ae4:	78fb      	ldrb	r3, [r7, #3]
 8002ae6:	2201      	movs	r2, #1
 8002ae8:	409a      	lsls	r2, r3
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	60da      	str	r2, [r3, #12]
}
 8002aee:	370c      	adds	r7, #12
 8002af0:	46bd      	mov	sp, r7
 8002af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af6:	4770      	bx	lr

08002af8 <XMC_CCU4_SLICE_StartTimer>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_StopTimer().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_StartTimer(XMC_CCU4_SLICE_t *const slice)
{
 8002af8:	b480      	push	{r7}
 8002afa:	b083      	sub	sp, #12
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_SLICE_StartTimer:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->TCSET = CCU4_CC4_TCSET_TRBS_Msk;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2201      	movs	r2, #1
 8002b04:	60da      	str	r2, [r3, #12]
}
 8002b06:	370c      	adds	r7, #12
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0e:	4770      	bx	lr

08002b10 <XMC_CCU4_SLICE_ClearTimer>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_StartTimer().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_ClearTimer(XMC_CCU4_SLICE_t *const slice)
{
 8002b10:	b480      	push	{r7}
 8002b12:	b083      	sub	sp, #12
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_SLICE_ClearTimer:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->TCCLR = (uint32_t) CCU4_CC4_TCCLR_TCC_Msk;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2202      	movs	r2, #2
 8002b1c:	611a      	str	r2, [r3, #16]
}
 8002b1e:	370c      	adds	r7, #12
 8002b20:	46bd      	mov	sp, r7
 8002b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b26:	4770      	bx	lr

08002b28 <XMC_CCU4_SLICE_SetTimerPeriodMatch>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_GetTimerPeriodMatch().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_SetTimerPeriodMatch(XMC_CCU4_SLICE_t *const slice, const uint16_t period_val)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	b083      	sub	sp, #12
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
 8002b30:	460b      	mov	r3, r1
 8002b32:	807b      	strh	r3, [r7, #2]
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerPeriodMatch:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->PRS = (uint32_t) period_val;
 8002b34:	887a      	ldrh	r2, [r7, #2]
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	635a      	str	r2, [r3, #52]	; 0x34
}
 8002b3a:	370c      	adds	r7, #12
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b42:	4770      	bx	lr

08002b44 <XMC_CCU4_SLICE_SetTimerCompareMatch>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_GetTimerPeriodMatch().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_SetTimerCompareMatch(XMC_CCU4_SLICE_t *const slice, const uint16_t compare_val)
{
 8002b44:	b480      	push	{r7}
 8002b46:	b083      	sub	sp, #12
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
 8002b4c:	460b      	mov	r3, r1
 8002b4e:	807b      	strh	r3, [r7, #2]
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerCompareMatch:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->CRS = (uint32_t) compare_val;
 8002b50:	887a      	ldrh	r2, [r7, #2]
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8002b56:	370c      	adds	r7, #12
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5e:	4770      	bx	lr

08002b60 <XMC_CCU4_EnableShadowTransfer>:
 *
 * \par<b>Related APIs:</b><br>
 *  None.
 */
__STATIC_INLINE void XMC_CCU4_EnableShadowTransfer(XMC_CCU4_MODULE_t *const module, const uint32_t shadow_transfer_msk)
{
 8002b60:	b480      	push	{r7}
 8002b62:	b083      	sub	sp, #12
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
 8002b68:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU4_EnableShadowTransfer:Invalid Slice Pointer", XMC_CCU4_IsValidModule(module));
  module->GCSS = (uint32_t)shadow_transfer_msk;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	683a      	ldr	r2, [r7, #0]
 8002b6e:	611a      	str	r2, [r3, #16]
}
 8002b70:	370c      	adds	r7, #12
 8002b72:	46bd      	mov	sp, r7
 8002b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b78:	4770      	bx	lr
 8002b7a:	bf00      	nop

08002b7c <XMC_CCU4_SLICE_EnableEvent>:
 *  XMC_CCU4_SLICE_SetInterruptNode()<BR> XMC_CCU4_SLICE_EnableMultipleEvents()<BR> XMC_CCU4_SLICE_DisableEvent()<BR>
 *  XMC_CCU4_SLICE_DisableMultipleEvents().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_EnableEvent(XMC_CCU4_SLICE_t *const slice,
    const XMC_CCU4_SLICE_IRQ_ID_t event)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	b083      	sub	sp, #12
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
 8002b84:	460b      	mov	r3, r1
 8002b86:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU4_SLICE_EnableEvent:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_EnableEvent:Invalid SR event", XMC_CCU4_SLICE_CHECK_INTERRUPT(event));
  slice->INTE |= ((uint32_t) 1) << ((uint32_t) event);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8002b8e:	78fb      	ldrb	r3, [r7, #3]
 8002b90:	2101      	movs	r1, #1
 8002b92:	fa01 f303 	lsl.w	r3, r1, r3
 8002b96:	431a      	orrs	r2, r3
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
}
 8002b9e:	370c      	adds	r7, #12
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba6:	4770      	bx	lr

08002ba8 <TIMER_Init>:
/*
 * This function initializes a TIMER APP based on user configuration.
 *
 */
TIMER_STATUS_t TIMER_Init(TIMER_t* const handle_ptr)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b084      	sub	sp, #16
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
  TIMER_STATUS_t status;

  XMC_ASSERT("TIMER_Init:handle_ptr NULL" , (handle_ptr != NULL));

  status = TIMER_STATUS_SUCCESS;
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	73fb      	strb	r3, [r7, #15]
  /* Check for APP instance is initialized or not */
  if (false == handle_ptr->initialized)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8002bba:	f083 0301 	eor.w	r3, r3, #1
 8002bbe:	b2db      	uxtb	r3, r3
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d009      	beq.n	8002bd8 <TIMER_Init+0x30>
  {
#ifdef TIMER_CCU4_USED
    if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d104      	bne.n	8002bd8 <TIMER_Init+0x30>
    {
      /* Configure CCU4 timer for the required time tick settings */
      status = TIMER_CCU4_lInit(handle_ptr);
 8002bce:	6878      	ldr	r0, [r7, #4]
 8002bd0:	f000 f808 	bl	8002be4 <TIMER_CCU4_lInit>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	73fb      	strb	r3, [r7, #15]
      status = TIMER_CCU8_lInit(handle_ptr);
    }
#endif
  }

  return (status);
 8002bd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bda:	4618      	mov	r0, r3
 8002bdc:	3710      	adds	r7, #16
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bd80      	pop	{r7, pc}
 8002be2:	bf00      	nop

08002be4 <TIMER_CCU4_lInit>:
#ifdef TIMER_CCU4_USED
/*
 * This function configures timer ccu4 timer with required time tick value
 */
TIMER_STATUS_t TIMER_CCU4_lInit(TIMER_t* const handle_ptr)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b084      	sub	sp, #16
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  TIMER_STATUS_t status;
  /* Initialize the global registers */
  status = (TIMER_STATUS_t)GLOBAL_CCU4_Init(handle_ptr->global_ccu4_handler);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	691b      	ldr	r3, [r3, #16]
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	f000 ffe7 	bl	8003bc4 <GLOBAL_CCU4_Init>
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	73fb      	strb	r3, [r7, #15]

  /* Enable the clock for selected timer */
  XMC_CCU4_EnableClock(handle_ptr->global_ccu4_handler->module_ptr, handle_ptr->ccu4_slice_number);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	691b      	ldr	r3, [r3, #16]
 8002bfe:	689a      	ldr	r2, [r3, #8]
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	7e1b      	ldrb	r3, [r3, #24]
 8002c04:	4610      	mov	r0, r2
 8002c06:	4619      	mov	r1, r3
 8002c08:	f7ff ff66 	bl	8002ad8 <XMC_CCU4_EnableClock>
  /* Configure the timer with required settings */
  XMC_CCU4_SLICE_CompareInit(handle_ptr->ccu4_slice_ptr, handle_ptr->ccu4_slice_config_ptr);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	695a      	ldr	r2, [r3, #20]
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	69db      	ldr	r3, [r3, #28]
 8002c14:	4610      	mov	r0, r2
 8002c16:	4619      	mov	r1, r3
 8002c18:	f7fe fd50 	bl	80016bc <XMC_CCU4_SLICE_CompareInit>
  /* programs the timer period and compare register according to time interval value and do the shadow transfer */
  TIMER_CCU4_lShadowTransfer(handle_ptr);
 8002c1c:	6878      	ldr	r0, [r7, #4]
 8002c1e:	f000 f82d 	bl	8002c7c <TIMER_CCU4_lShadowTransfer>

#ifdef  TIMER_INTERRUPT
  if (true == handle_ptr->period_match_enable)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d00f      	beq.n	8002c4c <TIMER_CCU4_lInit+0x68>
  {
    /* Binds a period match event to an NVIC node  */
    XMC_CCU4_SLICE_SetInterruptNode(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH,
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	695a      	ldr	r2, [r3, #20]
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002c36:	4610      	mov	r0, r2
 8002c38:	2100      	movs	r1, #0
 8002c3a:	461a      	mov	r2, r3
 8002c3c:	f7fe fd74 	bl	8001728 <XMC_CCU4_SLICE_SetInterruptNode>
                                    handle_ptr->ccu4_period_match_node);
    /* Enables a timer(period match) event  */
    XMC_CCU4_SLICE_EnableEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	695b      	ldr	r3, [r3, #20]
 8002c44:	4618      	mov	r0, r3
 8002c46:	2100      	movs	r1, #0
 8002c48:	f7ff ff98 	bl	8002b7c <XMC_CCU4_SLICE_EnableEvent>
  }
#endif
  /* Clears the timer register */
  XMC_CCU4_SLICE_ClearTimer(handle_ptr->ccu4_slice_ptr);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	695b      	ldr	r3, [r3, #20]
 8002c50:	4618      	mov	r0, r3
 8002c52:	f7ff ff5d 	bl	8002b10 <XMC_CCU4_SLICE_ClearTimer>

  /* update the initialization flag as true for particular instance*/
  handle_ptr->initialized = true;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2201      	movs	r2, #1
 8002c5a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  /* Check whether the start of the timer is enabled during initialization or not */
  if (handle_ptr->start_control == true)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d004      	beq.n	8002c72 <TIMER_CCU4_lInit+0x8e>
  {
    /* Start the timer */
    XMC_CCU4_SLICE_StartTimer(handle_ptr->ccu4_slice_ptr);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	695b      	ldr	r3, [r3, #20]
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	f7ff ff43 	bl	8002af8 <XMC_CCU4_SLICE_StartTimer>
  }

  return (status);
 8002c72:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c74:	4618      	mov	r0, r3
 8002c76:	3710      	adds	r7, #16
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bd80      	pop	{r7, pc}

08002c7c <TIMER_CCU4_lShadowTransfer>:

/*
 * This function configures timer period and compare values and triggers the shadow transfer operation
 */
void TIMER_CCU4_lShadowTransfer(TIMER_t* const handle_ptr)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b082      	sub	sp, #8
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
  /* programs the timer period register according to time interval value */
  XMC_CCU4_SLICE_SetTimerPeriodMatch(handle_ptr->ccu4_slice_ptr, handle_ptr->period_value);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	695a      	ldr	r2, [r3, #20]
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8002c8c:	4610      	mov	r0, r2
 8002c8e:	4619      	mov	r1, r3
 8002c90:	f7ff ff4a 	bl	8002b28 <XMC_CCU4_SLICE_SetTimerPeriodMatch>
  /* programs the timer compare register for 50% duty cycle */
  XMC_CCU4_SLICE_SetTimerCompareMatch(handle_ptr->ccu4_slice_ptr, TIMER_CMP_100_DUTY);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	695b      	ldr	r3, [r3, #20]
 8002c98:	4618      	mov	r0, r3
 8002c9a:	2100      	movs	r1, #0
 8002c9c:	f7ff ff52 	bl	8002b44 <XMC_CCU4_SLICE_SetTimerCompareMatch>
  /* Transfers value from shadow timer registers to actual timer registers */
  XMC_CCU4_EnableShadowTransfer(handle_ptr->global_ccu4_handler->module_ptr, handle_ptr->shadow_mask);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	691b      	ldr	r3, [r3, #16]
 8002ca4:	689a      	ldr	r2, [r3, #8]
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	68db      	ldr	r3, [r3, #12]
 8002caa:	4610      	mov	r0, r2
 8002cac:	4619      	mov	r1, r3
 8002cae:	f7ff ff57 	bl	8002b60 <XMC_CCU4_EnableShadowTransfer>
}
 8002cb2:	3708      	adds	r7, #8
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bd80      	pop	{r7, pc}

08002cb8 <XMC_CCU4_EnableClock>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_CCU4_DisableClock()<BR> XMC_CCU4_EnableMultipleClocks()<BR> XMC_CCU4_StartPrescaler()<BR> XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_EnableClock(XMC_CCU4_MODULE_t *const module, const uint8_t slice_number)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	b083      	sub	sp, #12
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
 8002cc0:	460b      	mov	r3, r1
 8002cc2:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU4_EnableClock:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  XMC_ASSERT("XMC_CCU4_EnableClock:Invalid Slice Number", (slice_number < 4U));

  module->GIDLC = ((uint32_t) 1) << slice_number;
 8002cc4:	78fb      	ldrb	r3, [r7, #3]
 8002cc6:	2201      	movs	r2, #1
 8002cc8:	409a      	lsls	r2, r3
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	60da      	str	r2, [r3, #12]
}
 8002cce:	370c      	adds	r7, #12
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd6:	4770      	bx	lr

08002cd8 <XMC_CCU4_SLICE_StartTimer>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_StopTimer().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_StartTimer(XMC_CCU4_SLICE_t *const slice)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	b083      	sub	sp, #12
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_SLICE_StartTimer:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->TCSET = CCU4_CC4_TCSET_TRBS_Msk;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2201      	movs	r2, #1
 8002ce4:	60da      	str	r2, [r3, #12]
}
 8002ce6:	370c      	adds	r7, #12
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cee:	4770      	bx	lr

08002cf0 <XMC_CCU4_SLICE_SetTimerPeriodMatch>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_GetTimerPeriodMatch().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_SetTimerPeriodMatch(XMC_CCU4_SLICE_t *const slice, const uint16_t period_val)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	b083      	sub	sp, #12
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
 8002cf8:	460b      	mov	r3, r1
 8002cfa:	807b      	strh	r3, [r7, #2]
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerPeriodMatch:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->PRS = (uint32_t) period_val;
 8002cfc:	887a      	ldrh	r2, [r7, #2]
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	635a      	str	r2, [r3, #52]	; 0x34
}
 8002d02:	370c      	adds	r7, #12
 8002d04:	46bd      	mov	sp, r7
 8002d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0a:	4770      	bx	lr

08002d0c <XMC_CCU4_SLICE_SetTimerCompareMatch>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_GetTimerPeriodMatch().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_SetTimerCompareMatch(XMC_CCU4_SLICE_t *const slice, const uint16_t compare_val)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	b083      	sub	sp, #12
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
 8002d14:	460b      	mov	r3, r1
 8002d16:	807b      	strh	r3, [r7, #2]
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerCompareMatch:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->CRS = (uint32_t) compare_val;
 8002d18:	887a      	ldrh	r2, [r7, #2]
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8002d1e:	370c      	adds	r7, #12
 8002d20:	46bd      	mov	sp, r7
 8002d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d26:	4770      	bx	lr

08002d28 <XMC_CCU4_EnableShadowTransfer>:
 *
 * \par<b>Related APIs:</b><br>
 *  None.
 */
__STATIC_INLINE void XMC_CCU4_EnableShadowTransfer(XMC_CCU4_MODULE_t *const module, const uint32_t shadow_transfer_msk)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	b083      	sub	sp, #12
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
 8002d30:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU4_EnableShadowTransfer:Invalid Slice Pointer", XMC_CCU4_IsValidModule(module));
  module->GCSS = (uint32_t)shadow_transfer_msk;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	683a      	ldr	r2, [r7, #0]
 8002d36:	611a      	str	r2, [r3, #16]
}
 8002d38:	370c      	adds	r7, #12
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d40:	4770      	bx	lr
 8002d42:	bf00      	nop

08002d44 <XMC_CCU4_SLICE_EnableEvent>:
 *  XMC_CCU4_SLICE_SetInterruptNode()<BR> XMC_CCU4_SLICE_EnableMultipleEvents()<BR> XMC_CCU4_SLICE_DisableEvent()<BR>
 *  XMC_CCU4_SLICE_DisableMultipleEvents().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_EnableEvent(XMC_CCU4_SLICE_t *const slice,
    const XMC_CCU4_SLICE_IRQ_ID_t event)
{
 8002d44:	b480      	push	{r7}
 8002d46:	b083      	sub	sp, #12
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
 8002d4c:	460b      	mov	r3, r1
 8002d4e:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU4_SLICE_EnableEvent:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_EnableEvent:Invalid SR event", XMC_CCU4_SLICE_CHECK_INTERRUPT(event));
  slice->INTE |= ((uint32_t) 1) << ((uint32_t) event);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8002d56:	78fb      	ldrb	r3, [r7, #3]
 8002d58:	2101      	movs	r1, #1
 8002d5a:	fa01 f303 	lsl.w	r3, r1, r3
 8002d5e:	431a      	orrs	r2, r3
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
}
 8002d66:	370c      	adds	r7, #12
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6e:	4770      	bx	lr

08002d70 <PWM_lCCU4_Init>:

#ifdef PWM_SLICE_USED_CCU4

/*Initialize the APP and CCU4 slice. */
PWM_STATUS_t PWM_lCCU4_Init(PWM_t *const handle_ptr)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b084      	sub	sp, #16
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
  PWM_STATUS_t status = PWM_STATUS_FAILURE;
 8002d78:	2301      	movs	r3, #1
 8002d7a:	73fb      	strb	r3, [r7, #15]

  XMC_ASSERT("PWM_lCCU4_Init:Invalid handle_ptr" , (handle_ptr != NULL));

  if (PWM_STATUS_UNINITIALIZED == handle_ptr->state)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8002d82:	2b02      	cmp	r3, #2
 8002d84:	d14d      	bne.n	8002e22 <PWM_lCCU4_Init+0xb2>
  {
    /* Initialize consumed Apps */
    status = (PWM_STATUS_t)GLOBAL_CCU4_Init(handle_ptr->global_ccu4_handle);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	f000 ff1a 	bl	8003bc4 <GLOBAL_CCU4_Init>
 8002d90:	4603      	mov	r3, r0
 8002d92:	73fb      	strb	r3, [r7, #15]

    /*Initialize CCU4 slice */
    if (PWM_STATUS_SUCCESS == status)/*check GLOBAL_CCU4_Init status*/
 8002d94:	7bfb      	ldrb	r3, [r7, #15]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d13f      	bne.n	8002e1a <PWM_lCCU4_Init+0xaa>
    {
      XMC_DEBUG("PWM_lCCU4_Init:Initilizing Slice")
      XMC_CCU4_SLICE_CompareInit(handle_ptr->ccu4_slice_ptr, handle_ptr->ccu4_slice_config_ptr);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	689a      	ldr	r2, [r3, #8]
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	68db      	ldr	r3, [r3, #12]
 8002da2:	4610      	mov	r0, r2
 8002da4:	4619      	mov	r1, r3
 8002da6:	f7fe fc89 	bl	80016bc <XMC_CCU4_SLICE_CompareInit>

      /* Set the period and compare register values */
      XMC_CCU4_SLICE_SetTimerPeriodMatch(handle_ptr->ccu4_slice_ptr,
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	689a      	ldr	r2, [r3, #8]
    		                             (uint16_t)handle_ptr->period_value);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	69db      	ldr	r3, [r3, #28]
    {
      XMC_DEBUG("PWM_lCCU4_Init:Initilizing Slice")
      XMC_CCU4_SLICE_CompareInit(handle_ptr->ccu4_slice_ptr, handle_ptr->ccu4_slice_config_ptr);

      /* Set the period and compare register values */
      XMC_CCU4_SLICE_SetTimerPeriodMatch(handle_ptr->ccu4_slice_ptr,
 8002db2:	b29b      	uxth	r3, r3
 8002db4:	4610      	mov	r0, r2
 8002db6:	4619      	mov	r1, r3
 8002db8:	f7ff ff9a 	bl	8002cf0 <XMC_CCU4_SLICE_SetTimerPeriodMatch>
    		                             (uint16_t)handle_ptr->period_value);

      XMC_CCU4_SLICE_SetTimerCompareMatch(handle_ptr->ccu4_slice_ptr,
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	689a      	ldr	r2, [r3, #8]
    		                              (uint16_t)handle_ptr->compare_value);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	699b      	ldr	r3, [r3, #24]

      /* Set the period and compare register values */
      XMC_CCU4_SLICE_SetTimerPeriodMatch(handle_ptr->ccu4_slice_ptr,
    		                             (uint16_t)handle_ptr->period_value);

      XMC_CCU4_SLICE_SetTimerCompareMatch(handle_ptr->ccu4_slice_ptr,
 8002dc4:	b29b      	uxth	r3, r3
 8002dc6:	4610      	mov	r0, r2
 8002dc8:	4619      	mov	r1, r3
 8002dca:	f7ff ff9f 	bl	8002d0c <XMC_CCU4_SLICE_SetTimerCompareMatch>
    		                              (uint16_t)handle_ptr->compare_value);

      XMC_CCU4_EnableShadowTransfer(handle_ptr->ccu4_kernel_ptr, handle_ptr->shadow_mask);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	685a      	ldr	r2, [r3, #4]
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dd6:	4610      	mov	r0, r2
 8002dd8:	4619      	mov	r1, r3
 8002dda:	f7ff ffa5 	bl	8002d28 <XMC_CCU4_EnableShadowTransfer>

      /* Initialize interrupts */
      PWM_lCCU4_ConfigInterrupts(handle_ptr);
 8002dde:	6878      	ldr	r0, [r7, #4]
 8002de0:	f000 f824 	bl	8002e2c <PWM_lCCU4_ConfigInterrupts>

      XMC_GPIO_Init(handle_ptr->gpio_out_port,handle_ptr->gpio_out_pin,
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6919      	ldr	r1, [r3, #16]
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	695b      	ldr	r3, [r3, #20]
 8002df2:	4608      	mov	r0, r1
 8002df4:	4611      	mov	r1, r2
 8002df6:	461a      	mov	r2, r3
 8002df8:	f7fd fae6 	bl	80003c8 <XMC_GPIO_Init>
    		        handle_ptr->gpio_out_config);

      handle_ptr->state = PWM_STATUS_SUCCESS;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2200      	movs	r2, #0
 8002e00:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

      /* Start the PWM generation if start at initialization is enabled */
      if ((bool) true == handle_ptr->start_control)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d002      	beq.n	8002e14 <PWM_lCCU4_Init+0xa4>
      {
        PWM_Start(handle_ptr);
 8002e0e:	6878      	ldr	r0, [r7, #4]
 8002e10:	f000 f8b8 	bl	8002f84 <PWM_Start>
      }
      status = PWM_STATUS_SUCCESS;
 8002e14:	2300      	movs	r3, #0
 8002e16:	73fb      	strb	r3, [r7, #15]
 8002e18:	e003      	b.n	8002e22 <PWM_lCCU4_Init+0xb2>
    }
    else
    {
      handle_ptr->state = PWM_STATUS_UNINITIALIZED;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2202      	movs	r2, #2
 8002e1e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    }

  }
  return (status);
 8002e22:	7bfb      	ldrb	r3, [r7, #15]
} /* end of PWM_lCCU4_Init() api */
 8002e24:	4618      	mov	r0, r3
 8002e26:	3710      	adds	r7, #16
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bd80      	pop	{r7, pc}

08002e2c <PWM_lCCU4_ConfigInterrupts>:

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/* Initialize interrupts */
void PWM_lCCU4_ConfigInterrupts(PWM_t *const handle_ptr)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b082      	sub	sp, #8
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
  if ((bool) true == handle_ptr->period_match_enable)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d00f      	beq.n	8002e5e <PWM_lCCU4_ConfigInterrupts+0x32>
  {
    XMC_DEBUG("PWM_lCCU4_ConfigInterrupts:period match enable")
    XMC_CCU4_SLICE_EnableEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	689b      	ldr	r3, [r3, #8]
 8002e42:	4618      	mov	r0, r3
 8002e44:	2100      	movs	r1, #0
 8002e46:	f7ff ff7d 	bl	8002d44 <XMC_CCU4_SLICE_EnableEvent>

    /* Bind event to Service Request Node to period match event*/
    XMC_CCU4_SLICE_SetInterruptNode(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH,
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	689a      	ldr	r2, [r3, #8]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8002e54:	4610      	mov	r0, r2
 8002e56:	2100      	movs	r1, #0
 8002e58:	461a      	mov	r2, r3
 8002e5a:	f7fe fc65 	bl	8001728 <XMC_CCU4_SLICE_SetInterruptNode>
                                    handle_ptr->ccu4_slice_period_match_node);
  }

  if ((bool) true == handle_ptr->compare_match_enable)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d00f      	beq.n	8002e88 <PWM_lCCU4_ConfigInterrupts+0x5c>
  {
    XMC_DEBUG("PWM_lCCU4_ConfigInterrupts:compare match enable")
    XMC_CCU4_SLICE_EnableEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_UP);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	689b      	ldr	r3, [r3, #8]
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	2102      	movs	r1, #2
 8002e70:	f7ff ff68 	bl	8002d44 <XMC_CCU4_SLICE_EnableEvent>

    /* Bind event to Service Request Node to compare match event */
    XMC_CCU4_SLICE_SetInterruptNode(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_UP,
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	689a      	ldr	r2, [r3, #8]
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8002e7e:	4610      	mov	r0, r2
 8002e80:	2102      	movs	r1, #2
 8002e82:	461a      	mov	r2, r3
 8002e84:	f7fe fc50 	bl	8001728 <XMC_CCU4_SLICE_SetInterruptNode>
                                    handle_ptr->ccu4_slice_compare_match_node);
  }
}
 8002e88:	3708      	adds	r7, #8
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bd80      	pop	{r7, pc}
 8002e8e:	bf00      	nop

08002e90 <PWM_lCCU4_Start>:

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/*Starts the CCU4 slice. */
void PWM_lCCU4_Start(PWM_t *const handle_ptr)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b082      	sub	sp, #8
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
  if ((PWM_STATUS_SUCCESS == handle_ptr->state) || (PWM_STATUS_STOPPED == handle_ptr->state))
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d004      	beq.n	8002eac <PWM_lCCU4_Start+0x1c>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8002ea8:	2b04      	cmp	r3, #4
 8002eaa:	d111      	bne.n	8002ed0 <PWM_lCCU4_Start+0x40>
  {
    /* Clears the IDLE mode for the slice */
    XMC_CCU4_EnableClock(handle_ptr->ccu4_kernel_ptr,handle_ptr->slice_number);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	685a      	ldr	r2, [r3, #4]
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8002eb6:	4610      	mov	r0, r2
 8002eb8:	4619      	mov	r1, r3
 8002eba:	f7ff fefd 	bl	8002cb8 <XMC_CCU4_EnableClock>
    XMC_CCU4_SLICE_StartTimer(handle_ptr->ccu4_slice_ptr);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	689b      	ldr	r3, [r3, #8]
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	f7ff ff08 	bl	8002cd8 <XMC_CCU4_SLICE_StartTimer>

    handle_ptr->state = PWM_STATUS_RUNNING;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2203      	movs	r2, #3
 8002ecc:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    XMC_DEBUG("PWM_lCCU4_Start:start PWM")
  }
} /* end of PWM_lCCU4_Start() api */
 8002ed0:	3708      	adds	r7, #8
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bd80      	pop	{r7, pc}
 8002ed6:	bf00      	nop

08002ed8 <PWM_lCCU4_SetDutyCycle>:
} /* end of PWM_lCCU4_Stop() api */

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/*Sets the duty cycle for CCU4 slice. */
PWM_STATUS_t PWM_lCCU4_SetDutyCycle(PWM_t *const handle_ptr, uint32_t duty_cycle)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b086      	sub	sp, #24
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
 8002ee0:	6039      	str	r1, [r7, #0]
  uint32_t compare;
  PWM_STATUS_t status;

  XMC_ASSERT("PWM_lCCU4_SetDutyCycle:Invalid duty_cycle " , ((duty_cycle >= 0) && (duty_cycle <= PWM_MAX_DUTY_CYCLE)));

  status = PWM_STATUS_FAILURE;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	75fb      	strb	r3, [r7, #23]
  if (PWM_STATUS_UNINITIALIZED != handle_ptr->state)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8002eec:	2b02      	cmp	r3, #2
 8002eee:	d02c      	beq.n	8002f4a <PWM_lCCU4_SetDutyCycle+0x72>
  {
    /* Duty cycle needs between 0 and 10000 */
    if (duty_cycle <= PWM_MAX_DUTY_CYCLE)
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	f242 7210 	movw	r2, #10000	; 0x2710
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d827      	bhi.n	8002f4a <PWM_lCCU4_SetDutyCycle+0x72>
    {
      /* period = (PR + 1) */
      period = (uint32_t)handle_ptr->period_value + 1U;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	69db      	ldr	r3, [r3, #28]
 8002efe:	3301      	adds	r3, #1
 8002f00:	613b      	str	r3, [r7, #16]

      /* Duty Cycle(symmetric) = (PR-CR1)+1 / period */
      compare = ((period * (PWM_MAX_DUTY_CYCLE - duty_cycle)) / ((uint32_t) 100 * PWM_DUTY_CYCLE_SCALE));
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	f5c3 531c 	rsb	r3, r3, #9984	; 0x2700
 8002f08:	3310      	adds	r3, #16
 8002f0a:	693a      	ldr	r2, [r7, #16]
 8002f0c:	fb02 f303 	mul.w	r3, r2, r3
 8002f10:	4a10      	ldr	r2, [pc, #64]	; (8002f54 <PWM_lCCU4_SetDutyCycle+0x7c>)
 8002f12:	fba2 2303 	umull	r2, r3, r2, r3
 8002f16:	0b5b      	lsrs	r3, r3, #13
 8002f18:	60fb      	str	r3, [r7, #12]

      handle_ptr->compare_value = compare;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	68fa      	ldr	r2, [r7, #12]
 8002f1e:	619a      	str	r2, [r3, #24]
      handle_ptr->duty_cycle = duty_cycle;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	683a      	ldr	r2, [r7, #0]
 8002f24:	621a      	str	r2, [r3, #32]

      XMC_CCU4_SLICE_SetTimerCompareMatch(handle_ptr->ccu4_slice_ptr, (uint16_t)compare);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	689a      	ldr	r2, [r3, #8]
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	b29b      	uxth	r3, r3
 8002f2e:	4610      	mov	r0, r2
 8002f30:	4619      	mov	r1, r3
 8002f32:	f7ff feeb 	bl	8002d0c <XMC_CCU4_SLICE_SetTimerCompareMatch>
      XMC_CCU4_EnableShadowTransfer(handle_ptr->ccu4_kernel_ptr, handle_ptr->shadow_mask);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	685a      	ldr	r2, [r3, #4]
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f3e:	4610      	mov	r0, r2
 8002f40:	4619      	mov	r1, r3
 8002f42:	f7ff fef1 	bl	8002d28 <XMC_CCU4_EnableShadowTransfer>
      status = PWM_STATUS_SUCCESS;
 8002f46:	2300      	movs	r3, #0
 8002f48:	75fb      	strb	r3, [r7, #23]
    }
  }

  XMC_DEBUG("PWM_lCCU4_SetDutyCycle:dutycycle set")
  return (status);
 8002f4a:	7dfb      	ldrb	r3, [r7, #23]
} /* end of PWM_lCCU4_SetDutyCycle() api */
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	3718      	adds	r7, #24
 8002f50:	46bd      	mov	sp, r7
 8002f52:	bd80      	pop	{r7, pc}
 8002f54:	d1b71759 	.word	0xd1b71759

08002f58 <PWM_Init>:
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/* This function initializes the app */
PWM_STATUS_t PWM_Init(PWM_t *const handle_ptr)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b084      	sub	sp, #16
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
  PWM_STATUS_t status;
  status = PWM_STATUS_FAILURE;
 8002f60:	2301      	movs	r3, #1
 8002f62:	73fb      	strb	r3, [r7, #15]

  XMC_ASSERT("PWM_Init:Invalid handle_ptr" , (handle_ptr != NULL));

#ifdef PWM_SLICE_USED_CCU4
  if (PWM_TIMER_SLICE_CCU4 == handle_ptr->timer_type)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d104      	bne.n	8002f78 <PWM_Init+0x20>
  {
    status = PWM_lCCU4_Init(handle_ptr);
 8002f6e:	6878      	ldr	r0, [r7, #4]
 8002f70:	f7ff fefe 	bl	8002d70 <PWM_lCCU4_Init>
 8002f74:	4603      	mov	r3, r0
 8002f76:	73fb      	strb	r3, [r7, #15]
  {
    status = PWM_lCCU8_Init(handle_ptr);
  }
#endif

  return (status);
 8002f78:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	3710      	adds	r7, #16
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bd80      	pop	{r7, pc}
 8002f82:	bf00      	nop

08002f84 <PWM_Start>:

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/* This function starts the PWM generation. This needs to be called even if external start is configured.*/
void PWM_Start(PWM_t *const handle_ptr)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b082      	sub	sp, #8
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("PWM_Start:Invalid handle_ptr" , (handle_ptr != NULL));

#ifdef PWM_SLICE_USED_CCU4
  if (PWM_TIMER_SLICE_CCU4 == handle_ptr->timer_type)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d102      	bne.n	8002f9c <PWM_Start+0x18>
  {
    PWM_lCCU4_Start(handle_ptr);
 8002f96:	6878      	ldr	r0, [r7, #4]
 8002f98:	f7ff ff7a 	bl	8002e90 <PWM_lCCU4_Start>
  if (PWM_TIMER_SLICE_CCU8 == handle_ptr->timer_type)
  {
    PWM_lCCU8_Start(handle_ptr);
  }
#endif
}
 8002f9c:	3708      	adds	r7, #8
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bd80      	pop	{r7, pc}
 8002fa2:	bf00      	nop

08002fa4 <PWM_SetDutyCycle>:
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/*This function is used to set the duty cycle (uint32_t) of the PWM waveform  */
PWM_STATUS_t PWM_SetDutyCycle(PWM_t *const handle_ptr, uint32_t duty_cycle)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b084      	sub	sp, #16
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
 8002fac:	6039      	str	r1, [r7, #0]
  PWM_STATUS_t status;
  status = PWM_STATUS_FAILURE;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	73fb      	strb	r3, [r7, #15]

  XMC_ASSERT("PWM_SetDutyCycle:Invalid handle_ptr" , (handle_ptr != NULL));

#ifdef PWM_SLICE_USED_CCU4
  if (PWM_TIMER_SLICE_CCU4 == handle_ptr->timer_type)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d105      	bne.n	8002fc8 <PWM_SetDutyCycle+0x24>
  {
    status = PWM_lCCU4_SetDutyCycle(handle_ptr, duty_cycle);
 8002fbc:	6878      	ldr	r0, [r7, #4]
 8002fbe:	6839      	ldr	r1, [r7, #0]
 8002fc0:	f7ff ff8a 	bl	8002ed8 <PWM_lCCU4_SetDutyCycle>
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	73fb      	strb	r3, [r7, #15]
  if (PWM_TIMER_SLICE_CCU8 == handle_ptr->timer_type)
  {
    status = PWM_lCCU8_SetDutyCycle(handle_ptr, duty_cycle);
  }
#endif
  return (status);
 8002fc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fca:	4618      	mov	r0, r3
 8002fcc:	3710      	adds	r7, #16
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}
 8002fd2:	bf00      	nop

08002fd4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002fd8:	4b04      	ldr	r3, [pc, #16]	; (8002fec <__NVIC_GetPriorityGrouping+0x18>)
 8002fda:	68db      	ldr	r3, [r3, #12]
 8002fdc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002fe0:	0a1b      	lsrs	r3, r3, #8
}
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fea:	4770      	bx	lr
 8002fec:	e000ed00 	.word	0xe000ed00

08002ff0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	b083      	sub	sp, #12
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ffa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	db0b      	blt.n	800301a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003002:	4908      	ldr	r1, [pc, #32]	; (8003024 <__NVIC_EnableIRQ+0x34>)
 8003004:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003008:	095b      	lsrs	r3, r3, #5
 800300a:	79fa      	ldrb	r2, [r7, #7]
 800300c:	f002 021f 	and.w	r2, r2, #31
 8003010:	2001      	movs	r0, #1
 8003012:	fa00 f202 	lsl.w	r2, r0, r2
 8003016:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800301a:	370c      	adds	r7, #12
 800301c:	46bd      	mov	sp, r7
 800301e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003022:	4770      	bx	lr
 8003024:	e000e100 	.word	0xe000e100

08003028 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8003028:	b480      	push	{r7}
 800302a:	b083      	sub	sp, #12
 800302c:	af00      	add	r7, sp, #0
 800302e:	4603      	mov	r3, r0
 8003030:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003032:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003036:	2b00      	cmp	r3, #0
 8003038:	db0c      	blt.n	8003054 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800303a:	4909      	ldr	r1, [pc, #36]	; (8003060 <__NVIC_ClearPendingIRQ+0x38>)
 800303c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003040:	095b      	lsrs	r3, r3, #5
 8003042:	79fa      	ldrb	r2, [r7, #7]
 8003044:	f002 021f 	and.w	r2, r2, #31
 8003048:	2001      	movs	r0, #1
 800304a:	fa00 f202 	lsl.w	r2, r0, r2
 800304e:	3360      	adds	r3, #96	; 0x60
 8003050:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003054:	370c      	adds	r7, #12
 8003056:	46bd      	mov	sp, r7
 8003058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305c:	4770      	bx	lr
 800305e:	bf00      	nop
 8003060:	e000e100 	.word	0xe000e100

08003064 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003064:	b480      	push	{r7}
 8003066:	b083      	sub	sp, #12
 8003068:	af00      	add	r7, sp, #0
 800306a:	4603      	mov	r3, r0
 800306c:	6039      	str	r1, [r7, #0]
 800306e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003070:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003074:	2b00      	cmp	r3, #0
 8003076:	db0a      	blt.n	800308e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003078:	490d      	ldr	r1, [pc, #52]	; (80030b0 <__NVIC_SetPriority+0x4c>)
 800307a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800307e:	683a      	ldr	r2, [r7, #0]
 8003080:	b2d2      	uxtb	r2, r2
 8003082:	0092      	lsls	r2, r2, #2
 8003084:	b2d2      	uxtb	r2, r2
 8003086:	440b      	add	r3, r1
 8003088:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 800308c:	e00a      	b.n	80030a4 <__NVIC_SetPriority+0x40>
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800308e:	4909      	ldr	r1, [pc, #36]	; (80030b4 <__NVIC_SetPriority+0x50>)
 8003090:	79fb      	ldrb	r3, [r7, #7]
 8003092:	f003 030f 	and.w	r3, r3, #15
 8003096:	3b04      	subs	r3, #4
 8003098:	683a      	ldr	r2, [r7, #0]
 800309a:	b2d2      	uxtb	r2, r2
 800309c:	0092      	lsls	r2, r2, #2
 800309e:	b2d2      	uxtb	r2, r2
 80030a0:	440b      	add	r3, r1
 80030a2:	761a      	strb	r2, [r3, #24]
  }
}
 80030a4:	370c      	adds	r7, #12
 80030a6:	46bd      	mov	sp, r7
 80030a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ac:	4770      	bx	lr
 80030ae:	bf00      	nop
 80030b0:	e000e100 	.word	0xe000e100
 80030b4:	e000ed00 	.word	0xe000ed00

080030b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030b8:	b480      	push	{r7}
 80030ba:	b089      	sub	sp, #36	; 0x24
 80030bc:	af00      	add	r7, sp, #0
 80030be:	60f8      	str	r0, [r7, #12]
 80030c0:	60b9      	str	r1, [r7, #8]
 80030c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	f003 0307 	and.w	r3, r3, #7
 80030ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80030cc:	69fb      	ldr	r3, [r7, #28]
 80030ce:	f1c3 0307 	rsb	r3, r3, #7
 80030d2:	2b06      	cmp	r3, #6
 80030d4:	bf28      	it	cs
 80030d6:	2306      	movcs	r3, #6
 80030d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80030da:	69fb      	ldr	r3, [r7, #28]
 80030dc:	3306      	adds	r3, #6
 80030de:	2b06      	cmp	r3, #6
 80030e0:	d902      	bls.n	80030e8 <NVIC_EncodePriority+0x30>
 80030e2:	69fb      	ldr	r3, [r7, #28]
 80030e4:	3b01      	subs	r3, #1
 80030e6:	e000      	b.n	80030ea <NVIC_EncodePriority+0x32>
 80030e8:	2300      	movs	r3, #0
 80030ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030ec:	69bb      	ldr	r3, [r7, #24]
 80030ee:	2201      	movs	r2, #1
 80030f0:	fa02 f303 	lsl.w	r3, r2, r3
 80030f4:	1e5a      	subs	r2, r3, #1
 80030f6:	68bb      	ldr	r3, [r7, #8]
 80030f8:	401a      	ands	r2, r3
 80030fa:	697b      	ldr	r3, [r7, #20]
 80030fc:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80030fe:	697b      	ldr	r3, [r7, #20]
 8003100:	2101      	movs	r1, #1
 8003102:	fa01 f303 	lsl.w	r3, r1, r3
 8003106:	1e59      	subs	r1, r3, #1
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	400b      	ands	r3, r1
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 800310c:	4313      	orrs	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
         );
}
 800310e:	4618      	mov	r0, r3
 8003110:	3724      	adds	r7, #36	; 0x24
 8003112:	46bd      	mov	sp, r7
 8003114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003118:	4770      	bx	lr
 800311a:	bf00      	nop

0800311c <PIN_INTERRUPT_Init>:
/*
 * API to initialize the PIN_INTERRUPT APP ERU Event Trigger Logic, Output Gating Unit Hardware initialization
 * and NVIC node configuration.
 */
PIN_INTERRUPT_STATUS_t PIN_INTERRUPT_Init(const PIN_INTERRUPT_t *const handle)
{
 800311c:	b590      	push	{r4, r7, lr}
 800311e:	b083      	sub	sp, #12
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("PIN_INTERRUPT_Init: PIN_INTERRUPT APP handle function pointer uninitialized", (handle != NULL));

  /* Initializes input pin characteristics */
  XMC_GPIO_Init(handle->port, handle->pin, &handle->gpio_config);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6859      	ldr	r1, [r3, #4]
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	3308      	adds	r3, #8
 8003132:	4608      	mov	r0, r1
 8003134:	4611      	mov	r1, r2
 8003136:	461a      	mov	r2, r3
 8003138:	f7fd f946 	bl	80003c8 <XMC_GPIO_Init>
  /* ERU Event Trigger Logic Hardware initialization based on UI */
  XMC_ERU_ETL_Init(handle->eru, handle->etl, &handle->etl_config);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6819      	ldr	r1, [r3, #0]
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	7fda      	ldrb	r2, [r3, #31]
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	3314      	adds	r3, #20
 8003148:	4608      	mov	r0, r1
 800314a:	4611      	mov	r1, r2
 800314c:	461a      	mov	r2, r3
 800314e:	f7fe fb4f 	bl	80017f0 <XMC_ERU_ETL_Init>
  /* OGU is configured to generate event on configured trigger edge */
  XMC_ERU_OGU_SetServiceRequestMode(handle->eru, handle->ogu, XMC_ERU_OGU_SERVICE_REQUEST_ON_TRIGGER);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681a      	ldr	r2, [r3, #0]
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	f893 3020 	ldrb.w	r3, [r3, #32]
 800315c:	4610      	mov	r0, r2
 800315e:	4619      	mov	r1, r3
 8003160:	2201      	movs	r2, #1
 8003162:	f7fe fb89 	bl	8001878 <XMC_ERU_OGU_SetServiceRequestMode>
#if (UC_FAMILY == XMC1)
  /* Configure NVIC node and priority */
  NVIC_SetPriority((IRQn_Type)handle->IRQn, handle->irq_priority);
#else
  /* Configure NVIC node, priority and subpriority */
  NVIC_SetPriority((IRQn_Type)handle->IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	7f1c      	ldrb	r4, [r3, #28]
 800316a:	f7ff ff33 	bl	8002fd4 <__NVIC_GetPriorityGrouping>
 800316e:	4601      	mov	r1, r0
                    handle->irq_priority, handle->irq_subpriority));
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	7f5b      	ldrb	r3, [r3, #29]
#if (UC_FAMILY == XMC1)
  /* Configure NVIC node and priority */
  NVIC_SetPriority((IRQn_Type)handle->IRQn, handle->irq_priority);
#else
  /* Configure NVIC node, priority and subpriority */
  NVIC_SetPriority((IRQn_Type)handle->IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
 8003174:	461a      	mov	r2, r3
                    handle->irq_priority, handle->irq_subpriority));
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	7f9b      	ldrb	r3, [r3, #30]
#if (UC_FAMILY == XMC1)
  /* Configure NVIC node and priority */
  NVIC_SetPriority((IRQn_Type)handle->IRQn, handle->irq_priority);
#else
  /* Configure NVIC node, priority and subpriority */
  NVIC_SetPriority((IRQn_Type)handle->IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
 800317a:	4608      	mov	r0, r1
 800317c:	4611      	mov	r1, r2
 800317e:	461a      	mov	r2, r3
 8003180:	f7ff ff9a 	bl	80030b8 <NVIC_EncodePriority>
 8003184:	4602      	mov	r2, r0
 8003186:	b263      	sxtb	r3, r4
 8003188:	4618      	mov	r0, r3
 800318a:	4611      	mov	r1, r2
 800318c:	f7ff ff6a 	bl	8003064 <__NVIC_SetPriority>
                    handle->irq_priority, handle->irq_subpriority));
#endif
#if (UC_SERIES == XMC14)
  XMC_SCU_SetInterruptControl((IRQn_Type)handle->IRQn, (XMC_SCU_IRQCTRL_t)handle->irqctrl);
#endif
  if (true == handle->enable_at_init)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8003196:	2b00      	cmp	r3, #0
 8003198:	d00b      	beq.n	80031b2 <PIN_INTERRUPT_Init+0x96>
  {
    /* Clear pending interrupt before enabling it */
    NVIC_ClearPendingIRQ((IRQn_Type)handle->IRQn);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	7f1b      	ldrb	r3, [r3, #28]
 800319e:	b25b      	sxtb	r3, r3
 80031a0:	4618      	mov	r0, r3
 80031a2:	f7ff ff41 	bl	8003028 <__NVIC_ClearPendingIRQ>
    /* Enable NVIC node */
    NVIC_EnableIRQ((IRQn_Type)handle->IRQn);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	7f1b      	ldrb	r3, [r3, #28]
 80031aa:	b25b      	sxtb	r3, r3
 80031ac:	4618      	mov	r0, r3
 80031ae:	f7ff ff1f 	bl	8002ff0 <__NVIC_EnableIRQ>
  }
  return (PIN_INTERRUPT_STATUS_SUCCESS);
 80031b2:	2300      	movs	r3, #0
}
 80031b4:	4618      	mov	r0, r3
 80031b6:	370c      	adds	r7, #12
 80031b8:	46bd      	mov	sp, r7
 80031ba:	bd90      	pop	{r4, r7, pc}

080031bc <PIN_INTERRUPT_SetEdgeSensitivity>:

/**
 * This function is used to configure event trigger edge during run time.
 */
void PIN_INTERRUPT_SetEdgeSensitivity(const PIN_INTERRUPT_t *const handle, const PIN_INTERRUPT_EDGE_t edge)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b082      	sub	sp, #8
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
 80031c4:	460b      	mov	r3, r1
 80031c6:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("PIN_INTERRUPT_SetEdgeSensitivity: Handler null pointer", handle != NULL);
  XMC_ERU_ETL_SetEdgeDetection(handle->eru, handle->etl, (XMC_ERU_ETL_EDGE_DETECTION_t)edge);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6819      	ldr	r1, [r3, #0]
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	7fda      	ldrb	r2, [r3, #31]
 80031d0:	78fb      	ldrb	r3, [r7, #3]
 80031d2:	4608      	mov	r0, r1
 80031d4:	4611      	mov	r1, r2
 80031d6:	461a      	mov	r2, r3
 80031d8:	f7fe fb30 	bl	800183c <XMC_ERU_ETL_SetEdgeDetection>
}
 80031dc:	3708      	adds	r7, #8
 80031de:	46bd      	mov	sp, r7
 80031e0:	bd80      	pop	{r7, pc}
 80031e2:	bf00      	nop

080031e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80031e4:	b480      	push	{r7}
 80031e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80031e8:	4b04      	ldr	r3, [pc, #16]	; (80031fc <__NVIC_GetPriorityGrouping+0x18>)
 80031ea:	68db      	ldr	r3, [r3, #12]
 80031ec:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80031f0:	0a1b      	lsrs	r3, r3, #8
}
 80031f2:	4618      	mov	r0, r3
 80031f4:	46bd      	mov	sp, r7
 80031f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fa:	4770      	bx	lr
 80031fc:	e000ed00 	.word	0xe000ed00

08003200 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003200:	b480      	push	{r7}
 8003202:	b083      	sub	sp, #12
 8003204:	af00      	add	r7, sp, #0
 8003206:	4603      	mov	r3, r0
 8003208:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800320a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800320e:	2b00      	cmp	r3, #0
 8003210:	db0b      	blt.n	800322a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003212:	4908      	ldr	r1, [pc, #32]	; (8003234 <__NVIC_EnableIRQ+0x34>)
 8003214:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003218:	095b      	lsrs	r3, r3, #5
 800321a:	79fa      	ldrb	r2, [r7, #7]
 800321c:	f002 021f 	and.w	r2, r2, #31
 8003220:	2001      	movs	r0, #1
 8003222:	fa00 f202 	lsl.w	r2, r0, r2
 8003226:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800322a:	370c      	adds	r7, #12
 800322c:	46bd      	mov	sp, r7
 800322e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003232:	4770      	bx	lr
 8003234:	e000e100 	.word	0xe000e100

08003238 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003238:	b480      	push	{r7}
 800323a:	b083      	sub	sp, #12
 800323c:	af00      	add	r7, sp, #0
 800323e:	4603      	mov	r3, r0
 8003240:	6039      	str	r1, [r7, #0]
 8003242:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003244:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003248:	2b00      	cmp	r3, #0
 800324a:	db0a      	blt.n	8003262 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800324c:	490d      	ldr	r1, [pc, #52]	; (8003284 <__NVIC_SetPriority+0x4c>)
 800324e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003252:	683a      	ldr	r2, [r7, #0]
 8003254:	b2d2      	uxtb	r2, r2
 8003256:	0092      	lsls	r2, r2, #2
 8003258:	b2d2      	uxtb	r2, r2
 800325a:	440b      	add	r3, r1
 800325c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 8003260:	e00a      	b.n	8003278 <__NVIC_SetPriority+0x40>
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003262:	4909      	ldr	r1, [pc, #36]	; (8003288 <__NVIC_SetPriority+0x50>)
 8003264:	79fb      	ldrb	r3, [r7, #7]
 8003266:	f003 030f 	and.w	r3, r3, #15
 800326a:	3b04      	subs	r3, #4
 800326c:	683a      	ldr	r2, [r7, #0]
 800326e:	b2d2      	uxtb	r2, r2
 8003270:	0092      	lsls	r2, r2, #2
 8003272:	b2d2      	uxtb	r2, r2
 8003274:	440b      	add	r3, r1
 8003276:	761a      	strb	r2, [r3, #24]
  }
}
 8003278:	370c      	adds	r7, #12
 800327a:	46bd      	mov	sp, r7
 800327c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003280:	4770      	bx	lr
 8003282:	bf00      	nop
 8003284:	e000e100 	.word	0xe000e100
 8003288:	e000ed00 	.word	0xe000ed00

0800328c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800328c:	b480      	push	{r7}
 800328e:	b089      	sub	sp, #36	; 0x24
 8003290:	af00      	add	r7, sp, #0
 8003292:	60f8      	str	r0, [r7, #12]
 8003294:	60b9      	str	r1, [r7, #8]
 8003296:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	f003 0307 	and.w	r3, r3, #7
 800329e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80032a0:	69fb      	ldr	r3, [r7, #28]
 80032a2:	f1c3 0307 	rsb	r3, r3, #7
 80032a6:	2b06      	cmp	r3, #6
 80032a8:	bf28      	it	cs
 80032aa:	2306      	movcs	r3, #6
 80032ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80032ae:	69fb      	ldr	r3, [r7, #28]
 80032b0:	3306      	adds	r3, #6
 80032b2:	2b06      	cmp	r3, #6
 80032b4:	d902      	bls.n	80032bc <NVIC_EncodePriority+0x30>
 80032b6:	69fb      	ldr	r3, [r7, #28]
 80032b8:	3b01      	subs	r3, #1
 80032ba:	e000      	b.n	80032be <NVIC_EncodePriority+0x32>
 80032bc:	2300      	movs	r3, #0
 80032be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032c0:	69bb      	ldr	r3, [r7, #24]
 80032c2:	2201      	movs	r2, #1
 80032c4:	fa02 f303 	lsl.w	r3, r2, r3
 80032c8:	1e5a      	subs	r2, r3, #1
 80032ca:	68bb      	ldr	r3, [r7, #8]
 80032cc:	401a      	ands	r2, r3
 80032ce:	697b      	ldr	r3, [r7, #20]
 80032d0:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80032d2:	697b      	ldr	r3, [r7, #20]
 80032d4:	2101      	movs	r1, #1
 80032d6:	fa01 f303 	lsl.w	r3, r1, r3
 80032da:	1e59      	subs	r1, r3, #1
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	400b      	ands	r3, r1
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 80032e0:	4313      	orrs	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
         );
}
 80032e2:	4618      	mov	r0, r3
 80032e4:	3724      	adds	r7, #36	; 0x24
 80032e6:	46bd      	mov	sp, r7
 80032e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ec:	4770      	bx	lr
 80032ee:	bf00      	nop

080032f0 <INTERRUPT_Enable>:
 *    return 0;
 *  }
 * @endcode<BR> </p>
 */
__STATIC_INLINE void INTERRUPT_Enable(const INTERRUPT_t *const handler)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b082      	sub	sp, #8
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("Handler NULL", (handler != NULL));
  NVIC_EnableIRQ(handler->node);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	781b      	ldrb	r3, [r3, #0]
 80032fc:	b25b      	sxtb	r3, r3
 80032fe:	4618      	mov	r0, r3
 8003300:	f7ff ff7e 	bl	8003200 <__NVIC_EnableIRQ>
}
 8003304:	3708      	adds	r7, #8
 8003306:	46bd      	mov	sp, r7
 8003308:	bd80      	pop	{r7, pc}
 800330a:	bf00      	nop

0800330c <INTERRUPT_Init>:

/*
 * API to initialize the INTERRUPT APP
 */
INTERRUPT_STATUS_t INTERRUPT_Init(const INTERRUPT_t *const handler)
{
 800330c:	b590      	push	{r4, r7, lr}
 800330e:	b083      	sub	sp, #12
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("INTERRUPT_Init:HandlePtr NULL", (handler != NULL));
  
#if(UC_FAMILY == XMC4)

  NVIC_SetPriority(handler->node,
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	781c      	ldrb	r4, [r3, #0]
 8003318:	f7ff ff64 	bl	80031e4 <__NVIC_GetPriorityGrouping>
 800331c:	4601      	mov	r1, r0
                   NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
                                       handler->priority,
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	785b      	ldrb	r3, [r3, #1]
{
  XMC_ASSERT("INTERRUPT_Init:HandlePtr NULL", (handler != NULL));
  
#if(UC_FAMILY == XMC4)

  NVIC_SetPriority(handler->node,
 8003322:	461a      	mov	r2, r3
                   NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
                                       handler->priority,
                                       handler->subpriority));
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	789b      	ldrb	r3, [r3, #2]
{
  XMC_ASSERT("INTERRUPT_Init:HandlePtr NULL", (handler != NULL));
  
#if(UC_FAMILY == XMC4)

  NVIC_SetPriority(handler->node,
 8003328:	4608      	mov	r0, r1
 800332a:	4611      	mov	r1, r2
 800332c:	461a      	mov	r2, r3
 800332e:	f7ff ffad 	bl	800328c <NVIC_EncodePriority>
 8003332:	4602      	mov	r2, r0
 8003334:	b263      	sxtb	r3, r4
 8003336:	4618      	mov	r0, r3
 8003338:	4611      	mov	r1, r2
 800333a:	f7ff ff7d 	bl	8003238 <__NVIC_SetPriority>
                   NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
                                       handler->priority,
                                       handler->subpriority));
  if (handler->enable_at_init == true)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	78db      	ldrb	r3, [r3, #3]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d002      	beq.n	800334c <INTERRUPT_Init+0x40>
  {
    INTERRUPT_Enable(handler);
 8003346:	6878      	ldr	r0, [r7, #4]
 8003348:	f7ff ffd2 	bl	80032f0 <INTERRUPT_Enable>
  {
    INTERRUPT_Enable(handler);
  }
#endif

  return (INTERRUPT_STATUS_SUCCESS);
 800334c:	2300      	movs	r3, #0
}
 800334e:	4618      	mov	r0, r3
 8003350:	370c      	adds	r7, #12
 8003352:	46bd      	mov	sp, r7
 8003354:	bd90      	pop	{r4, r7, pc}
 8003356:	bf00      	nop

08003358 <XMC_USIC_CH_TXFIFO_IsFull>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_IsEmpty(), XMC_USIC_CH_TXFIFO_Flush() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_TXFIFO_IsFull(XMC_USIC_CH_t *const channel)
{
 8003358:	b480      	push	{r7}
 800335a:	b083      	sub	sp, #12
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_TFULL_Msk);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8003366:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800336a:	2b00      	cmp	r3, #0
 800336c:	bf14      	ite	ne
 800336e:	2301      	movne	r3, #1
 8003370:	2300      	moveq	r3, #0
 8003372:	b2db      	uxtb	r3, r3
}
 8003374:	4618      	mov	r0, r3
 8003376:	370c      	adds	r7, #12
 8003378:	46bd      	mov	sp, r7
 800337a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337e:	4770      	bx	lr

08003380 <XMC_USIC_CH_TXFIFO_IsEmpty>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_Flush(), XMC_USIC_CH_TXFIFO_PutData() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_TXFIFO_IsEmpty(XMC_USIC_CH_t *const channel)
{
 8003380:	b480      	push	{r7}
 8003382:	b083      	sub	sp, #12
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_TEMPTY_Msk);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800338e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003392:	2b00      	cmp	r3, #0
 8003394:	bf14      	ite	ne
 8003396:	2301      	movne	r3, #1
 8003398:	2300      	moveq	r3, #0
 800339a:	b2db      	uxtb	r3, r3
}
 800339c:	4618      	mov	r0, r3
 800339e:	370c      	adds	r7, #12
 80033a0:	46bd      	mov	sp, r7
 80033a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a6:	4770      	bx	lr

080033a8 <XMC_USIC_CH_RXFIFO_IsEmpty>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_Flush(), XMC_USIC_CH_RXFIFO_PutData() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_RXFIFO_IsEmpty(XMC_USIC_CH_t *const channel)
{
 80033a8:	b480      	push	{r7}
 80033aa:	b083      	sub	sp, #12
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_REMPTY_Msk);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 80033b6:	f003 0308 	and.w	r3, r3, #8
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	bf14      	ite	ne
 80033be:	2301      	movne	r3, #1
 80033c0:	2300      	moveq	r3, #0
 80033c2:	b2db      	uxtb	r3, r3
}
 80033c4:	4618      	mov	r0, r3
 80033c6:	370c      	adds	r7, #12
 80033c8:	46bd      	mov	sp, r7
 80033ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ce:	4770      	bx	lr

080033d0 <XMC_I2C_CH_GetStatusFlag>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_I2C_CH_ClearStatusFlag()\n\n
 */
__STATIC_INLINE uint32_t XMC_I2C_CH_GetStatusFlag(XMC_USIC_CH_t *const channel)
{
 80033d0:	b480      	push	{r7}
 80033d2:	b083      	sub	sp, #12
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
  return (channel->PSR_IICMode);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
 80033dc:	4618      	mov	r0, r3
 80033de:	370c      	adds	r7, #12
 80033e0:	46bd      	mov	sp, r7
 80033e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e6:	4770      	bx	lr

080033e8 <XMC_I2C_CH_ClearStatusFlag>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_I2C_CH_GetStatusFlag()\n\n
 */
__STATIC_INLINE void XMC_I2C_CH_ClearStatusFlag(XMC_USIC_CH_t *const channel, uint32_t flag)
{
 80033e8:	b480      	push	{r7}
 80033ea:	b083      	sub	sp, #12
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
 80033f0:	6039      	str	r1, [r7, #0]
  channel->PSCR |= flag;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	431a      	orrs	r2, r3
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	64da      	str	r2, [r3, #76]	; 0x4c
}
 80033fe:	370c      	adds	r7, #12
 8003400:	46bd      	mov	sp, r7
 8003402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003406:	4770      	bx	lr

08003408 <I2C_MASTER_IsTXFIFOFull>:
 *  }
 * }
 * @endcode
 */
__STATIC_INLINE bool I2C_MASTER_IsTXFIFOFull(const I2C_MASTER_t* const handle)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b082      	sub	sp, #8
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("I2C_MASTER_IsTXFIFOFull: invalid handle", (handle != NULL));
  return XMC_USIC_CH_TXFIFO_IsFull(handle->channel);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4618      	mov	r0, r3
 8003416:	f7ff ff9f 	bl	8003358 <XMC_USIC_CH_TXFIFO_IsFull>
 800341a:	4603      	mov	r3, r0
}
 800341c:	4618      	mov	r0, r3
 800341e:	3708      	adds	r7, #8
 8003420:	46bd      	mov	sp, r7
 8003422:	bd80      	pop	{r7, pc}

08003424 <I2C_MASTER_IsRXFIFOEmpty>:
 *   }
 *  }
 * @endcode
 */
__STATIC_INLINE bool I2C_MASTER_IsRXFIFOEmpty(const I2C_MASTER_t* const handle)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b082      	sub	sp, #8
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("I2C_MASTER_IsRXFIFOEmpty: invalid handle", (handle != NULL));
  return XMC_USIC_CH_RXFIFO_IsEmpty(handle->channel);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4618      	mov	r0, r3
 8003432:	f7ff ffb9 	bl	80033a8 <XMC_USIC_CH_RXFIFO_IsEmpty>
 8003436:	4603      	mov	r3, r0
}
 8003438:	4618      	mov	r0, r3
 800343a:	3708      	adds	r7, #8
 800343c:	46bd      	mov	sp, r7
 800343e:	bd80      	pop	{r7, pc}

08003440 <I2C_MASTER_GetReceivedByte>:
 * @endcode
 *
 */
/* Wrapper to the LLD API for reading back the value of the RBUF or OUTR register */
__STATIC_INLINE uint8_t I2C_MASTER_GetReceivedByte(I2C_MASTER_t * const handle)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b082      	sub	sp, #8
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("I2C_MASTER_GetReceivedByte: invalid handle", (handle != NULL));
  return (uint8_t)XMC_I2C_CH_GetReceivedData(handle->channel);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4618      	mov	r0, r3
 800344e:	f7fe fc5b 	bl	8001d08 <XMC_I2C_CH_GetReceivedData>
 8003452:	4603      	mov	r3, r0
}
 8003454:	4618      	mov	r0, r3
 8003456:	3708      	adds	r7, #8
 8003458:	46bd      	mov	sp, r7
 800345a:	bd80      	pop	{r7, pc}

0800345c <I2C_MASTER_TransmitByte>:
 *    }
 *  }
 * @endcode
 */
__STATIC_INLINE void I2C_MASTER_TransmitByte(I2C_MASTER_t * const handle, uint8_t byte)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b082      	sub	sp, #8
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
 8003464:	460b      	mov	r3, r1
 8003466:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("I2C_MASTER_TransmitByte: invalid handle", (handle != NULL));
  XMC_I2C_CH_MasterTransmit(handle->channel, byte);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681a      	ldr	r2, [r3, #0]
 800346c:	78fb      	ldrb	r3, [r7, #3]
 800346e:	4610      	mov	r0, r2
 8003470:	4619      	mov	r1, r3
 8003472:	f7fe fbd7 	bl	8001c24 <XMC_I2C_CH_MasterTransmit>
}
 8003476:	3708      	adds	r7, #8
 8003478:	46bd      	mov	sp, r7
 800347a:	bd80      	pop	{r7, pc}

0800347c <I2C_MASTER_ReceiveACK>:
 *    return 1U;
 *  }
 * @endcode
*/
__STATIC_INLINE void I2C_MASTER_ReceiveACK(I2C_MASTER_t * const handle)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b082      	sub	sp, #8
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("I2C_MASTER_ReceiveACK: invalid handle", (handle != NULL));
  XMC_I2C_CH_MasterReceiveAck(handle->channel);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4618      	mov	r0, r3
 800348a:	f7fe fbf1 	bl	8001c70 <XMC_I2C_CH_MasterReceiveAck>
}
 800348e:	3708      	adds	r7, #8
 8003490:	46bd      	mov	sp, r7
 8003492:	bd80      	pop	{r7, pc}

08003494 <I2C_MASTER_ReceiveNACK>:
 *    return 1U;
 *  }
 * @endcode
*/
__STATIC_INLINE void I2C_MASTER_ReceiveNACK(I2C_MASTER_t * const handle)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b082      	sub	sp, #8
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("I2C_MASTER_ReceiveNACK: invalid handle", (handle != NULL));
  XMC_I2C_CH_MasterReceiveNack(handle->channel);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4618      	mov	r0, r3
 80034a2:	f7fe fc0b 	bl	8001cbc <XMC_I2C_CH_MasterReceiveNack>
}
 80034a6:	3708      	adds	r7, #8
 80034a8:	46bd      	mov	sp, r7
 80034aa:	bd80      	pop	{r7, pc}

080034ac <I2C_MASTER_SendStop>:
 *    return 1U;
 *  }
 * @endcode
*/
__STATIC_INLINE void I2C_MASTER_SendStop(I2C_MASTER_t * const handle)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b082      	sub	sp, #8
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("I2C_MASTER_SendStop: invalid handle", (handle != NULL));
  XMC_I2C_CH_ClearStatusFlag(handle->channel, XMC_I2C_CH_STATUS_FLAG_STOP_CONDITION_RECEIVED);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4618      	mov	r0, r3
 80034ba:	2110      	movs	r1, #16
 80034bc:	f7ff ff94 	bl	80033e8 <XMC_I2C_CH_ClearStatusFlag>
  XMC_I2C_CH_MasterStop(handle->channel);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4618      	mov	r0, r3
 80034c6:	f7fe fb87 	bl	8001bd8 <XMC_I2C_CH_MasterStop>
}
 80034ca:	3708      	adds	r7, #8
 80034cc:	46bd      	mov	sp, r7
 80034ce:	bd80      	pop	{r7, pc}

080034d0 <I2C_MASTER_SendStart>:
 *   }
 * @endcode
*/
__STATIC_INLINE void I2C_MASTER_SendStart(I2C_MASTER_t * const handle, const uint32_t address,
		                                  const XMC_I2C_CH_CMD_t cmd)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b084      	sub	sp, #16
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	60f8      	str	r0, [r7, #12]
 80034d8:	60b9      	str	r1, [r7, #8]
 80034da:	4613      	mov	r3, r2
 80034dc:	71fb      	strb	r3, [r7, #7]
  XMC_ASSERT("I2C_MASTER_SendStart: invalid handle", (handle != NULL));
  XMC_I2C_CH_ClearStatusFlag(handle->channel, XMC_I2C_CH_STATUS_FLAG_START_CONDITION_RECEIVED);
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4618      	mov	r0, r3
 80034e4:	2104      	movs	r1, #4
 80034e6:	f7ff ff7f 	bl	80033e8 <XMC_I2C_CH_ClearStatusFlag>
  XMC_I2C_CH_MasterStart(handle->channel, (uint16_t)address, cmd);
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	6819      	ldr	r1, [r3, #0]
 80034ee:	68bb      	ldr	r3, [r7, #8]
 80034f0:	b29a      	uxth	r2, r3
 80034f2:	79fb      	ldrb	r3, [r7, #7]
 80034f4:	4608      	mov	r0, r1
 80034f6:	4611      	mov	r1, r2
 80034f8:	461a      	mov	r2, r3
 80034fa:	f7fe fb05 	bl	8001b08 <XMC_I2C_CH_MasterStart>
}
 80034fe:	3710      	adds	r7, #16
 8003500:	46bd      	mov	sp, r7
 8003502:	bd80      	pop	{r7, pc}

08003504 <I2C_MASTER_SendRepeatedStart>:
 *  }
 * @endcode
*/
__STATIC_INLINE void I2C_MASTER_SendRepeatedStart(I2C_MASTER_t * const handle, const uint32_t address,
		                                          const XMC_I2C_CH_CMD_t cmd)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b084      	sub	sp, #16
 8003508:	af00      	add	r7, sp, #0
 800350a:	60f8      	str	r0, [r7, #12]
 800350c:	60b9      	str	r1, [r7, #8]
 800350e:	4613      	mov	r3, r2
 8003510:	71fb      	strb	r3, [r7, #7]
  XMC_ASSERT("I2C_MASTER_SendRepeatedStart: invalid handle", (handle != NULL));
  XMC_I2C_CH_ClearStatusFlag(handle->channel, XMC_I2C_CH_STATUS_FLAG_REPEATED_START_CONDITION_RECEIVED);
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4618      	mov	r0, r3
 8003518:	2108      	movs	r1, #8
 800351a:	f7ff ff65 	bl	80033e8 <XMC_I2C_CH_ClearStatusFlag>
  XMC_I2C_CH_MasterRepeatedStart(handle->channel, (uint16_t)address, cmd);
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	6819      	ldr	r1, [r3, #0]
 8003522:	68bb      	ldr	r3, [r7, #8]
 8003524:	b29a      	uxth	r2, r3
 8003526:	79fb      	ldrb	r3, [r7, #7]
 8003528:	4608      	mov	r0, r1
 800352a:	4611      	mov	r1, r2
 800352c:	461a      	mov	r2, r3
 800352e:	f7fe fb1f 	bl	8001b70 <XMC_I2C_CH_MasterRepeatedStart>
}
 8003532:	3710      	adds	r7, #16
 8003534:	46bd      	mov	sp, r7
 8003536:	bd80      	pop	{r7, pc}

08003538 <I2C_MASTER_Init>:
  return (version);
}

/* Function to initialize the USIC Channel with GUI configured values.*/
I2C_MASTER_STATUS_t I2C_MASTER_Init(const I2C_MASTER_t *const handle)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b084      	sub	sp, #16
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
  I2C_MASTER_STATUS_t status;

  if (handle != NULL)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d006      	beq.n	8003554 <I2C_MASTER_Init+0x1c>
  {
    /*Initialize the multiplexers required for I2C_MASTER configuration*/
    handle->config->fptr_i2c_config();
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	4798      	blx	r3

    status = I2C_MASTER_STATUS_SUCCESS;
 800354e:	2300      	movs	r3, #0
 8003550:	73fb      	strb	r3, [r7, #15]
 8003552:	e001      	b.n	8003558 <I2C_MASTER_Init+0x20>
  }
  else
  {
    status = I2C_MASTER_STATUS_FAILURE;
 8003554:	2301      	movs	r3, #1
 8003556:	73fb      	strb	r3, [r7, #15]
  }
  return (status);
 8003558:	7bfb      	ldrb	r3, [r7, #15]
}
 800355a:	4618      	mov	r0, r3
 800355c:	3710      	adds	r7, #16
 800355e:	46bd      	mov	sp, r7
 8003560:	bd80      	pop	{r7, pc}
 8003562:	bf00      	nop

08003564 <I2C_MASTER_GetFlagStatus>:

/* Function to get flag status of the requested parameter */
uint32_t I2C_MASTER_GetFlagStatus(const I2C_MASTER_t *handle, uint32_t flagtype)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b084      	sub	sp, #16
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
 800356c:	6039      	str	r1, [r7, #0]
  uint32_t status;

  status = XMC_I2C_CH_GetStatusFlag(handle->channel);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4618      	mov	r0, r3
 8003574:	f7ff ff2c 	bl	80033d0 <XMC_I2C_CH_GetStatusFlag>
 8003578:	60f8      	str	r0, [r7, #12]

  return (status & flagtype);
 800357a:	68fa      	ldr	r2, [r7, #12]
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	4013      	ands	r3, r2
}
 8003580:	4618      	mov	r0, r3
 8003582:	3710      	adds	r7, #16
 8003584:	46bd      	mov	sp, r7
 8003586:	bd80      	pop	{r7, pc}

08003588 <I2C_MASTER_ClearFlag>:

/* Function to clear flag status of the requested parameter */
void I2C_MASTER_ClearFlag(const I2C_MASTER_t *handle, uint32_t flagtype)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b082      	sub	sp, #8
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
 8003590:	6039      	str	r1, [r7, #0]
  XMC_I2C_CH_ClearStatusFlag(handle->channel,flagtype);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4618      	mov	r0, r3
 8003598:	6839      	ldr	r1, [r7, #0]
 800359a:	f7ff ff25 	bl	80033e8 <XMC_I2C_CH_ClearStatusFlag>
}
 800359e:	3708      	adds	r7, #8
 80035a0:	46bd      	mov	sp, r7
 80035a2:	bd80      	pop	{r7, pc}

080035a4 <I2C_MASTER_Transmit>:

/* Function to transmit the data to slave device */
I2C_MASTER_STATUS_t I2C_MASTER_Transmit(I2C_MASTER_t *handle, bool send_start, const uint32_t address,
                                        uint8_t *data, const uint32_t size, bool send_stop)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b088      	sub	sp, #32
 80035a8:	af02      	add	r7, sp, #8
 80035aa:	60f8      	str	r0, [r7, #12]
 80035ac:	607a      	str	r2, [r7, #4]
 80035ae:	603b      	str	r3, [r7, #0]
 80035b0:	460b      	mov	r3, r1
 80035b2:	72fb      	strb	r3, [r7, #11]
  I2C_MASTER_STATUS_t status;

  status = I2C_MASTER_STATUS_BUSY;
 80035b4:	2302      	movs	r3, #2
 80035b6:	75fb      	strb	r3, [r7, #23]

  if(handle->config->transmit_mode == I2C_MASTER_TRANSFER_MODE_INTERRUPT)
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d013      	beq.n	80035ec <I2C_MASTER_Transmit+0x48>
  {
#if (I2C_MASTER_INTERRUPT_TX_ENABLED == 1)
    status = I2C_MASTER_StartTransmitIRQ(handle, send_start, address, data, size, send_stop);
#endif
  }
  else if(handle->config->transmit_mode == I2C_MASTER_TRANSFER_MODE_DMA)
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80035cc:	2b01      	cmp	r3, #1
 80035ce:	d00d      	beq.n	80035ec <I2C_MASTER_Transmit+0x48>
#endif
  }
  else
  {
#if (I2C_MASTER_DIRECT_TX_ENABLED == 1)
    status = I2C_MASTER_lStartTransmitPolling(handle, send_start, address, data, size, send_stop);
 80035d0:	7afa      	ldrb	r2, [r7, #11]
 80035d2:	6a3b      	ldr	r3, [r7, #32]
 80035d4:	9300      	str	r3, [sp, #0]
 80035d6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80035da:	9301      	str	r3, [sp, #4]
 80035dc:	68f8      	ldr	r0, [r7, #12]
 80035de:	4611      	mov	r1, r2
 80035e0:	687a      	ldr	r2, [r7, #4]
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	f000 f88c 	bl	8003700 <I2C_MASTER_lStartTransmitPolling>
 80035e8:	4603      	mov	r3, r0
 80035ea:	75fb      	strb	r3, [r7, #23]
#endif
  }

  return (status);
 80035ec:	7dfb      	ldrb	r3, [r7, #23]
} /* end of function */
 80035ee:	4618      	mov	r0, r3
 80035f0:	3718      	adds	r7, #24
 80035f2:	46bd      	mov	sp, r7
 80035f4:	bd80      	pop	{r7, pc}
 80035f6:	bf00      	nop

080035f8 <I2C_MASTER_Receive>:
 *
 *
 **********************************************************************************************************************/
I2C_MASTER_STATUS_t I2C_MASTER_Receive(I2C_MASTER_t *handle, bool send_start, const uint32_t address, uint8_t * data,
                                   const uint32_t count, bool send_stop, bool send_nack)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b08a      	sub	sp, #40	; 0x28
 80035fc:	af04      	add	r7, sp, #16
 80035fe:	60f8      	str	r0, [r7, #12]
 8003600:	607a      	str	r2, [r7, #4]
 8003602:	603b      	str	r3, [r7, #0]
 8003604:	460b      	mov	r3, r1
 8003606:	72fb      	strb	r3, [r7, #11]
  I2C_MASTER_STATUS_t status;

  status = I2C_MASTER_STATUS_BUSY;
 8003608:	2302      	movs	r3, #2
 800360a:	75fb      	strb	r3, [r7, #23]

  if (handle->config->receive_mode == I2C_MASTER_TRANSFER_MODE_INTERRUPT)
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003614:	2b00      	cmp	r3, #0
 8003616:	d016      	beq.n	8003646 <I2C_MASTER_Receive+0x4e>
  {
#if (I2C_MASTER_INTERRUPT_RX_ENABLED == 1)
  status = I2C_MASTER_StartReceiveIRQ(handle, send_start, address, data, count, send_stop, send_nack);
#endif
  }
  else if (handle->config->receive_mode == I2C_MASTER_TRANSFER_MODE_DMA)
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	685b      	ldr	r3, [r3, #4]
 800361c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003620:	2b01      	cmp	r3, #1
 8003622:	d010      	beq.n	8003646 <I2C_MASTER_Receive+0x4e>
#endif
  }
  else
  {
#if (I2C_MASTER_DIRECT_RX_ENABLED == 1)
    status = I2C_MASTER_lStartReceivePolling(handle, send_start, address, data, count, send_stop, send_nack);
 8003624:	7afa      	ldrb	r2, [r7, #11]
 8003626:	6a3b      	ldr	r3, [r7, #32]
 8003628:	9300      	str	r3, [sp, #0]
 800362a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800362e:	9301      	str	r3, [sp, #4]
 8003630:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003634:	9302      	str	r3, [sp, #8]
 8003636:	68f8      	ldr	r0, [r7, #12]
 8003638:	4611      	mov	r1, r2
 800363a:	687a      	ldr	r2, [r7, #4]
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	f000 f929 	bl	8003894 <I2C_MASTER_lStartReceivePolling>
 8003642:	4603      	mov	r3, r0
 8003644:	75fb      	strb	r3, [r7, #23]
#endif
  }

  return (status);
 8003646:	7dfb      	ldrb	r3, [r7, #23]
}
 8003648:	4618      	mov	r0, r3
 800364a:	3718      	adds	r7, #24
 800364c:	46bd      	mov	sp, r7
 800364e:	bd80      	pop	{r7, pc}

08003650 <I2C_MASTER_lSendStart_Or_RepeatedStart>:
#if ((I2C_MASTER_INTERRUPT_TX_ENABLED == 1) || (I2C_MASTER_INTERRUPT_RX_ENABLED == 1) || \
    (I2C_MASTER_DIRECT_TX_ENABLED == 1) || (I2C_MASTER_DIRECT_RX_ENABLED == 1))
/* Function to issue Send Start/Repeated Start command */
static void I2C_MASTER_lSendStart_Or_RepeatedStart(I2C_MASTER_t * handle,const uint32_t address,
                                               const XMC_I2C_CH_CMD_t cmd)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b084      	sub	sp, #16
 8003654:	af00      	add	r7, sp, #0
 8003656:	60f8      	str	r0, [r7, #12]
 8003658:	60b9      	str	r1, [r7, #8]
 800365a:	4613      	mov	r3, r2
 800365c:	71fb      	strb	r3, [r7, #7]
  XMC_I2C_CH_ClearStatusFlag(handle->channel, XMC_I2C_CH_STATUS_FLAG_START_CONDITION_RECEIVED | XMC_I2C_CH_STATUS_FLAG_REPEATED_START_CONDITION_RECEIVED);
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4618      	mov	r0, r3
 8003664:	210c      	movs	r1, #12
 8003666:	f7ff febf 	bl	80033e8 <XMC_I2C_CH_ClearStatusFlag>

  if (handle->runtime->bus_acquired == true)
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	689b      	ldr	r3, [r3, #8]
 800366e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003672:	b2db      	uxtb	r3, r3
 8003674:	2b00      	cmp	r3, #0
 8003676:	d009      	beq.n	800368c <I2C_MASTER_lSendStart_Or_RepeatedStart+0x3c>
  {
  I2C_MASTER_SendRepeatedStart(handle, (uint16_t)address, cmd);
 8003678:	68bb      	ldr	r3, [r7, #8]
 800367a:	b29b      	uxth	r3, r3
 800367c:	461a      	mov	r2, r3
 800367e:	79fb      	ldrb	r3, [r7, #7]
 8003680:	68f8      	ldr	r0, [r7, #12]
 8003682:	4611      	mov	r1, r2
 8003684:	461a      	mov	r2, r3
 8003686:	f7ff ff3d 	bl	8003504 <I2C_MASTER_SendRepeatedStart>
 800368a:	e00d      	b.n	80036a8 <I2C_MASTER_lSendStart_Or_RepeatedStart+0x58>
  }
  else
  {
    handle->runtime->bus_acquired = true;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	689b      	ldr	r3, [r3, #8]
 8003690:	2201      	movs	r2, #1
 8003692:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    I2C_MASTER_SendStart(handle, (uint16_t)address, cmd);
 8003696:	68bb      	ldr	r3, [r7, #8]
 8003698:	b29b      	uxth	r3, r3
 800369a:	461a      	mov	r2, r3
 800369c:	79fb      	ldrb	r3, [r7, #7]
 800369e:	68f8      	ldr	r0, [r7, #12]
 80036a0:	4611      	mov	r1, r2
 80036a2:	461a      	mov	r2, r3
 80036a4:	f7ff ff14 	bl	80034d0 <I2C_MASTER_SendStart>
  }
}
 80036a8:	3710      	adds	r7, #16
 80036aa:	46bd      	mov	sp, r7
 80036ac:	bd80      	pop	{r7, pc}
 80036ae:	bf00      	nop

080036b0 <I2C_MASTER_AbortTransmit>:
 * If there is a transmission in progress, it will be stopped. If transmit FIFO is used,
 * the existing data will be flushed. After the transmission is stopped, user can start
 * a new transmission without delay.
 **********************************************************************************************************************/
I2C_MASTER_STATUS_t I2C_MASTER_AbortTransmit(const I2C_MASTER_t *const handle)
{
 80036b0:	b480      	push	{r7}
 80036b2:	b085      	sub	sp, #20
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
  I2C_MASTER_STATUS_t status;

  status = I2C_MASTER_STATUS_SUCCESS;
 80036b8:	2300      	movs	r3, #0
 80036ba:	73fb      	strb	r3, [r7, #15]

  if (handle->config->transmit_mode == I2C_MASTER_TRANSFER_MODE_INTERRUPT)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	685b      	ldr	r3, [r3, #4]
 80036c0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d007      	beq.n	80036d8 <I2C_MASTER_AbortTransmit+0x28>
  {
#if (I2C_MASTER_INTERRUPT_TX_ENABLED == 1)
    I2C_MASTER_AbortTransmitIRQ(handle);
#endif
  }
  else if (handle->config->transmit_mode == I2C_MASTER_TRANSFER_MODE_DMA)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80036d0:	2b01      	cmp	r3, #1
 80036d2:	d001      	beq.n	80036d8 <I2C_MASTER_AbortTransmit+0x28>
    I2C_MASTER_lAbortTransmitDMA(handle);
#endif
  }
  else
  {
    status = I2C_MASTER_STATUS_FAILURE;
 80036d4:	2301      	movs	r3, #1
 80036d6:	73fb      	strb	r3, [r7, #15]
  }
  handle->channel->PSCR |= USIC_CH_PSR_IICMode_WTDF_Msk; /*clear WDTF*/
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	687a      	ldr	r2, [r7, #4]
 80036de:	6812      	ldr	r2, [r2, #0]
 80036e0:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80036e2:	f042 0202 	orr.w	r2, r2, #2
 80036e6:	64da      	str	r2, [r3, #76]	; 0x4c
  handle->channel->FMR = 0x00000002U;/*clear TDV*/
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	2202      	movs	r2, #2
 80036ee:	669a      	str	r2, [r3, #104]	; 0x68

  return (status);
 80036f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80036f2:	4618      	mov	r0, r3
 80036f4:	3714      	adds	r7, #20
 80036f6:	46bd      	mov	sp, r7
 80036f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fc:	4770      	bx	lr
 80036fe:	bf00      	nop

08003700 <I2C_MASTER_lStartTransmitPolling>:

#if (I2C_MASTER_DIRECT_TX_ENABLED == 1)
static I2C_MASTER_STATUS_t I2C_MASTER_lStartTransmitPolling(I2C_MASTER_t *const handle, bool send_start,
                                                        const uint32_t slave_address, uint8_t *data,uint32_t size,
                              bool send_stop)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b086      	sub	sp, #24
 8003704:	af00      	add	r7, sp, #0
 8003706:	60f8      	str	r0, [r7, #12]
 8003708:	607a      	str	r2, [r7, #4]
 800370a:	603b      	str	r3, [r7, #0]
 800370c:	460b      	mov	r3, r1
 800370e:	72fb      	strb	r3, [r7, #11]
  uint32_t buffer_index;
  I2C_MASTER_STATUS_t status;

  status = I2C_MASTER_STATUS_BUSY;
 8003710:	2302      	movs	r3, #2
 8003712:	74fb      	strb	r3, [r7, #19]

  buffer_index = 0U;
 8003714:	2300      	movs	r3, #0
 8003716:	617b      	str	r3, [r7, #20]

  if ((((send_start == false) && (handle->runtime->bus_acquired == false)) || (data == NULL) || (size == 0U)))
 8003718:	7afb      	ldrb	r3, [r7, #11]
 800371a:	f083 0301 	eor.w	r3, r3, #1
 800371e:	b2db      	uxtb	r3, r3
 8003720:	2b00      	cmp	r3, #0
 8003722:	d009      	beq.n	8003738 <I2C_MASTER_lStartTransmitPolling+0x38>
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	689b      	ldr	r3, [r3, #8]
 8003728:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800372c:	b2db      	uxtb	r3, r3
 800372e:	f083 0301 	eor.w	r3, r3, #1
 8003732:	b2db      	uxtb	r3, r3
 8003734:	2b00      	cmp	r3, #0
 8003736:	d105      	bne.n	8003744 <I2C_MASTER_lStartTransmitPolling+0x44>
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d002      	beq.n	8003744 <I2C_MASTER_lStartTransmitPolling+0x44>
 800373e:	6a3b      	ldr	r3, [r7, #32]
 8003740:	2b00      	cmp	r3, #0
 8003742:	d102      	bne.n	800374a <I2C_MASTER_lStartTransmitPolling+0x4a>
  {
    status = I2C_MASTER_STATUS_FAILURE;
 8003744:	2301      	movs	r3, #1
 8003746:	74fb      	strb	r3, [r7, #19]
 8003748:	e09e      	b.n	8003888 <I2C_MASTER_lStartTransmitPolling+0x188>
  }
  else
  {
    if (send_start == true)
 800374a:	7afb      	ldrb	r3, [r7, #11]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d02c      	beq.n	80037aa <I2C_MASTER_lStartTransmitPolling+0xaa>
    {
      if (handle->runtime->bus_acquired == false)
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	689b      	ldr	r3, [r3, #8]
 8003754:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003758:	b2db      	uxtb	r3, r3
 800375a:	f083 0301 	eor.w	r3, r3, #1
 800375e:	b2db      	uxtb	r3, r3
 8003760:	2b00      	cmp	r3, #0
 8003762:	d022      	beq.n	80037aa <I2C_MASTER_lStartTransmitPolling+0xaa>
      {
        I2C_MASTER_lSendStart_Or_RepeatedStart(handle, slave_address, XMC_I2C_CH_CMD_WRITE);
 8003764:	68f8      	ldr	r0, [r7, #12]
 8003766:	6879      	ldr	r1, [r7, #4]
 8003768:	2200      	movs	r2, #0
 800376a:	f7ff ff71 	bl	8003650 <I2C_MASTER_lSendStart_Or_RepeatedStart>
        while (I2C_MASTER_GetFlagStatus(handle, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED | XMC_I2C_CH_STATUS_FLAG_NACK_RECEIVED) == 0U);
 800376e:	bf00      	nop
 8003770:	68f8      	ldr	r0, [r7, #12]
 8003772:	f44f 7108 	mov.w	r1, #544	; 0x220
 8003776:	f7ff fef5 	bl	8003564 <I2C_MASTER_GetFlagStatus>
 800377a:	4603      	mov	r3, r0
 800377c:	2b00      	cmp	r3, #0
 800377e:	d0f7      	beq.n	8003770 <I2C_MASTER_lStartTransmitPolling+0x70>
        if (I2C_MASTER_GetFlagStatus(handle, XMC_I2C_CH_STATUS_FLAG_NACK_RECEIVED))
 8003780:	68f8      	ldr	r0, [r7, #12]
 8003782:	2120      	movs	r1, #32
 8003784:	f7ff feee 	bl	8003564 <I2C_MASTER_GetFlagStatus>
 8003788:	4603      	mov	r3, r0
 800378a:	2b00      	cmp	r3, #0
 800378c:	d008      	beq.n	80037a0 <I2C_MASTER_lStartTransmitPolling+0xa0>
        {
          I2C_MASTER_ClearFlag(handle, (uint32_t)XMC_I2C_CH_STATUS_FLAG_NACK_RECEIVED);
 800378e:	68f8      	ldr	r0, [r7, #12]
 8003790:	2120      	movs	r1, #32
 8003792:	f7ff fef9 	bl	8003588 <I2C_MASTER_ClearFlag>
          I2C_MASTER_AbortTransmit(handle);
 8003796:	68f8      	ldr	r0, [r7, #12]
 8003798:	f7ff ff8a 	bl	80036b0 <I2C_MASTER_AbortTransmit>
          return I2C_MASTER_STATUS_FAILURE;
 800379c:	2301      	movs	r3, #1
 800379e:	e074      	b.n	800388a <I2C_MASTER_lStartTransmitPolling+0x18a>
        }
        else
        {
          I2C_MASTER_ClearFlag(handle, (uint32_t)XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
 80037a0:	68f8      	ldr	r0, [r7, #12]
 80037a2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80037a6:	f7ff feef 	bl	8003588 <I2C_MASTER_ClearFlag>
        }
      }
    }
      
    if (handle->config->txFIFO_size == XMC_USIC_CH_FIFO_DISABLED)
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d12e      	bne.n	8003814 <I2C_MASTER_lStartTransmitPolling+0x114>
    {
      /* send data, byte by byte */
      while (buffer_index < size)
 80037b6:	e028      	b.n	800380a <I2C_MASTER_lStartTransmitPolling+0x10a>
      {
        I2C_MASTER_TransmitByte(handle, data[buffer_index]);
 80037b8:	683a      	ldr	r2, [r7, #0]
 80037ba:	697b      	ldr	r3, [r7, #20]
 80037bc:	4413      	add	r3, r2
 80037be:	781b      	ldrb	r3, [r3, #0]
 80037c0:	68f8      	ldr	r0, [r7, #12]
 80037c2:	4619      	mov	r1, r3
 80037c4:	f7ff fe4a 	bl	800345c <I2C_MASTER_TransmitByte>
        while (I2C_MASTER_GetFlagStatus(handle, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED | XMC_I2C_CH_STATUS_FLAG_NACK_RECEIVED) == 0U);
 80037c8:	bf00      	nop
 80037ca:	68f8      	ldr	r0, [r7, #12]
 80037cc:	f44f 7108 	mov.w	r1, #544	; 0x220
 80037d0:	f7ff fec8 	bl	8003564 <I2C_MASTER_GetFlagStatus>
 80037d4:	4603      	mov	r3, r0
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d0f7      	beq.n	80037ca <I2C_MASTER_lStartTransmitPolling+0xca>
        if (I2C_MASTER_GetFlagStatus(handle, XMC_I2C_CH_STATUS_FLAG_NACK_RECEIVED))
 80037da:	68f8      	ldr	r0, [r7, #12]
 80037dc:	2120      	movs	r1, #32
 80037de:	f7ff fec1 	bl	8003564 <I2C_MASTER_GetFlagStatus>
 80037e2:	4603      	mov	r3, r0
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d008      	beq.n	80037fa <I2C_MASTER_lStartTransmitPolling+0xfa>
        {
          I2C_MASTER_ClearFlag(handle, (uint32_t)XMC_I2C_CH_STATUS_FLAG_NACK_RECEIVED);
 80037e8:	68f8      	ldr	r0, [r7, #12]
 80037ea:	2120      	movs	r1, #32
 80037ec:	f7ff fecc 	bl	8003588 <I2C_MASTER_ClearFlag>
          I2C_MASTER_AbortTransmit(handle);
 80037f0:	68f8      	ldr	r0, [r7, #12]
 80037f2:	f7ff ff5d 	bl	80036b0 <I2C_MASTER_AbortTransmit>
          return I2C_MASTER_STATUS_FAILURE;
 80037f6:	2301      	movs	r3, #1
 80037f8:	e047      	b.n	800388a <I2C_MASTER_lStartTransmitPolling+0x18a>
        }
        else
        {
          I2C_MASTER_ClearFlag(handle, (uint32_t)XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
 80037fa:	68f8      	ldr	r0, [r7, #12]
 80037fc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003800:	f7ff fec2 	bl	8003588 <I2C_MASTER_ClearFlag>
        }

        buffer_index++;
 8003804:	697b      	ldr	r3, [r7, #20]
 8003806:	3301      	adds	r3, #1
 8003808:	617b      	str	r3, [r7, #20]
    }
      
    if (handle->config->txFIFO_size == XMC_USIC_CH_FIFO_DISABLED)
    {
      /* send data, byte by byte */
      while (buffer_index < size)
 800380a:	697a      	ldr	r2, [r7, #20]
 800380c:	6a3b      	ldr	r3, [r7, #32]
 800380e:	429a      	cmp	r2, r3
 8003810:	d3d2      	bcc.n	80037b8 <I2C_MASTER_lStartTransmitPolling+0xb8>
 8003812:	e02b      	b.n	800386c <I2C_MASTER_lStartTransmitPolling+0x16c>
        buffer_index++;
      }
    }
    else
    {
      while (buffer_index < size)
 8003814:	e01a      	b.n	800384c <I2C_MASTER_lStartTransmitPolling+0x14c>
      {
        /* Fill the transmit FIFO */
        while (I2C_MASTER_IsTXFIFOFull(handle) == false)
 8003816:	e010      	b.n	800383a <I2C_MASTER_lStartTransmitPolling+0x13a>
        {
          /* transmit each byte till index reaches to the last byte */
          if (buffer_index < size)
 8003818:	697a      	ldr	r2, [r7, #20]
 800381a:	6a3b      	ldr	r3, [r7, #32]
 800381c:	429a      	cmp	r2, r3
 800381e:	d20b      	bcs.n	8003838 <I2C_MASTER_lStartTransmitPolling+0x138>
          {
            /* load the FIFO, byte by byte till either FIFO is full or all data is loaded*/
            I2C_MASTER_TransmitByte(handle, data[buffer_index]);
 8003820:	683a      	ldr	r2, [r7, #0]
 8003822:	697b      	ldr	r3, [r7, #20]
 8003824:	4413      	add	r3, r2
 8003826:	781b      	ldrb	r3, [r3, #0]
 8003828:	68f8      	ldr	r0, [r7, #12]
 800382a:	4619      	mov	r1, r3
 800382c:	f7ff fe16 	bl	800345c <I2C_MASTER_TransmitByte>
            buffer_index++;
 8003830:	697b      	ldr	r3, [r7, #20]
 8003832:	3301      	adds	r3, #1
 8003834:	617b      	str	r3, [r7, #20]
 8003836:	e000      	b.n	800383a <I2C_MASTER_lStartTransmitPolling+0x13a>
          }
          else
          {
            break;
 8003838:	e008      	b.n	800384c <I2C_MASTER_lStartTransmitPolling+0x14c>
    else
    {
      while (buffer_index < size)
      {
        /* Fill the transmit FIFO */
        while (I2C_MASTER_IsTXFIFOFull(handle) == false)
 800383a:	68f8      	ldr	r0, [r7, #12]
 800383c:	f7ff fde4 	bl	8003408 <I2C_MASTER_IsTXFIFOFull>
 8003840:	4603      	mov	r3, r0
 8003842:	f083 0301 	eor.w	r3, r3, #1
 8003846:	b2db      	uxtb	r3, r3
 8003848:	2b00      	cmp	r3, #0
 800384a:	d1e5      	bne.n	8003818 <I2C_MASTER_lStartTransmitPolling+0x118>
        buffer_index++;
      }
    }
    else
    {
      while (buffer_index < size)
 800384c:	697a      	ldr	r2, [r7, #20]
 800384e:	6a3b      	ldr	r3, [r7, #32]
 8003850:	429a      	cmp	r2, r3
 8003852:	d3e0      	bcc.n	8003816 <I2C_MASTER_lStartTransmitPolling+0x116>
          }
        }
      }
      
      /*make sure data is transmitted from FIFO*/
      while (!XMC_USIC_CH_TXFIFO_IsEmpty(handle->channel)){}
 8003854:	bf00      	nop
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4618      	mov	r0, r3
 800385c:	f7ff fd90 	bl	8003380 <XMC_USIC_CH_TXFIFO_IsEmpty>
 8003860:	4603      	mov	r3, r0
 8003862:	f083 0301 	eor.w	r3, r3, #1
 8003866:	b2db      	uxtb	r3, r3
 8003868:	2b00      	cmp	r3, #0
 800386a:	d1f4      	bne.n	8003856 <I2C_MASTER_lStartTransmitPolling+0x156>
    }

    if(send_stop == true)
 800386c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003870:	2b00      	cmp	r3, #0
 8003872:	d007      	beq.n	8003884 <I2C_MASTER_lStartTransmitPolling+0x184>
    {
      handle->runtime->bus_acquired = false;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	689b      	ldr	r3, [r3, #8]
 8003878:	2200      	movs	r2, #0
 800387a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
      I2C_MASTER_SendStop(handle);
 800387e:	68f8      	ldr	r0, [r7, #12]
 8003880:	f7ff fe14 	bl	80034ac <I2C_MASTER_SendStop>
    }

    status = I2C_MASTER_STATUS_SUCCESS;
 8003884:	2300      	movs	r3, #0
 8003886:	74fb      	strb	r3, [r7, #19]
  }

  return (status);
 8003888:	7cfb      	ldrb	r3, [r7, #19]
}
 800388a:	4618      	mov	r0, r3
 800388c:	3718      	adds	r7, #24
 800388e:	46bd      	mov	sp, r7
 8003890:	bd80      	pop	{r7, pc}
 8003892:	bf00      	nop

08003894 <I2C_MASTER_lStartReceivePolling>:

#if (I2C_MASTER_DIRECT_RX_ENABLED == 1)
static I2C_MASTER_STATUS_t I2C_MASTER_lStartReceivePolling(I2C_MASTER_t *const handle, bool send_start,
                                                       uint32_t slave_address, uint8_t *data, uint32_t count,
                               bool send_stop, bool send_nack)
{
 8003894:	b590      	push	{r4, r7, lr}
 8003896:	b089      	sub	sp, #36	; 0x24
 8003898:	af00      	add	r7, sp, #0
 800389a:	60f8      	str	r0, [r7, #12]
 800389c:	607a      	str	r2, [r7, #4]
 800389e:	603b      	str	r3, [r7, #0]
 80038a0:	460b      	mov	r3, r1
 80038a2:	72fb      	strb	r3, [r7, #11]
  I2C_MASTER_STATUS_t status;
  uint32_t buffer_index;
  uint32_t temp_index;

  status = I2C_MASTER_STATUS_BUSY;
 80038a4:	2302      	movs	r3, #2
 80038a6:	77fb      	strb	r3, [r7, #31]
  if ((((send_start == false) && (handle->runtime->bus_acquired == false)) || (data == NULL) || (count == 0U)))
 80038a8:	7afb      	ldrb	r3, [r7, #11]
 80038aa:	f083 0301 	eor.w	r3, r3, #1
 80038ae:	b2db      	uxtb	r3, r3
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d009      	beq.n	80038c8 <I2C_MASTER_lStartReceivePolling+0x34>
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	689b      	ldr	r3, [r3, #8]
 80038b8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80038bc:	b2db      	uxtb	r3, r3
 80038be:	f083 0301 	eor.w	r3, r3, #1
 80038c2:	b2db      	uxtb	r3, r3
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d105      	bne.n	80038d4 <I2C_MASTER_lStartReceivePolling+0x40>
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d002      	beq.n	80038d4 <I2C_MASTER_lStartReceivePolling+0x40>
 80038ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d102      	bne.n	80038da <I2C_MASTER_lStartReceivePolling+0x46>
  {
    status = I2C_MASTER_STATUS_FAILURE;
 80038d4:	2301      	movs	r3, #1
 80038d6:	77fb      	strb	r3, [r7, #31]
 80038d8:	e0b8      	b.n	8003a4c <I2C_MASTER_lStartReceivePolling+0x1b8>
  }
  else
  {
    buffer_index = 0U;
 80038da:	2300      	movs	r3, #0
 80038dc:	61bb      	str	r3, [r7, #24]
    temp_index = 0U;
 80038de:	2300      	movs	r3, #0
 80038e0:	617b      	str	r3, [r7, #20]
    if (send_start == true)
 80038e2:	7afb      	ldrb	r3, [r7, #11]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d022      	beq.n	800392e <I2C_MASTER_lStartReceivePolling+0x9a>
    {
      I2C_MASTER_lSendStart_Or_RepeatedStart(handle, slave_address, XMC_I2C_CH_CMD_READ);
 80038e8:	68f8      	ldr	r0, [r7, #12]
 80038ea:	6879      	ldr	r1, [r7, #4]
 80038ec:	2201      	movs	r2, #1
 80038ee:	f7ff feaf 	bl	8003650 <I2C_MASTER_lSendStart_Or_RepeatedStart>
      while (I2C_MASTER_GetFlagStatus(handle, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED | XMC_I2C_CH_STATUS_FLAG_NACK_RECEIVED) == 0U);
 80038f2:	bf00      	nop
 80038f4:	68f8      	ldr	r0, [r7, #12]
 80038f6:	f44f 7108 	mov.w	r1, #544	; 0x220
 80038fa:	f7ff fe33 	bl	8003564 <I2C_MASTER_GetFlagStatus>
 80038fe:	4603      	mov	r3, r0
 8003900:	2b00      	cmp	r3, #0
 8003902:	d0f7      	beq.n	80038f4 <I2C_MASTER_lStartReceivePolling+0x60>
      if (I2C_MASTER_GetFlagStatus(handle, XMC_I2C_CH_STATUS_FLAG_NACK_RECEIVED))
 8003904:	68f8      	ldr	r0, [r7, #12]
 8003906:	2120      	movs	r1, #32
 8003908:	f7ff fe2c 	bl	8003564 <I2C_MASTER_GetFlagStatus>
 800390c:	4603      	mov	r3, r0
 800390e:	2b00      	cmp	r3, #0
 8003910:	d008      	beq.n	8003924 <I2C_MASTER_lStartReceivePolling+0x90>
      {
        I2C_MASTER_ClearFlag(handle, (uint32_t)XMC_I2C_CH_STATUS_FLAG_NACK_RECEIVED);
 8003912:	68f8      	ldr	r0, [r7, #12]
 8003914:	2120      	movs	r1, #32
 8003916:	f7ff fe37 	bl	8003588 <I2C_MASTER_ClearFlag>
        I2C_MASTER_AbortTransmit(handle);
 800391a:	68f8      	ldr	r0, [r7, #12]
 800391c:	f7ff fec8 	bl	80036b0 <I2C_MASTER_AbortTransmit>
        return I2C_MASTER_STATUS_FAILURE;
 8003920:	2301      	movs	r3, #1
 8003922:	e094      	b.n	8003a4e <I2C_MASTER_lStartReceivePolling+0x1ba>
      }
      else
      {
        I2C_MASTER_ClearFlag(handle, (uint32_t)XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
 8003924:	68f8      	ldr	r0, [r7, #12]
 8003926:	f44f 7100 	mov.w	r1, #512	; 0x200
 800392a:	f7ff fe2d 	bl	8003588 <I2C_MASTER_ClearFlag>
      }
    }

    if (handle->config->txFIFO_size == XMC_USIC_CH_FIFO_DISABLED)
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8003936:	2b00      	cmp	r3, #0
 8003938:	d13a      	bne.n	80039b0 <I2C_MASTER_lStartReceivePolling+0x11c>
    {
      while (buffer_index < count)
 800393a:	e034      	b.n	80039a6 <I2C_MASTER_lStartReceivePolling+0x112>
      {
        if (((buffer_index + 1U) == count) && (send_nack == true))
 800393c:	69bb      	ldr	r3, [r7, #24]
 800393e:	1c5a      	adds	r2, r3, #1
 8003940:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003942:	429a      	cmp	r2, r3
 8003944:	d107      	bne.n	8003956 <I2C_MASTER_lStartReceivePolling+0xc2>
 8003946:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800394a:	2b00      	cmp	r3, #0
 800394c:	d003      	beq.n	8003956 <I2C_MASTER_lStartReceivePolling+0xc2>
        {
          I2C_MASTER_ReceiveNACK(handle);
 800394e:	68f8      	ldr	r0, [r7, #12]
 8003950:	f7ff fda0 	bl	8003494 <I2C_MASTER_ReceiveNACK>
 8003954:	e002      	b.n	800395c <I2C_MASTER_lStartReceivePolling+0xc8>
        }
        else
        {
          I2C_MASTER_ReceiveACK(handle);
 8003956:	68f8      	ldr	r0, [r7, #12]
 8003958:	f7ff fd90 	bl	800347c <I2C_MASTER_ReceiveACK>
        }

        while ((I2C_MASTER_GetFlagStatus(handle, (uint32_t)XMC_I2C_CH_STATUS_FLAG_ALTERNATIVE_RECEIVE_INDICATION) == 0U) &&
 800395c:	bf00      	nop
 800395e:	68f8      	ldr	r0, [r7, #12]
 8003960:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003964:	f7ff fdfe 	bl	8003564 <I2C_MASTER_GetFlagStatus>
 8003968:	4603      	mov	r3, r0
 800396a:	2b00      	cmp	r3, #0
 800396c:	d107      	bne.n	800397e <I2C_MASTER_lStartReceivePolling+0xea>
               (I2C_MASTER_GetFlagStatus(handle, (uint32_t)XMC_I2C_CH_STATUS_FLAG_RECEIVE_INDICATION) == 0U))
 800396e:	68f8      	ldr	r0, [r7, #12]
 8003970:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003974:	f7ff fdf6 	bl	8003564 <I2C_MASTER_GetFlagStatus>
 8003978:	4603      	mov	r3, r0
        else
        {
          I2C_MASTER_ReceiveACK(handle);
        }

        while ((I2C_MASTER_GetFlagStatus(handle, (uint32_t)XMC_I2C_CH_STATUS_FLAG_ALTERNATIVE_RECEIVE_INDICATION) == 0U) &&
 800397a:	2b00      	cmp	r3, #0
 800397c:	d0ef      	beq.n	800395e <I2C_MASTER_lStartReceivePolling+0xca>
               (I2C_MASTER_GetFlagStatus(handle, (uint32_t)XMC_I2C_CH_STATUS_FLAG_RECEIVE_INDICATION) == 0U))
        {
          /* wait for RSI */
        }

        I2C_MASTER_ClearFlag(handle, (uint32_t)XMC_I2C_CH_STATUS_FLAG_ALTERNATIVE_RECEIVE_INDICATION);
 800397e:	68f8      	ldr	r0, [r7, #12]
 8003980:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003984:	f7ff fe00 	bl	8003588 <I2C_MASTER_ClearFlag>
        I2C_MASTER_ClearFlag(handle, (uint32_t)XMC_I2C_CH_STATUS_FLAG_RECEIVE_INDICATION);
 8003988:	68f8      	ldr	r0, [r7, #12]
 800398a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800398e:	f7ff fdfb 	bl	8003588 <I2C_MASTER_ClearFlag>

        data[buffer_index++] = I2C_MASTER_GetReceivedByte(handle);
 8003992:	69bb      	ldr	r3, [r7, #24]
 8003994:	1c5a      	adds	r2, r3, #1
 8003996:	61ba      	str	r2, [r7, #24]
 8003998:	683a      	ldr	r2, [r7, #0]
 800399a:	18d4      	adds	r4, r2, r3
 800399c:	68f8      	ldr	r0, [r7, #12]
 800399e:	f7ff fd4f 	bl	8003440 <I2C_MASTER_GetReceivedByte>
 80039a2:	4603      	mov	r3, r0
 80039a4:	7023      	strb	r3, [r4, #0]
      }
    }

    if (handle->config->txFIFO_size == XMC_USIC_CH_FIFO_DISABLED)
    {
      while (buffer_index < count)
 80039a6:	69ba      	ldr	r2, [r7, #24]
 80039a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039aa:	429a      	cmp	r2, r3
 80039ac:	d3c6      	bcc.n	800393c <I2C_MASTER_lStartReceivePolling+0xa8>
 80039ae:	e03f      	b.n	8003a30 <I2C_MASTER_lStartReceivePolling+0x19c>
        data[buffer_index++] = I2C_MASTER_GetReceivedByte(handle);
      }
    } /* end of if (handle->config->txFIFO_size == XMC_USIC_CH_FIFO_DISABLED) */
    else
    {
      temp_index = buffer_index;
 80039b0:	69bb      	ldr	r3, [r7, #24]
 80039b2:	617b      	str	r3, [r7, #20]
      while (temp_index < count)
 80039b4:	e038      	b.n	8003a28 <I2C_MASTER_lStartReceivePolling+0x194>
      {
        while (I2C_MASTER_IsTXFIFOFull(handle) == false)
 80039b6:	e018      	b.n	80039ea <I2C_MASTER_lStartReceivePolling+0x156>
        {
          /* transmit each byte till index reaches to the last byte */
          if (temp_index < count)
 80039b8:	697a      	ldr	r2, [r7, #20]
 80039ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039bc:	429a      	cmp	r2, r3
 80039be:	d213      	bcs.n	80039e8 <I2C_MASTER_lStartReceivePolling+0x154>
          {
            /* load the FIFO, byte by byte till either FIFO is full or all data is loaded*/
            if (((temp_index + 1U) == count) && (send_nack == true))
 80039c0:	697b      	ldr	r3, [r7, #20]
 80039c2:	1c5a      	adds	r2, r3, #1
 80039c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039c6:	429a      	cmp	r2, r3
 80039c8:	d107      	bne.n	80039da <I2C_MASTER_lStartReceivePolling+0x146>
 80039ca:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d003      	beq.n	80039da <I2C_MASTER_lStartReceivePolling+0x146>
            {
              I2C_MASTER_ReceiveNACK(handle);
 80039d2:	68f8      	ldr	r0, [r7, #12]
 80039d4:	f7ff fd5e 	bl	8003494 <I2C_MASTER_ReceiveNACK>
 80039d8:	e002      	b.n	80039e0 <I2C_MASTER_lStartReceivePolling+0x14c>
            }
            else
            {
              I2C_MASTER_ReceiveACK(handle);
 80039da:	68f8      	ldr	r0, [r7, #12]
 80039dc:	f7ff fd4e 	bl	800347c <I2C_MASTER_ReceiveACK>
            }
            temp_index++;
 80039e0:	697b      	ldr	r3, [r7, #20]
 80039e2:	3301      	adds	r3, #1
 80039e4:	617b      	str	r3, [r7, #20]
 80039e6:	e000      	b.n	80039ea <I2C_MASTER_lStartReceivePolling+0x156>
          }
          else
          {
            break;
 80039e8:	e008      	b.n	80039fc <I2C_MASTER_lStartReceivePolling+0x168>
    else
    {
      temp_index = buffer_index;
      while (temp_index < count)
      {
        while (I2C_MASTER_IsTXFIFOFull(handle) == false)
 80039ea:	68f8      	ldr	r0, [r7, #12]
 80039ec:	f7ff fd0c 	bl	8003408 <I2C_MASTER_IsTXFIFOFull>
 80039f0:	4603      	mov	r3, r0
 80039f2:	f083 0301 	eor.w	r3, r3, #1
 80039f6:	b2db      	uxtb	r3, r3
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d1dd      	bne.n	80039b8 <I2C_MASTER_lStartReceivePolling+0x124>
          {
            break;
          }
        } /* end of while (I2C_MASTER_IsTXFIFOFull(handle) == false) */

        while (buffer_index < temp_index)
 80039fc:	e010      	b.n	8003a20 <I2C_MASTER_lStartReceivePolling+0x18c>
        {
          /* wait for data to come in RX fifo */
          while (I2C_MASTER_IsRXFIFOEmpty(handle)){}
 80039fe:	bf00      	nop
 8003a00:	68f8      	ldr	r0, [r7, #12]
 8003a02:	f7ff fd0f 	bl	8003424 <I2C_MASTER_IsRXFIFOEmpty>
 8003a06:	4603      	mov	r3, r0
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d1f9      	bne.n	8003a00 <I2C_MASTER_lStartReceivePolling+0x16c>
          data[buffer_index++] = I2C_MASTER_GetReceivedByte(handle);
 8003a0c:	69bb      	ldr	r3, [r7, #24]
 8003a0e:	1c5a      	adds	r2, r3, #1
 8003a10:	61ba      	str	r2, [r7, #24]
 8003a12:	683a      	ldr	r2, [r7, #0]
 8003a14:	18d4      	adds	r4, r2, r3
 8003a16:	68f8      	ldr	r0, [r7, #12]
 8003a18:	f7ff fd12 	bl	8003440 <I2C_MASTER_GetReceivedByte>
 8003a1c:	4603      	mov	r3, r0
 8003a1e:	7023      	strb	r3, [r4, #0]
          {
            break;
          }
        } /* end of while (I2C_MASTER_IsTXFIFOFull(handle) == false) */

        while (buffer_index < temp_index)
 8003a20:	69ba      	ldr	r2, [r7, #24]
 8003a22:	697b      	ldr	r3, [r7, #20]
 8003a24:	429a      	cmp	r2, r3
 8003a26:	d3ea      	bcc.n	80039fe <I2C_MASTER_lStartReceivePolling+0x16a>
      }
    } /* end of if (handle->config->txFIFO_size == XMC_USIC_CH_FIFO_DISABLED) */
    else
    {
      temp_index = buffer_index;
      while (temp_index < count)
 8003a28:	697a      	ldr	r2, [r7, #20]
 8003a2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a2c:	429a      	cmp	r2, r3
 8003a2e:	d3c2      	bcc.n	80039b6 <I2C_MASTER_lStartReceivePolling+0x122>
          data[buffer_index++] = I2C_MASTER_GetReceivedByte(handle);
        }
      } /* end of while (temp_index < count) */
    } /* end of else */

    if (send_stop == true)
 8003a30:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d007      	beq.n	8003a48 <I2C_MASTER_lStartReceivePolling+0x1b4>
    {
      handle->runtime->bus_acquired = false;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	689b      	ldr	r3, [r3, #8]
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
      I2C_MASTER_SendStop(handle);
 8003a42:	68f8      	ldr	r0, [r7, #12]
 8003a44:	f7ff fd32 	bl	80034ac <I2C_MASTER_SendStop>
    }

    status = I2C_MASTER_STATUS_SUCCESS;
 8003a48:	2300      	movs	r3, #0
 8003a4a:	77fb      	strb	r3, [r7, #31]
  }

  return (status);
 8003a4c:	7ffb      	ldrb	r3, [r7, #31]
}
 8003a4e:	4618      	mov	r0, r3
 8003a50:	3724      	adds	r7, #36	; 0x24
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bd90      	pop	{r4, r7, pc}
 8003a56:	bf00      	nop

08003a58 <XMC_USIC_CH_SetInputSource>:
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableInputSync(),
 * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INPUT_t input, const uint8_t source)
{
 8003a58:	b480      	push	{r7}
 8003a5a:	b083      	sub	sp, #12
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
 8003a60:	460b      	mov	r3, r1
 8003a62:	70fb      	strb	r3, [r7, #3]
 8003a64:	4613      	mov	r3, r2
 8003a66:	70bb      	strb	r3, [r7, #2]
  channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
 8003a68:	78f8      	ldrb	r0, [r7, #3]
 8003a6a:	78fb      	ldrb	r3, [r7, #3]
 8003a6c:	687a      	ldr	r2, [r7, #4]
 8003a6e:	3306      	adds	r3, #6
 8003a70:	009b      	lsls	r3, r3, #2
 8003a72:	4413      	add	r3, r2
 8003a74:	685b      	ldr	r3, [r3, #4]
 8003a76:	f023 0207 	bic.w	r2, r3, #7
                                    ((uint32_t)source << USIC_CH_DXCR_DSEL_Pos));
 8003a7a:	78bb      	ldrb	r3, [r7, #2]
 * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableInputSync(),
 * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INPUT_t input, const uint8_t source)
{
  channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
 8003a7c:	431a      	orrs	r2, r3
 8003a7e:	6879      	ldr	r1, [r7, #4]
 8003a80:	1d83      	adds	r3, r0, #6
 8003a82:	009b      	lsls	r3, r3, #2
 8003a84:	440b      	add	r3, r1
 8003a86:	605a      	str	r2, [r3, #4]
                                    ((uint32_t)source << USIC_CH_DXCR_DSEL_Pos));
}
 8003a88:	370c      	adds	r7, #12
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a90:	4770      	bx	lr
 8003a92:	bf00      	nop

08003a94 <XMC_USIC_CH_SetMode>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_Enable(), XMC_USIC_CH_Enable() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetMode(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_OPERATING_MODE_t mode)
{
 8003a94:	b480      	push	{r7}
 8003a96:	b083      	sub	sp, #12
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
 8003a9c:	460b      	mov	r3, r1
 8003a9e:	70fb      	strb	r3, [r7, #3]
  channel->CCR = (uint32_t)(channel->CCR & (~(USIC_CH_CCR_MODE_Msk))) | (uint32_t)mode;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aa4:	f023 020f 	bic.w	r2, r3, #15
 8003aa8:	78fb      	ldrb	r3, [r7, #3]
 8003aaa:	431a      	orrs	r2, r3
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	641a      	str	r2, [r3, #64]	; 0x40
}
 8003ab0:	370c      	adds	r7, #12
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab8:	4770      	bx	lr
 8003aba:	bf00      	nop

08003abc <XMC_I2C_CH_Init>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_USIC_CH_Enable()\n\n
 */
__STATIC_INLINE void XMC_I2C_CH_Init(XMC_USIC_CH_t *const channel, const XMC_I2C_CH_CONFIG_t *const config)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b082      	sub	sp, #8
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
 8003ac4:	6039      	str	r1, [r7, #0]
  XMC_I2C_CH_InitEx(channel, config, true);
 8003ac6:	6878      	ldr	r0, [r7, #4]
 8003ac8:	6839      	ldr	r1, [r7, #0]
 8003aca:	2201      	movs	r2, #1
 8003acc:	f7fd ff74 	bl	80019b8 <XMC_I2C_CH_InitEx>
}
 8003ad0:	3708      	adds	r7, #8
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	bd80      	pop	{r7, pc}
 8003ad6:	bf00      	nop

08003ad8 <XMC_I2C_CH_Start>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_USIC_CH_SetMode()\n\n
 */
__STATIC_INLINE void XMC_I2C_CH_Start(XMC_USIC_CH_t *const channel)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b082      	sub	sp, #8
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
  XMC_USIC_CH_SetMode(channel, XMC_USIC_CH_OPERATING_MODE_I2C);
 8003ae0:	6878      	ldr	r0, [r7, #4]
 8003ae2:	2104      	movs	r1, #4
 8003ae4:	f7ff ffd6 	bl	8003a94 <XMC_USIC_CH_SetMode>
}
 8003ae8:	3708      	adds	r7, #8
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bd80      	pop	{r7, pc}
 8003aee:	bf00      	nop

08003af0 <I2C_MASTER_0_disable_io>:
  .baudrate = (uint32_t)(100000U),
  .address  = 0
};

static void I2C_MASTER_0_disable_io(void)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	af00      	add	r7, sp, #0
  XMC_GPIO_SetMode((XMC_GPIO_PORT_t *)PORT2_BASE, (uint8_t)5, XMC_GPIO_MODE_INPUT_TRISTATE);
 8003af4:	4805      	ldr	r0, [pc, #20]	; (8003b0c <I2C_MASTER_0_disable_io+0x1c>)
 8003af6:	2105      	movs	r1, #5
 8003af8:	2200      	movs	r2, #0
 8003afa:	f7fd fedb 	bl	80018b4 <XMC_GPIO_SetMode>
  XMC_GPIO_SetMode((XMC_GPIO_PORT_t *)PORT3_BASE, (uint8_t)0, XMC_GPIO_MODE_INPUT_TRISTATE);
 8003afe:	4804      	ldr	r0, [pc, #16]	; (8003b10 <I2C_MASTER_0_disable_io+0x20>)
 8003b00:	2100      	movs	r1, #0
 8003b02:	2200      	movs	r2, #0
 8003b04:	f7fd fed6 	bl	80018b4 <XMC_GPIO_SetMode>
}
 8003b08:	bd80      	pop	{r7, pc}
 8003b0a:	bf00      	nop
 8003b0c:	48028200 	.word	0x48028200
 8003b10:	48028300 	.word	0x48028300

08003b14 <I2C_MASTER_0_enable_io>:

static void I2C_MASTER_0_enable_io(void)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	af00      	add	r7, sp, #0
  XMC_GPIO_SetMode((XMC_GPIO_PORT_t *)PORT2_BASE, (uint8_t)5, I2C_MASTER_0_sda_pin_config.mode);
 8003b18:	23d0      	movs	r3, #208	; 0xd0
 8003b1a:	4806      	ldr	r0, [pc, #24]	; (8003b34 <I2C_MASTER_0_enable_io+0x20>)
 8003b1c:	2105      	movs	r1, #5
 8003b1e:	461a      	mov	r2, r3
 8003b20:	f7fd fec8 	bl	80018b4 <XMC_GPIO_SetMode>
  XMC_GPIO_SetMode((XMC_GPIO_PORT_t *)PORT3_BASE, (uint8_t)0, I2C_MASTER_0_scl_pin_config.mode);
 8003b24:	23d0      	movs	r3, #208	; 0xd0
 8003b26:	4804      	ldr	r0, [pc, #16]	; (8003b38 <I2C_MASTER_0_enable_io+0x24>)
 8003b28:	2100      	movs	r1, #0
 8003b2a:	461a      	mov	r2, r3
 8003b2c:	f7fd fec2 	bl	80018b4 <XMC_GPIO_SetMode>
}
 8003b30:	bd80      	pop	{r7, pc}
 8003b32:	bf00      	nop
 8003b34:	48028200 	.word	0x48028200
 8003b38:	48028300 	.word	0x48028300

08003b3c <I2C_MASTER_0_init>:
  .config = &I2C_MASTER_0_config,
  .runtime = &I2C_MASTER_0_runtime,
};

void I2C_MASTER_0_init(void)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	af00      	add	r7, sp, #0
 
  XMC_I2C_CH_Init(XMC_I2C0_CH1, &I2C_MASTER_0_channel_config);
 8003b40:	4813      	ldr	r0, [pc, #76]	; (8003b90 <I2C_MASTER_0_init+0x54>)
 8003b42:	4914      	ldr	r1, [pc, #80]	; (8003b94 <I2C_MASTER_0_init+0x58>)
 8003b44:	f7ff ffba 	bl	8003abc <XMC_I2C_CH_Init>

  XMC_USIC_CH_SetInputSource(XMC_I2C0_CH1, XMC_USIC_CH_INPUT_DX0, 1);
 8003b48:	4811      	ldr	r0, [pc, #68]	; (8003b90 <I2C_MASTER_0_init+0x54>)
 8003b4a:	2100      	movs	r1, #0
 8003b4c:	2201      	movs	r2, #1
 8003b4e:	f7ff ff83 	bl	8003a58 <XMC_USIC_CH_SetInputSource>
  XMC_USIC_CH_SetInputSource(XMC_I2C0_CH1, XMC_USIC_CH_INPUT_DX1, 1);
 8003b52:	480f      	ldr	r0, [pc, #60]	; (8003b90 <I2C_MASTER_0_init+0x54>)
 8003b54:	2101      	movs	r1, #1
 8003b56:	2201      	movs	r2, #1
 8003b58:	f7ff ff7e 	bl	8003a58 <XMC_USIC_CH_SetInputSource>

  /* configure i2c tx fifo */
  XMC_USIC_CH_TXFIFO_Configure(XMC_I2C0_CH1,
 8003b5c:	480c      	ldr	r0, [pc, #48]	; (8003b90 <I2C_MASTER_0_init+0x54>)
 8003b5e:	2110      	movs	r1, #16
 8003b60:	2204      	movs	r2, #4
 8003b62:	2301      	movs	r3, #1
 8003b64:	f7fe fade 	bl	8002124 <XMC_USIC_CH_TXFIFO_Configure>
                               16,
                               XMC_USIC_CH_FIFO_SIZE_16WORDS,
                               (uint32_t)1);
  /* configure i2c rx fifo */
  XMC_USIC_CH_RXFIFO_Configure(XMC_I2C0_CH1,
 8003b68:	4809      	ldr	r0, [pc, #36]	; (8003b90 <I2C_MASTER_0_init+0x54>)
 8003b6a:	2100      	movs	r1, #0
 8003b6c:	2204      	movs	r2, #4
 8003b6e:	230f      	movs	r3, #15
 8003b70:	f7fe fb00 	bl	8002174 <XMC_USIC_CH_RXFIFO_Configure>
                               0,
                               XMC_USIC_CH_FIFO_SIZE_16WORDS,
                                (uint32_t)(15));
  XMC_I2C_CH_Start(XMC_I2C0_CH1);
 8003b74:	4806      	ldr	r0, [pc, #24]	; (8003b90 <I2C_MASTER_0_init+0x54>)
 8003b76:	f7ff ffaf 	bl	8003ad8 <XMC_I2C_CH_Start>

  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT2_BASE, (uint8_t)5, &I2C_MASTER_0_sda_pin_config);
 8003b7a:	4807      	ldr	r0, [pc, #28]	; (8003b98 <I2C_MASTER_0_init+0x5c>)
 8003b7c:	2105      	movs	r1, #5
 8003b7e:	4a07      	ldr	r2, [pc, #28]	; (8003b9c <I2C_MASTER_0_init+0x60>)
 8003b80:	f7fc fc22 	bl	80003c8 <XMC_GPIO_Init>
  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT3_BASE, (uint8_t)0, &I2C_MASTER_0_scl_pin_config);
 8003b84:	4806      	ldr	r0, [pc, #24]	; (8003ba0 <I2C_MASTER_0_init+0x64>)
 8003b86:	2100      	movs	r1, #0
 8003b88:	4a06      	ldr	r2, [pc, #24]	; (8003ba4 <I2C_MASTER_0_init+0x68>)
 8003b8a:	f7fc fc1d 	bl	80003c8 <XMC_GPIO_Init>
}
 8003b8e:	bd80      	pop	{r7, pc}
 8003b90:	40030200 	.word	0x40030200
 8003b94:	08007bd0 	.word	0x08007bd0
 8003b98:	48028200 	.word	0x48028200
 8003b9c:	08007bb8 	.word	0x08007bb8
 8003ba0:	48028300 	.word	0x48028300
 8003ba4:	08007bc4 	.word	0x08007bc4

08003ba8 <XMC_CCU4_StartPrescaler>:
 * \par<b>Related APIs:</b><br>
 * XMC_CCU4_Init()<BR> XMC_CCU4_EnableClock()<BR> XMC_CCU4_DisableClock()<BR> XMC_CCU4_StartPrescaler()<BR>
 * XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_StartPrescaler(XMC_CCU4_MODULE_t *const module)
{
 8003ba8:	b480      	push	{r7}
 8003baa:	b083      	sub	sp, #12
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_StartPrescaler:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  module->GIDLC = (uint32_t) CCU4_GIDLC_SPRB_Msk;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003bb6:	60da      	str	r2, [r3, #12]
}
 8003bb8:	370c      	adds	r7, #12
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc0:	4770      	bx	lr
 8003bc2:	bf00      	nop

08003bc4 <GLOBAL_CCU4_Init>:
  return version;
}

/* Initializes the slice with the generated configuration */
GLOBAL_CCU4_STATUS_t GLOBAL_CCU4_Init(GLOBAL_CCU4_t* handle)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b082      	sub	sp, #8
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("GLOBAL_CCU4_Init:NULL handler", (NULL != handle));

  if (false == handle->is_initialized)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	7b5b      	ldrb	r3, [r3, #13]
 8003bd0:	f083 0301 	eor.w	r3, r3, #1
 8003bd4:	b2db      	uxtb	r3, r3
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d00f      	beq.n	8003bfa <GLOBAL_CCU4_Init+0x36>
  {
    /* Enable CCU4 module */
    XMC_CCU4_Init(handle->module_ptr,handle->mcs_action);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	689a      	ldr	r2, [r3, #8]
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	7b1b      	ldrb	r3, [r3, #12]
 8003be2:	4610      	mov	r0, r2
 8003be4:	4619      	mov	r1, r3
 8003be6:	f7fd fd4b 	bl	8001680 <XMC_CCU4_Init>
    /* Start the prescaler */
    XMC_CCU4_StartPrescaler(handle->module_ptr);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	689b      	ldr	r3, [r3, #8]
 8003bee:	4618      	mov	r0, r3
 8003bf0:	f7ff ffda 	bl	8003ba8 <XMC_CCU4_StartPrescaler>
    /* Restricts multiple initializations */
    handle->is_initialized = true;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2201      	movs	r2, #1
 8003bf8:	735a      	strb	r2, [r3, #13]
  }

  return (GLOBAL_CCU4_STATUS_SUCCESS);
 8003bfa:	2300      	movs	r3, #0
}
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	3708      	adds	r7, #8
 8003c00:	46bd      	mov	sp, r7
 8003c02:	bd80      	pop	{r7, pc}

08003c04 <GLOBAL_CAN_Init>:
  return (version);
}

/*  Function to initialize the CAN Peripheral module clock.  */
GLOBAL_CAN_STATUS_t GLOBAL_CAN_Init(GLOBAL_CAN_t *handle)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b084      	sub	sp, #16
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
  GLOBAL_CAN_STATUS_t status = GLOBAL_CAN_STATUS_SUCCESS;
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	73fb      	strb	r3, [r7, #15]

  XMC_ASSERT("GLOBAL_CAN_Init: handle null", handle != NULL);

  if (handle->init_status != true)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	7a5b      	ldrb	r3, [r3, #9]
 8003c14:	f083 0301 	eor.w	r3, r3, #1
 8003c18:	b2db      	uxtb	r3, r3
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d00d      	beq.n	8003c3a <GLOBAL_CAN_Init+0x36>
  {
#if defined(MULTICAN_PLUS)
    XMC_CAN_InitEx(handle->canglobal_ptr, (XMC_CAN_CANCLKSRC_t)handle->can_clock_src, handle->can_frequency);
#else
    XMC_CAN_InitEx(handle->canglobal_ptr, XMC_CAN_CANCLKSRC_FPERI, handle->can_frequency);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	685a      	ldr	r2, [r3, #4]
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4610      	mov	r0, r2
 8003c28:	2101      	movs	r1, #1
 8003c2a:	461a      	mov	r2, r3
 8003c2c:	f7fd faa8 	bl	8001180 <XMC_CAN_InitEx>
#endif
    handle->init_status = true;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2201      	movs	r2, #1
 8003c34:	725a      	strb	r2, [r3, #9]
    status = GLOBAL_CAN_STATUS_SUCCESS;
 8003c36:	2300      	movs	r3, #0
 8003c38:	73fb      	strb	r3, [r7, #15]
  }
  return (status);
 8003c3a:	7bfb      	ldrb	r3, [r7, #15]

}
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	3710      	adds	r7, #16
 8003c40:	46bd      	mov	sp, r7
 8003c42:	bd80      	pop	{r7, pc}

08003c44 <XMC_VADC_GLOBAL_DisablePostCalibration>:
 * XMC_VADC_GLOBAL_DisablePostCalibration()<BR>
 * None
 */

__STATIC_INLINE void XMC_VADC_GLOBAL_DisablePostCalibration(XMC_VADC_GLOBAL_t *const global_ptr, uint32_t group_number)
{
 8003c44:	b480      	push	{r7}
 8003c46:	b083      	sub	sp, #12
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
 8003c4c:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_VADC_GLOBAL_DisablePostCalibration:Wrong Module Pointer", (global_ptr == VADC))

  global_ptr->GLOBCFG |= (uint32_t)((uint32_t)1 << ((uint32_t)VADC_GLOBCFG_DPCAL0_Pos + group_number));
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	3310      	adds	r3, #16
 8003c58:	4619      	mov	r1, r3
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	408b      	lsls	r3, r1
 8003c5e:	431a      	orrs	r2, r3
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 8003c66:	370c      	adds	r7, #12
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6e:	4770      	bx	lr

08003c70 <GLOBAL_ADC_Init>:
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/**
 * This function initializes all instances of the ADC Global APP and low level app.
 */
GLOBAL_ADC_STATUS_t GLOBAL_ADC_Init(GLOBAL_ADC_t *const handle_ptr)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b084      	sub	sp, #16
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("GLOBAL_ADC_Init:Invalid handle_ptr", (handle_ptr != NULL));
#if (XMC_VADC_GROUP_AVAILABLE == 1U)
  uint32_t group_index;
#endif

  if (GLOBAL_ADC_UNINITIALIZED == handle_ptr->init_state)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	7c1b      	ldrb	r3, [r3, #16]
 8003c7c:	2b02      	cmp	r3, #2
 8003c7e:	d149      	bne.n	8003d14 <GLOBAL_ADC_Init+0xa4>
  {  
    /* Initialize an instance of Global hardware */
    XMC_VADC_GLOBAL_Init(handle_ptr->module_ptr, handle_ptr->global_config_handle);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	68da      	ldr	r2, [r3, #12]
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	689b      	ldr	r3, [r3, #8]
 8003c88:	4610      	mov	r0, r2
 8003c8a:	4619      	mov	r1, r3
 8003c8c:	f7fe fb66 	bl	800235c <XMC_VADC_GLOBAL_Init>

    /* Initialize all the Groups */
#if (XMC_VADC_GROUP_AVAILABLE == 1U)
    for(group_index = (uint32_t)0; group_index < XMC_VADC_MAXIMUM_NUM_GROUPS; group_index++)
 8003c90:	2300      	movs	r3, #0
 8003c92:	60fb      	str	r3, [r7, #12]
 8003c94:	e02f      	b.n	8003cf6 <GLOBAL_ADC_Init+0x86>
    {
      /*Initialize Group*/
      XMC_VADC_GROUP_Init(handle_ptr->group_ptrs_array[group_index]->group_handle,
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	68fa      	ldr	r2, [r7, #12]
 8003c9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c9e:	6819      	ldr	r1, [r3, #0]
    		            handle_ptr->group_ptrs_array[group_index]->group_config_handle);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	68fa      	ldr	r2, [r7, #12]
 8003ca4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    /* Initialize all the Groups */
#if (XMC_VADC_GROUP_AVAILABLE == 1U)
    for(group_index = (uint32_t)0; group_index < XMC_VADC_MAXIMUM_NUM_GROUPS; group_index++)
    {
      /*Initialize Group*/
      XMC_VADC_GROUP_Init(handle_ptr->group_ptrs_array[group_index]->group_handle,
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	4608      	mov	r0, r1
 8003cac:	4619      	mov	r1, r3
 8003cae:	f7fe fbf9 	bl	80024a4 <XMC_VADC_GROUP_Init>
    		            handle_ptr->group_ptrs_array[group_index]->group_config_handle);

      /* Switch on the converter of the Group[group_index]*/
      XMC_VADC_GROUP_SetPowerMode(handle_ptr->group_ptrs_array[group_index]->group_handle,
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	68fa      	ldr	r2, [r7, #12]
 8003cb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	2103      	movs	r1, #3
 8003cc0:	f7fe fc80 	bl	80025c4 <XMC_VADC_GROUP_SetPowerMode>
                                  XMC_VADC_GROUP_POWERMODE_NORMAL);

      /* Disable the post calibration option for the respective group*/
      if ((bool)false == handle_ptr->group_ptrs_array[group_index]->post_calibration)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	68fa      	ldr	r2, [r7, #12]
 8003cc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ccc:	7a1b      	ldrb	r3, [r3, #8]
 8003cce:	f083 0301 	eor.w	r3, r3, #1
 8003cd2:	b2db      	uxtb	r3, r3
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d005      	beq.n	8003ce4 <GLOBAL_ADC_Init+0x74>
      {
        XMC_VADC_GLOBAL_DisablePostCalibration(handle_ptr->module_ptr,group_index);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	68db      	ldr	r3, [r3, #12]
 8003cdc:	4618      	mov	r0, r3
 8003cde:	68f9      	ldr	r1, [r7, #12]
 8003ce0:	f7ff ffb0 	bl	8003c44 <XMC_VADC_GLOBAL_DisablePostCalibration>

#if(XMC_VADC_SHS_AVAILABLE == 1U)
      XMC_VADC_GLOBAL_SHS_EnableAcceleratedMode(handle_ptr->global_shs_ptr, (XMC_VADC_GROUP_INDEX_t)group_index);
#endif

      handle_ptr->group_ptrs_array[group_index]->state = GLOBAL_ADC_SUCCESS;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	68fa      	ldr	r2, [r7, #12]
 8003ce8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003cec:	2200      	movs	r2, #0
 8003cee:	725a      	strb	r2, [r3, #9]
    /* Initialize an instance of Global hardware */
    XMC_VADC_GLOBAL_Init(handle_ptr->module_ptr, handle_ptr->global_config_handle);

    /* Initialize all the Groups */
#if (XMC_VADC_GROUP_AVAILABLE == 1U)
    for(group_index = (uint32_t)0; group_index < XMC_VADC_MAXIMUM_NUM_GROUPS; group_index++)
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	3301      	adds	r3, #1
 8003cf4:	60fb      	str	r3, [r7, #12]
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	2b01      	cmp	r3, #1
 8003cfa:	d9cc      	bls.n	8003c96 <GLOBAL_ADC_Init+0x26>
#endif
#endif /* _XMC_VADC_GROUP_AVAILABLE_ */
#if(XMC_VADC_SHS_AVAILABLE == 1U)
    XMC_VADC_GLOBAL_SHS_SetAnalogReference(handle_ptr->global_shs_ptr, GLOBAL_ADC_AREF_VALUE);
#endif
    if((bool)true == handle_ptr->enable_startup_calibration)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	7c5b      	ldrb	r3, [r3, #17]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d004      	beq.n	8003d0e <GLOBAL_ADC_Init+0x9e>
    {
    	XMC_VADC_GLOBAL_StartupCalibration(handle_ptr->module_ptr);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	68db      	ldr	r3, [r3, #12]
 8003d08:	4618      	mov	r0, r3
 8003d0a:	f7fe fb75 	bl	80023f8 <XMC_VADC_GLOBAL_StartupCalibration>
    }
    handle_ptr->init_state = GLOBAL_ADC_SUCCESS;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2200      	movs	r2, #0
 8003d12:	741a      	strb	r2, [r3, #16]
  }
  return (handle_ptr->init_state);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	7c1b      	ldrb	r3, [r3, #16]
}
 8003d18:	4618      	mov	r0, r3
 8003d1a:	3710      	adds	r7, #16
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	bd80      	pop	{r7, pc}

08003d20 <DIGITAL_IO_Init>:
* @param handler Pointer pointing to APP data structure.
* @return DIGITAL_IO_STATUS_t DIGITAL_IO APP status.
*/

DIGITAL_IO_STATUS_t DIGITAL_IO_Init(const DIGITAL_IO_t *const handler)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b082      	sub	sp, #8
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_Init: handler null pointer", handler != NULL);

  /* Initializes input / output characteristics */
  XMC_GPIO_Init(handler->gpio_port, handler->gpio_pin, &handler->gpio_config);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6819      	ldr	r1, [r3, #0]
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	7c1a      	ldrb	r2, [r3, #16]
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	3304      	adds	r3, #4
 8003d34:	4608      	mov	r0, r1
 8003d36:	4611      	mov	r1, r2
 8003d38:	461a      	mov	r2, r3
 8003d3a:	f7fc fb45 	bl	80003c8 <XMC_GPIO_Init>

  /*Configure hardware port control*/
  XMC_GPIO_SetHardwareControl(handler->gpio_port, handler->gpio_pin, handler->hwctrl);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6819      	ldr	r1, [r3, #0]
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	7c1a      	ldrb	r2, [r3, #16]
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	7c5b      	ldrb	r3, [r3, #17]
 8003d4a:	4608      	mov	r0, r1
 8003d4c:	4611      	mov	r1, r2
 8003d4e:	461a      	mov	r2, r3
 8003d50:	f7fd fdf0 	bl	8001934 <XMC_GPIO_SetHardwareControl>

  return (DIGITAL_IO_STATUS_OK);
 8003d54:	2300      	movs	r3, #0
}
 8003d56:	4618      	mov	r0, r3
 8003d58:	3708      	adds	r7, #8
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	bd80      	pop	{r7, pc}
 8003d5e:	bf00      	nop

08003d60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d60:	b480      	push	{r7}
 8003d62:	b085      	sub	sp, #20
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	f003 0307 	and.w	r3, r3, #7
 8003d6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003d70:	4b0c      	ldr	r3, [pc, #48]	; (8003da4 <__NVIC_SetPriorityGrouping+0x44>)
 8003d72:	68db      	ldr	r3, [r3, #12]
 8003d74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003d76:	68ba      	ldr	r2, [r7, #8]
 8003d78:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003d7c:	4013      	ands	r3, r2
 8003d7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	021a      	lsls	r2, r3, #8
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003d84:	68bb      	ldr	r3, [r7, #8]
 8003d86:	4313      	orrs	r3, r2
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 8003d88:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003d8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d90:	60bb      	str	r3, [r7, #8]
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
  SCB->AIRCR =  reg_value;
 8003d92:	4a04      	ldr	r2, [pc, #16]	; (8003da4 <__NVIC_SetPriorityGrouping+0x44>)
 8003d94:	68bb      	ldr	r3, [r7, #8]
 8003d96:	60d3      	str	r3, [r2, #12]
}
 8003d98:	3714      	adds	r7, #20
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da0:	4770      	bx	lr
 8003da2:	bf00      	nop
 8003da4:	e000ed00 	.word	0xe000ed00

08003da8 <SystemCoreSetup>:
  .initialized = false
};	


void SystemCoreSetup(void)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b082      	sub	sp, #8
 8003dac:	af00      	add	r7, sp, #0
  uint32_t temp;

  NVIC_SetPriorityGrouping(1U);
 8003dae:	2001      	movs	r0, #1
 8003db0:	f7ff ffd6 	bl	8003d60 <__NVIC_SetPriorityGrouping>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003db4:	b672      	cpsid	i
	
  /* relocate vector table */
  __disable_irq();

#if !defined(__TASKING__)
  SCB->VTOR = (uint32_t)(&__Vectors);
 8003db6:	4b21      	ldr	r3, [pc, #132]	; (8003e3c <SystemCoreSetup+0x94>)
 8003db8:	4a21      	ldr	r2, [pc, #132]	; (8003e40 <SystemCoreSetup+0x98>)
 8003dba:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003dbc:	f3bf 8f4f 	dsb	sy
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8003dc0:	b662      	cpsie	i

  __DSB();
  __enable_irq();
	
#if ((__FPU_PRESENT == 1) && (__FPU_USED == 1))
  SCB->CPACR |= ((3UL << 10*2) |                 /* set CP10 Full Access */
 8003dc2:	4a1e      	ldr	r2, [pc, #120]	; (8003e3c <SystemCoreSetup+0x94>)
 8003dc4:	4b1d      	ldr	r3, [pc, #116]	; (8003e3c <SystemCoreSetup+0x94>)
 8003dc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dca:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003dce:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
				 (3UL << 11*2)  );               /* set CP11 Full Access */
#endif
  /* Set flash wait states */
  temp = FLASH0->FCON;
 8003dd2:	4b1c      	ldr	r3, [pc, #112]	; (8003e44 <SystemCoreSetup+0x9c>)
 8003dd4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003dd8:	3314      	adds	r3, #20
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	607b      	str	r3, [r7, #4]
  temp &= ~FLASH_FCON_WSPFLASH_Msk;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	f023 030f 	bic.w	r3, r3, #15
 8003de4:	607b      	str	r3, [r7, #4]
  temp |= PMU_FLASH_WS;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	f043 0302 	orr.w	r3, r3, #2
 8003dec:	607b      	str	r3, [r7, #4]
  FLASH0->FCON = temp;
 8003dee:	4b15      	ldr	r3, [pc, #84]	; (8003e44 <SystemCoreSetup+0x9c>)
 8003df0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003df4:	3314      	adds	r3, #20
 8003df6:	687a      	ldr	r2, [r7, #4]
 8003df8:	601a      	str	r2, [r3, #0]


  /* Disable divide by zero trap */
  SCB->CCR &= ~SCB_CCR_DIV_0_TRP_Msk; 
 8003dfa:	4a10      	ldr	r2, [pc, #64]	; (8003e3c <SystemCoreSetup+0x94>)
 8003dfc:	4b0f      	ldr	r3, [pc, #60]	; (8003e3c <SystemCoreSetup+0x94>)
 8003dfe:	695b      	ldr	r3, [r3, #20]
 8003e00:	f023 0310 	bic.w	r3, r3, #16
 8003e04:	6153      	str	r3, [r2, #20]

  /* Disable unaligned memory access trap */
  SCB->CCR &= ~SCB_CCR_UNALIGN_TRP_Msk; 
 8003e06:	4a0d      	ldr	r2, [pc, #52]	; (8003e3c <SystemCoreSetup+0x94>)
 8003e08:	4b0c      	ldr	r3, [pc, #48]	; (8003e3c <SystemCoreSetup+0x94>)
 8003e0a:	695b      	ldr	r3, [r3, #20]
 8003e0c:	f023 0308 	bic.w	r3, r3, #8
 8003e10:	6153      	str	r3, [r2, #20]

  /* Disable memory management fault */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8003e12:	4a0a      	ldr	r2, [pc, #40]	; (8003e3c <SystemCoreSetup+0x94>)
 8003e14:	4b09      	ldr	r3, [pc, #36]	; (8003e3c <SystemCoreSetup+0x94>)
 8003e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e18:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e1c:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable bus fault */
  SCB->SHCSR &= ~SCB_SHCSR_BUSFAULTENA_Msk;
 8003e1e:	4a07      	ldr	r2, [pc, #28]	; (8003e3c <SystemCoreSetup+0x94>)
 8003e20:	4b06      	ldr	r3, [pc, #24]	; (8003e3c <SystemCoreSetup+0x94>)
 8003e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e24:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003e28:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable usage fault */
  SCB->SHCSR &= ~SCB_SHCSR_USGFAULTENA_Msk;
 8003e2a:	4a04      	ldr	r2, [pc, #16]	; (8003e3c <SystemCoreSetup+0x94>)
 8003e2c:	4b03      	ldr	r3, [pc, #12]	; (8003e3c <SystemCoreSetup+0x94>)
 8003e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e30:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e34:	6253      	str	r3, [r2, #36]	; 0x24
}
 8003e36:	3708      	adds	r7, #8
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	bd80      	pop	{r7, pc}
 8003e3c:	e000ed00 	.word	0xe000ed00
 8003e40:	08000000 	.word	0x08000000
 8003e44:	58001000 	.word	0x58001000

08003e48 <CLOCK_XMC4_Init>:

/*
 * API to initialize the CLOCK_XMC4 APP TRAP events
 */
CLOCK_XMC4_STATUS_t CLOCK_XMC4_Init(CLOCK_XMC4_t *handle)
{
 8003e48:	b480      	push	{r7}
 8003e4a:	b085      	sub	sp, #20
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
  CLOCK_XMC4_STATUS_t status = CLOCK_XMC4_STATUS_SUCCESS;
 8003e50:	2300      	movs	r3, #0
 8003e52:	73fb      	strb	r3, [r7, #15]

  XMC_ASSERT("CLOCK_XMC4 APP handle function pointer uninitialized", (handle != NULL));

  handle->init_status = true;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2201      	movs	r2, #1
 8003e58:	701a      	strb	r2, [r3, #0]

  return (status);
 8003e5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	3714      	adds	r7, #20
 8003e60:	46bd      	mov	sp, r7
 8003e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e66:	4770      	bx	lr

08003e68 <OSCHP_GetFrequency>:

#ifdef CLOCK_XMC4_OSCHP_ENABLED
/*  API to retrieve high precision external oscillator frequency */
uint32_t OSCHP_GetFrequency(void)
{
 8003e68:	b480      	push	{r7}
 8003e6a:	af00      	add	r7, sp, #0
  return (CLOCK_XMC4_OSCHP_FREQUENCY);
 8003e6c:	4b02      	ldr	r3, [pc, #8]	; (8003e78 <OSCHP_GetFrequency+0x10>)
}
 8003e6e:	4618      	mov	r0, r3
 8003e70:	46bd      	mov	sp, r7
 8003e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e76:	4770      	bx	lr
 8003e78:	00b71b00 	.word	0x00b71b00

08003e7c <SystemCoreClockSetup>:
* @note   -
* @param  None
* @retval None
*/
void SystemCoreClockSetup(void)
{
 8003e7c:	b5b0      	push	{r4, r5, r7, lr}
 8003e7e:	b086      	sub	sp, #24
 8003e80:	af00      	add	r7, sp, #0
  /* Local data structure for initializing the clock functional block */
  const XMC_SCU_CLOCK_CONFIG_t CLOCK_XMC4_0_CONFIG =
 8003e82:	4b11      	ldr	r3, [pc, #68]	; (8003ec8 <SystemCoreClockSetup+0x4c>)
 8003e84:	1d3c      	adds	r4, r7, #4
 8003e86:	461d      	mov	r5, r3
 8003e88:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003e8a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003e8c:	682b      	ldr	r3, [r5, #0]
 8003e8e:	6023      	str	r3, [r4, #0]
#endif
    /* Peripheral Clock Divider Value */
    .fperipheral_clkdiv = 1U
  };
  /* Initialize the SCU clock */
  XMC_SCU_CLOCK_Init(&CLOCK_XMC4_0_CONFIG);
 8003e90:	1d3b      	adds	r3, r7, #4
 8003e92:	4618      	mov	r0, r3
 8003e94:	f7fc fb8c 	bl	80005b0 <XMC_SCU_CLOCK_Init>
  /* RTC source clock */
  XMC_SCU_HIB_SetRtcClockSource(XMC_SCU_HIB_RTCCLKSRC_OSI);
 8003e98:	2000      	movs	r0, #0
 8003e9a:	f7fc fcb1 	bl	8000800 <XMC_SCU_HIB_SetRtcClockSource>
  
#ifdef CLOCK_XMC4_USBCLK_ENABLED  
  /* USB/SDMMC source clock */
  XMC_SCU_CLOCK_SetUsbClockSource(XMC_SCU_CLOCK_USBCLKSRC_USBPLL);
 8003e9e:	2000      	movs	r0, #0
 8003ea0:	f7fc fc66 	bl	8000770 <XMC_SCU_CLOCK_SetUsbClockSource>
  /* USB/SDMMC divider setting */
  XMC_SCU_CLOCK_SetUsbClockDivider(4U);
 8003ea4:	2004      	movs	r0, #4
 8003ea6:	f7fc fd37 	bl	8000918 <XMC_SCU_CLOCK_SetUsbClockDivider>
#endif
  /* Start USB PLL */
  XMC_SCU_CLOCK_EnableUsbPll();
 8003eaa:	f7fc fdad 	bl	8000a08 <XMC_SCU_CLOCK_EnableUsbPll>
  XMC_SCU_CLOCK_StartUsbPll(1U, 32U);
 8003eae:	2001      	movs	r0, #1
 8003eb0:	2120      	movs	r1, #32
 8003eb2:	f7fc fdb9 	bl	8000a28 <XMC_SCU_CLOCK_StartUsbPll>

#ifdef CLOCK_XMC4_WDTCLK_ENABLED    
  /* WDT source clock */
  XMC_SCU_CLOCK_SetWdtClockSource(XMC_SCU_CLOCK_WDTCLKSRC_OFI);
 8003eb6:	2000      	movs	r0, #0
 8003eb8:	f7fc fc6e 	bl	8000798 <XMC_SCU_CLOCK_SetWdtClockSource>
  /* WDT divider setting */
  XMC_SCU_CLOCK_SetWdtClockDivider(1U);
 8003ebc:	2001      	movs	r0, #1
 8003ebe:	f7fc fd3f 	bl	8000940 <XMC_SCU_CLOCK_SetWdtClockDivider>
#endif

}
 8003ec2:	3718      	adds	r7, #24
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	bdb0      	pop	{r4, r5, r7, pc}
 8003ec8:	08007c58 	.word	0x08007c58

08003ecc <XMC_CAN_NODE_SetEventNodePointer>:
 */

__STATIC_INLINE void XMC_CAN_NODE_SetEventNodePointer(XMC_CAN_NODE_t *const can_node,
    const XMC_CAN_NODE_POINTER_EVENT_t ptr_event,
    const uint32_t service_request)
{
 8003ecc:	b480      	push	{r7}
 8003ece:	b085      	sub	sp, #20
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	60f8      	str	r0, [r7, #12]
 8003ed4:	460b      	mov	r3, r1
 8003ed6:	607a      	str	r2, [r7, #4]
 8003ed8:	72fb      	strb	r3, [r7, #11]
  can_node->NIPR = (uint32_t)((can_node->NIPR) & ~(uint32_t)(CAN_NODE_NIPR_Msk << (uint32_t)ptr_event)) | (service_request << (uint32_t)ptr_event);
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	689a      	ldr	r2, [r3, #8]
 8003ede:	7afb      	ldrb	r3, [r7, #11]
 8003ee0:	2107      	movs	r1, #7
 8003ee2:	fa01 f303 	lsl.w	r3, r1, r3
 8003ee6:	43db      	mvns	r3, r3
 8003ee8:	401a      	ands	r2, r3
 8003eea:	7afb      	ldrb	r3, [r7, #11]
 8003eec:	6879      	ldr	r1, [r7, #4]
 8003eee:	fa01 f303 	lsl.w	r3, r1, r3
 8003ef2:	431a      	orrs	r2, r3
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	609a      	str	r2, [r3, #8]
}
 8003ef8:	3714      	adds	r7, #20
 8003efa:	46bd      	mov	sp, r7
 8003efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f00:	4770      	bx	lr
 8003f02:	bf00      	nop

08003f04 <XMC_CAN_NODE_SetReceiveInput>:
 *
 */

__STATIC_INLINE void XMC_CAN_NODE_SetReceiveInput(XMC_CAN_NODE_t *const can_node,
    const XMC_CAN_NODE_RECEIVE_INPUT_t input)
{
 8003f04:	b480      	push	{r7}
 8003f06:	b083      	sub	sp, #12
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
 8003f0c:	460b      	mov	r3, r1
 8003f0e:	70fb      	strb	r3, [r7, #3]
  can_node->NPCR = ((can_node->NPCR) & ~(uint32_t)(CAN_NODE_NPCR_RXSEL_Msk)) |
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	68db      	ldr	r3, [r3, #12]
 8003f14:	f023 0207 	bic.w	r2, r3, #7
                   (((uint32_t)input << CAN_NODE_NPCR_RXSEL_Pos) & (uint32_t)CAN_NODE_NPCR_RXSEL_Msk);
 8003f18:	78fb      	ldrb	r3, [r7, #3]
 8003f1a:	f003 0307 	and.w	r3, r3, #7
 */

__STATIC_INLINE void XMC_CAN_NODE_SetReceiveInput(XMC_CAN_NODE_t *const can_node,
    const XMC_CAN_NODE_RECEIVE_INPUT_t input)
{
  can_node->NPCR = ((can_node->NPCR) & ~(uint32_t)(CAN_NODE_NPCR_RXSEL_Msk)) |
 8003f1e:	431a      	orrs	r2, r3
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	60da      	str	r2, [r3, #12]
                   (((uint32_t)input << CAN_NODE_NPCR_RXSEL_Pos) & (uint32_t)CAN_NODE_NPCR_RXSEL_Msk);
}
 8003f24:	370c      	adds	r7, #12
 8003f26:	46bd      	mov	sp, r7
 8003f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2c:	4770      	bx	lr
 8003f2e:	bf00      	nop

08003f30 <XMC_CAN_NODE_EnableLoopBack>:
 *  NPCRx can be written only if bit NCRx.CCE is set.
 *
 */

__STATIC_INLINE void XMC_CAN_NODE_EnableLoopBack(XMC_CAN_NODE_t *const can_node)
{
 8003f30:	b480      	push	{r7}
 8003f32:	b083      	sub	sp, #12
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
  can_node->NPCR |= (uint32_t)CAN_NODE_NPCR_LBM_Msk;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	68db      	ldr	r3, [r3, #12]
 8003f3c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	60da      	str	r2, [r3, #12]
}
 8003f44:	370c      	adds	r7, #12
 8003f46:	46bd      	mov	sp, r7
 8003f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4c:	4770      	bx	lr
 8003f4e:	bf00      	nop

08003f50 <XMC_CAN_NODE_EnableConfigurationChange>:
 * XMC_CAN_NODE_DisableConfigurationChange()
 *
 */

__STATIC_INLINE void XMC_CAN_NODE_EnableConfigurationChange(XMC_CAN_NODE_t *const can_node)
{
 8003f50:	b480      	push	{r7}
 8003f52:	b083      	sub	sp, #12
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
  can_node->NCR |= (uint32_t)CAN_NODE_NCR_CCE_Msk;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	601a      	str	r2, [r3, #0]
}
 8003f64:	370c      	adds	r7, #12
 8003f66:	46bd      	mov	sp, r7
 8003f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6c:	4770      	bx	lr
 8003f6e:	bf00      	nop

08003f70 <XMC_CAN_NODE_DisableConfigurationChange>:
 * XMC_CAN_NODE_EnableConfigurationChange()
 *
 */

__STATIC_INLINE void XMC_CAN_NODE_DisableConfigurationChange(XMC_CAN_NODE_t *const can_node)
{
 8003f70:	b480      	push	{r7}
 8003f72:	b083      	sub	sp, #12
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
  can_node->NCR &= ~(uint32_t)CAN_NODE_NCR_CCE_Msk;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	601a      	str	r2, [r3, #0]
}
 8003f84:	370c      	adds	r7, #12
 8003f86:	46bd      	mov	sp, r7
 8003f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8c:	4770      	bx	lr
 8003f8e:	bf00      	nop

08003f90 <XMC_CAN_NODE_SetInitBit>:
 * XMC_CAN_NODE_ResetInitBit()
 *
 */

__STATIC_INLINE void XMC_CAN_NODE_SetInitBit(XMC_CAN_NODE_t *const can_node)
{
 8003f90:	b480      	push	{r7}
 8003f92:	b083      	sub	sp, #12
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
  can_node->NCR |= (uint32_t)CAN_NODE_NCR_INIT_Msk;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f043 0201 	orr.w	r2, r3, #1
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	601a      	str	r2, [r3, #0]
}
 8003fa4:	370c      	adds	r7, #12
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fac:	4770      	bx	lr
 8003fae:	bf00      	nop

08003fb0 <XMC_CAN_NODE_ResetInitBit>:
 * \par<b>Related API's:</b><br>
 * XMC_CAN_NODE_SetInitBit()
 *
 */
__STATIC_INLINE void XMC_CAN_NODE_ResetInitBit(XMC_CAN_NODE_t *const can_node)
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	b083      	sub	sp, #12
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
  can_node->NCR &= ~(uint32_t)CAN_NODE_NCR_INIT_Msk;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f023 0201 	bic.w	r2, r3, #1
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	601a      	str	r2, [r3, #0]
}
 8003fc4:	370c      	adds	r7, #12
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fcc:	4770      	bx	lr
 8003fce:	bf00      	nop

08003fd0 <XMC_CAN_NODE_ReSetAnalyzerMode>:
 * XMC_CAN_NODE_SetAnalyzerMode()
 *
 */

__STATIC_INLINE void XMC_CAN_NODE_ReSetAnalyzerMode(XMC_CAN_NODE_t *const can_node)
{
 8003fd0:	b480      	push	{r7}
 8003fd2:	b083      	sub	sp, #12
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
  can_node->NCR &= ~(uint32_t)CAN_NODE_NCR_CALM_Msk;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	601a      	str	r2, [r3, #0]
}
 8003fe4:	370c      	adds	r7, #12
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fec:	4770      	bx	lr
 8003fee:	bf00      	nop

08003ff0 <XMC_CAN_MO_SetEventNodePointer>:
 */

__STATIC_INLINE void XMC_CAN_MO_SetEventNodePointer(const XMC_CAN_MO_t *const can_mo,
    const XMC_CAN_MO_POINTER_EVENT_t can_mo_ptr_int,
    const uint32_t service_request)
{
 8003ff0:	b480      	push	{r7}
 8003ff2:	b085      	sub	sp, #20
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	60f8      	str	r0, [r7, #12]
 8003ff8:	460b      	mov	r3, r1
 8003ffa:	607a      	str	r2, [r7, #4]
 8003ffc:	72fb      	strb	r3, [r7, #11]
  can_mo->can_mo_ptr->MOIPR = ((can_mo->can_mo_ptr->MOIPR ) & ~(uint32_t)((uint32_t)CAN_MO_MOIPR_Msk << (uint32_t)can_mo_ptr_int)) |
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	68fa      	ldr	r2, [r7, #12]
 8004004:	6812      	ldr	r2, [r2, #0]
 8004006:	6891      	ldr	r1, [r2, #8]
 8004008:	7afa      	ldrb	r2, [r7, #11]
 800400a:	2007      	movs	r0, #7
 800400c:	fa00 f202 	lsl.w	r2, r0, r2
 8004010:	43d2      	mvns	r2, r2
 8004012:	4011      	ands	r1, r2
                              (service_request << (uint32_t)can_mo_ptr_int);
 8004014:	7afa      	ldrb	r2, [r7, #11]
 8004016:	6878      	ldr	r0, [r7, #4]
 8004018:	fa00 f202 	lsl.w	r2, r0, r2

__STATIC_INLINE void XMC_CAN_MO_SetEventNodePointer(const XMC_CAN_MO_t *const can_mo,
    const XMC_CAN_MO_POINTER_EVENT_t can_mo_ptr_int,
    const uint32_t service_request)
{
  can_mo->can_mo_ptr->MOIPR = ((can_mo->can_mo_ptr->MOIPR ) & ~(uint32_t)((uint32_t)CAN_MO_MOIPR_Msk << (uint32_t)can_mo_ptr_int)) |
 800401c:	430a      	orrs	r2, r1
 800401e:	609a      	str	r2, [r3, #8]
                              (service_request << (uint32_t)can_mo_ptr_int);
}
 8004020:	3714      	adds	r7, #20
 8004022:	46bd      	mov	sp, r7
 8004024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004028:	4770      	bx	lr
 800402a:	bf00      	nop

0800402c <XMC_CAN_MO_GetStatus>:
 * None
 *
 */

__STATIC_INLINE uint32_t XMC_CAN_MO_GetStatus(const XMC_CAN_MO_t *const can_mo)
{
 800402c:	b480      	push	{r7}
 800402e:	b083      	sub	sp, #12
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
  return ((can_mo->can_mo_ptr->MOSTAT));
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	69db      	ldr	r3, [r3, #28]
}
 800403a:	4618      	mov	r0, r3
 800403c:	370c      	adds	r7, #12
 800403e:	46bd      	mov	sp, r7
 8004040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004044:	4770      	bx	lr
 8004046:	bf00      	nop

08004048 <XMC_CAN_MO_EnableEvent>:
 *
 */

__STATIC_INLINE void XMC_CAN_MO_EnableEvent(const XMC_CAN_MO_t *const can_mo,
    const uint32_t event)
{
 8004048:	b480      	push	{r7}
 800404a:	b083      	sub	sp, #12
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
 8004050:	6039      	str	r1, [r7, #0]
  can_mo->can_mo_ptr->MOFCR |= event;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	687a      	ldr	r2, [r7, #4]
 8004058:	6812      	ldr	r2, [r2, #0]
 800405a:	6811      	ldr	r1, [r2, #0]
 800405c:	683a      	ldr	r2, [r7, #0]
 800405e:	430a      	orrs	r2, r1
 8004060:	601a      	str	r2, [r3, #0]
}
 8004062:	370c      	adds	r7, #12
 8004064:	46bd      	mov	sp, r7
 8004066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406a:	4770      	bx	lr

0800406c <CAN_NODE_MO_EnableTxEvent>:
 *   return (1);
 * }
 * @endcode
 */
__STATIC_INLINE void CAN_NODE_MO_EnableTxEvent(const CAN_NODE_LMO_t *const can_lmo)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	b082      	sub	sp, #8
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("CAN_NODE_MO_EnableTxEvent: null pointer", can_lmo != NULL);
  XMC_CAN_MO_EnableEvent(can_lmo->mo_ptr,XMC_CAN_MO_EVENT_TRANSMIT);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	4618      	mov	r0, r3
 800407a:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 800407e:	f7ff ffe3 	bl	8004048 <XMC_CAN_MO_EnableEvent>
}
 8004082:	3708      	adds	r7, #8
 8004084:	46bd      	mov	sp, r7
 8004086:	bd80      	pop	{r7, pc}

08004088 <CAN_NODE_MO_EnableRxEvent>:
 *   return (1);
 * }
 * @endcode
 */
__STATIC_INLINE void CAN_NODE_MO_EnableRxEvent(const CAN_NODE_LMO_t *const can_lmo)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b082      	sub	sp, #8
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("CAN_NODE_MO_EnableRxEvent: null pointer", can_lmo != NULL);
  XMC_CAN_MO_EnableEvent(can_lmo->mo_ptr,XMC_CAN_MO_EVENT_RECEIVE);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	4618      	mov	r0, r3
 8004096:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800409a:	f7ff ffd5 	bl	8004048 <XMC_CAN_MO_EnableEvent>
}
 800409e:	3708      	adds	r7, #8
 80040a0:	46bd      	mov	sp, r7
 80040a2:	bd80      	pop	{r7, pc}

080040a4 <CAN_NODE_SetNodeEvents>:
  * @param  handle is a pointer pointing to APP data structure.
  * @return None
  */

static void CAN_NODE_SetNodeEvents(const CAN_NODE_t *handle)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b084      	sub	sp, #16
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
  uint32_t lnode_event = 0U;
 80040ac:	2300      	movs	r3, #0
 80040ae:	60fb      	str	r3, [r7, #12]

  XMC_ASSERT("CAN_NODE_lInit: handle null", handle != NULL);

  CAN_NODE_SetNodePointer(handle); /* set node service pointer */
 80040b0:	6878      	ldr	r0, [r7, #4]
 80040b2:	f000 f831 	bl	8004118 <CAN_NODE_SetNodePointer>

  if (handle->txok_event_enable == true)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d003      	beq.n	80040c8 <CAN_NODE_SetNodeEvents+0x24>
  {
    lnode_event |= XMC_CAN_NODE_EVENT_TX_INT;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	f043 0302 	orr.w	r3, r3, #2
 80040c6:	60fb      	str	r3, [r7, #12]
  }
  if (handle->lec_event_enable == true)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	f893 30a3 	ldrb.w	r3, [r3, #163]	; 0xa3
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d003      	beq.n	80040da <CAN_NODE_SetNodeEvents+0x36>
  {
    lnode_event |= XMC_CAN_NODE_EVENT_LEC;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	f043 0304 	orr.w	r3, r3, #4
 80040d8:	60fb      	str	r3, [r7, #12]
  }
  if (handle->alert_event_enable == true)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d003      	beq.n	80040ec <CAN_NODE_SetNodeEvents+0x48>
  {
    lnode_event |= XMC_CAN_NODE_EVENT_ALERT;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	f043 0308 	orr.w	r3, r3, #8
 80040ea:	60fb      	str	r3, [r7, #12]
  }
  XMC_CAN_NODE_EnableEvent(handle->node_ptr, (XMC_CAN_NODE_EVENT_t)lnode_event);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	685b      	ldr	r3, [r3, #4]
 80040f0:	4618      	mov	r0, r3
 80040f2:	68f9      	ldr	r1, [r7, #12]
 80040f4:	f7fd fa56 	bl	80015a4 <XMC_CAN_NODE_EnableEvent>

  if (handle->framecount_event_enable == true)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	f893 30a6 	ldrb.w	r3, [r3, #166]	; 0xa6
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d006      	beq.n	8004110 <CAN_NODE_SetNodeEvents+0x6c>
  {
    XMC_CAN_NODE_EnableEvent(handle->node_ptr, XMC_CAN_NODE_EVENT_CFCIE);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	685b      	ldr	r3, [r3, #4]
 8004106:	4618      	mov	r0, r3
 8004108:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800410c:	f7fd fa4a 	bl	80015a4 <XMC_CAN_NODE_EnableEvent>
  }

}
 8004110:	3710      	adds	r7, #16
 8004112:	46bd      	mov	sp, r7
 8004114:	bd80      	pop	{r7, pc}
 8004116:	bf00      	nop

08004118 <CAN_NODE_SetNodePointer>:
  * @brief  Function to set the Node event pointer
  *
  */

static void CAN_NODE_SetNodePointer(const CAN_NODE_t *handle)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b082      	sub	sp, #8
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]

  XMC_ASSERT("CAN_NODE_SetNodePointer: handle null", handle != NULL);

  /* Configured the node event pointer for the alert event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_ALERT,
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	685a      	ldr	r2, [r3, #4]
                                                        handle->node_sr_ptr->alert_event_sr);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800412a:	781b      	ldrb	r3, [r3, #0]
{

  XMC_ASSERT("CAN_NODE_SetNodePointer: handle null", handle != NULL);

  /* Configured the node event pointer for the alert event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_ALERT,
 800412c:	4610      	mov	r0, r2
 800412e:	2100      	movs	r1, #0
 8004130:	461a      	mov	r2, r3
 8004132:	f7ff fecb 	bl	8003ecc <XMC_CAN_NODE_SetEventNodePointer>
                                                        handle->node_sr_ptr->alert_event_sr);
  /* Configured the node event pointer for the LEC event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_LEC,
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	685a      	ldr	r2, [r3, #4]
                                                         handle->node_sr_ptr->lec_event_sr);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004140:	785b      	ldrb	r3, [r3, #1]

  /* Configured the node event pointer for the alert event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_ALERT,
                                                        handle->node_sr_ptr->alert_event_sr);
  /* Configured the node event pointer for the LEC event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_LEC,
 8004142:	4610      	mov	r0, r2
 8004144:	2104      	movs	r1, #4
 8004146:	461a      	mov	r2, r3
 8004148:	f7ff fec0 	bl	8003ecc <XMC_CAN_NODE_SetEventNodePointer>
                                                         handle->node_sr_ptr->lec_event_sr);
  /* Configured the node event pointer for the TXOK event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_TRANSFER_OK,
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	685a      	ldr	r2, [r3, #4]
                                                               handle->node_sr_ptr->txok_event_sr);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004156:	789b      	ldrb	r3, [r3, #2]
                                                        handle->node_sr_ptr->alert_event_sr);
  /* Configured the node event pointer for the LEC event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_LEC,
                                                         handle->node_sr_ptr->lec_event_sr);
  /* Configured the node event pointer for the TXOK event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_TRANSFER_OK,
 8004158:	4610      	mov	r0, r2
 800415a:	2108      	movs	r1, #8
 800415c:	461a      	mov	r2, r3
 800415e:	f7ff feb5 	bl	8003ecc <XMC_CAN_NODE_SetEventNodePointer>
                                                               handle->node_sr_ptr->txok_event_sr);
  /* Configured the node event pointer for the Frame counter event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_FRAME_COUNTER,
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	685a      	ldr	r2, [r3, #4]
                                                             handle->node_sr_ptr->framecount_event_sr);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800416c:	78db      	ldrb	r3, [r3, #3]
                                                         handle->node_sr_ptr->lec_event_sr);
  /* Configured the node event pointer for the TXOK event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_TRANSFER_OK,
                                                               handle->node_sr_ptr->txok_event_sr);
  /* Configured the node event pointer for the Frame counter event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_FRAME_COUNTER,
 800416e:	4610      	mov	r0, r2
 8004170:	210c      	movs	r1, #12
 8004172:	461a      	mov	r2, r3
 8004174:	f7ff feaa 	bl	8003ecc <XMC_CAN_NODE_SetEventNodePointer>
                                                             handle->node_sr_ptr->framecount_event_sr);

}
 8004178:	3708      	adds	r7, #8
 800417a:	46bd      	mov	sp, r7
 800417c:	bd80      	pop	{r7, pc}
 800417e:	bf00      	nop

08004180 <CAN_NODE_MO_Init>:
  XMC_CAN_NODE_NominalBitTimeConfigure(can_node, can_bit_time);
}

/*  Function to initialize the CAN MO based on UI configuration. */
void CAN_NODE_MO_Init(const CAN_NODE_LMO_t *lmo_ptr)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b082      	sub	sp, #8
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("CAN_NODE_MO_Init: lmo_ptr null", lmo_ptr != NULL);

  XMC_CAN_MO_Config(lmo_ptr->mo_ptr);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	4618      	mov	r0, r3
 800418e:	f7fd f837 	bl	8001200 <XMC_CAN_MO_Config>

  if (lmo_ptr->tx_event_enable == true)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	79db      	ldrb	r3, [r3, #7]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d00b      	beq.n	80041b2 <CAN_NODE_MO_Init+0x32>
  {
    XMC_CAN_MO_SetEventNodePointer(lmo_ptr->mo_ptr, XMC_CAN_MO_POINTER_EVENT_TRANSMIT, lmo_ptr->tx_sr);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681a      	ldr	r2, [r3, #0]
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	795b      	ldrb	r3, [r3, #5]
 80041a2:	4610      	mov	r0, r2
 80041a4:	2104      	movs	r1, #4
 80041a6:	461a      	mov	r2, r3
 80041a8:	f7ff ff22 	bl	8003ff0 <XMC_CAN_MO_SetEventNodePointer>
    CAN_NODE_MO_EnableTxEvent(lmo_ptr);
 80041ac:	6878      	ldr	r0, [r7, #4]
 80041ae:	f7ff ff5d 	bl	800406c <CAN_NODE_MO_EnableTxEvent>
  }
  if (lmo_ptr->rx_event_enable == true)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	7a1b      	ldrb	r3, [r3, #8]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d00b      	beq.n	80041d2 <CAN_NODE_MO_Init+0x52>
  {
    XMC_CAN_MO_SetEventNodePointer(lmo_ptr->mo_ptr, XMC_CAN_MO_POINTER_EVENT_RECEIVE, lmo_ptr->rx_sr);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681a      	ldr	r2, [r3, #0]
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	799b      	ldrb	r3, [r3, #6]
 80041c2:	4610      	mov	r0, r2
 80041c4:	2100      	movs	r1, #0
 80041c6:	461a      	mov	r2, r3
 80041c8:	f7ff ff12 	bl	8003ff0 <XMC_CAN_MO_SetEventNodePointer>
    CAN_NODE_MO_EnableRxEvent(lmo_ptr);
 80041cc:	6878      	ldr	r0, [r7, #4]
 80041ce:	f7ff ff5b 	bl	8004088 <CAN_NODE_MO_EnableRxEvent>
  }

}
 80041d2:	3708      	adds	r7, #8
 80041d4:	46bd      	mov	sp, r7
 80041d6:	bd80      	pop	{r7, pc}

080041d8 <CAN_NODE_MO_Transmit>:

/* Function to transmit the can MO frame.  */
CAN_NODE_STATUS_t CAN_NODE_MO_Transmit(const CAN_NODE_LMO_t *lmo_ptr)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b084      	sub	sp, #16
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
  CAN_NODE_STATUS_t status = CAN_NODE_STATUS_SUCCESS;
 80041e0:	2300      	movs	r3, #0
 80041e2:	73fb      	strb	r3, [r7, #15]
  XMC_ASSERT("CAN_NODE_MO_Transmit: lmo_ptr null", lmo_ptr != NULL);

  status = (CAN_NODE_STATUS_t)XMC_CAN_MO_Transmit(lmo_ptr->mo_ptr);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4618      	mov	r0, r3
 80041ea:	f7fd f8dd 	bl	80013a8 <XMC_CAN_MO_Transmit>
 80041ee:	4603      	mov	r3, r0
 80041f0:	73fb      	strb	r3, [r7, #15]
  return (status);
 80041f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80041f4:	4618      	mov	r0, r3
 80041f6:	3710      	adds	r7, #16
 80041f8:	46bd      	mov	sp, r7
 80041fa:	bd80      	pop	{r7, pc}

080041fc <CAN_NODE_MO_Receive>:

/* Function to read the received CAN message from the selected message object. */
CAN_NODE_STATUS_t CAN_NODE_MO_Receive( CAN_NODE_LMO_t *lmo_ptr)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b084      	sub	sp, #16
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
  CAN_NODE_STATUS_t status = CAN_NODE_STATUS_SUCCESS;
 8004204:	2300      	movs	r3, #0
 8004206:	73fb      	strb	r3, [r7, #15]
  XMC_ASSERT("CAN_NODE_MO_Receive: lmo_ptr null", lmo_ptr != NULL);

  status = (CAN_NODE_STATUS_t)XMC_CAN_MO_Receive(lmo_ptr->mo_ptr);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4618      	mov	r0, r3
 800420e:	f7fd f8f9 	bl	8001404 <XMC_CAN_MO_Receive>
 8004212:	4603      	mov	r3, r0
 8004214:	73fb      	strb	r3, [r7, #15]
  return (status);
 8004216:	7bfb      	ldrb	r3, [r7, #15]
}
 8004218:	4618      	mov	r0, r3
 800421a:	3710      	adds	r7, #16
 800421c:	46bd      	mov	sp, r7
 800421e:	bd80      	pop	{r7, pc}

08004220 <CAN_NODE_MO_GetStatus>:
  return (status);
}

/*  Function to reads the status of the CAN Message Object.  */
uint32_t CAN_NODE_MO_GetStatus(const CAN_NODE_LMO_t *lmo_ptr)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b084      	sub	sp, #16
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
  uint32_t status;

  XMC_ASSERT("CAN_NODE_MO_GetStatus: lmo_ptr null", lmo_ptr != NULL);

  status = XMC_CAN_MO_GetStatus(lmo_ptr->mo_ptr);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	4618      	mov	r0, r3
 800422e:	f7ff fefd 	bl	800402c <XMC_CAN_MO_GetStatus>
 8004232:	60f8      	str	r0, [r7, #12]

  return (status);
 8004234:	68fb      	ldr	r3, [r7, #12]
}
 8004236:	4618      	mov	r0, r3
 8004238:	3710      	adds	r7, #16
 800423a:	46bd      	mov	sp, r7
 800423c:	bd80      	pop	{r7, pc}
 800423e:	bf00      	nop

08004240 <CAN_NODE_Init>:
/*  Function to initialize the CAN node by configuring the baud rate, can bus type (External or internal)
 *  and message objects.
 */

CAN_NODE_STATUS_t CAN_NODE_Init(const CAN_NODE_t* handle)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b086      	sub	sp, #24
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
  CAN_NODE_STATUS_t status = CAN_NODE_STATUS_SUCCESS;
 8004248:	2300      	movs	r3, #0
 800424a:	75fb      	strb	r3, [r7, #23]
  uint32_t loop_count;
  const CAN_NODE_LMO_t *lmo_ptr;

  XMC_ASSERT("CAN_NODE_Init: handle null", handle != NULL);

  const CAN_NODE_GPIO_t *const lgpio_ptr = handle->gpio_out;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004252:	60fb      	str	r3, [r7, #12]

  /* Initialize the GLOBAL_CAN APP */
  status  = (CAN_NODE_STATUS_t)GLOBAL_CAN_Init(handle->global_ptr);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4618      	mov	r0, r3
 800425a:	f7ff fcd3 	bl	8003c04 <GLOBAL_CAN_Init>
 800425e:	4603      	mov	r3, r0
 8004260:	75fb      	strb	r3, [r7, #23]

  if (status == CAN_NODE_STATUS_SUCCESS)
 8004262:	7dfb      	ldrb	r3, [r7, #23]
 8004264:	2b00      	cmp	r3, #0
 8004266:	f040 8087 	bne.w	8004378 <CAN_NODE_Init+0x138>
  {
    /* Initialize the GUI configured values for baud rate to NBTR Reg */
    if (XMC_CAN_NODE_NominalBitTimeConfigureEx(handle->node_ptr, handle->baudrate_config) == XMC_CAN_STATUS_SUCCESS)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	685a      	ldr	r2, [r3, #4]
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	689b      	ldr	r3, [r3, #8]
 8004272:	4610      	mov	r0, r2
 8004274:	4619      	mov	r1, r3
 8004276:	f7fc fe87 	bl	8000f88 <XMC_CAN_NODE_NominalBitTimeConfigureEx>
 800427a:	4603      	mov	r3, r0
 800427c:	2b00      	cmp	r3, #0
 800427e:	d178      	bne.n	8004372 <CAN_NODE_Init+0x132>
    {
      /* set CCE and INIT bit NCR for node configuration */

      XMC_CAN_NODE_EnableConfigurationChange(handle->node_ptr);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	685b      	ldr	r3, [r3, #4]
 8004284:	4618      	mov	r0, r3
 8004286:	f7ff fe63 	bl	8003f50 <XMC_CAN_NODE_EnableConfigurationChange>
      XMC_CAN_NODE_SetInitBit(handle->node_ptr);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	685b      	ldr	r3, [r3, #4]
 800428e:	4618      	mov	r0, r3
 8004290:	f7ff fe7e 	bl	8003f90 <XMC_CAN_NODE_SetInitBit>
      XMC_CAN_NODE_ReSetAnalyzerMode(handle->node_ptr);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	685b      	ldr	r3, [r3, #4]
 8004298:	4618      	mov	r0, r3
 800429a:	f7ff fe99 	bl	8003fd0 <XMC_CAN_NODE_ReSetAnalyzerMode>

      if (handle->loopback_enable == true) /* Loop back mode enabled */
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	f893 30a7 	ldrb.w	r3, [r3, #167]	; 0xa7
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d005      	beq.n	80042b4 <CAN_NODE_Init+0x74>
      {
        XMC_CAN_NODE_EnableLoopBack(handle->node_ptr);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	685b      	ldr	r3, [r3, #4]
 80042ac:	4618      	mov	r0, r3
 80042ae:	f7ff fe3f 	bl	8003f30 <XMC_CAN_NODE_EnableLoopBack>
 80042b2:	e018      	b.n	80042e6 <CAN_NODE_Init+0xa6>
      }
      else
      {
        XMC_GPIO_Init(handle->gpio_in->port, handle->gpio_in->pin, handle->gpio_in_config);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80042ba:	6819      	ldr	r1, [r3, #0]
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80042c2:	791a      	ldrb	r2, [r3, #4]
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80042ca:	4608      	mov	r0, r1
 80042cc:	4611      	mov	r1, r2
 80042ce:	461a      	mov	r2, r3
 80042d0:	f7fc f87a 	bl	80003c8 <XMC_GPIO_Init>
        XMC_CAN_NODE_SetReceiveInput(handle->node_ptr, handle->rx_signal);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	685a      	ldr	r2, [r3, #4]
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80042de:	4610      	mov	r0, r2
 80042e0:	4619      	mov	r1, r3
 80042e2:	f7ff fe0f 	bl	8003f04 <XMC_CAN_NODE_SetReceiveInput>
      }
      CAN_NODE_SetNodeEvents(handle); /* API to enable node events */
 80042e6:	6878      	ldr	r0, [r7, #4]
 80042e8:	f7ff fedc 	bl	80040a4 <CAN_NODE_SetNodeEvents>

      for (loop_count = 0U; loop_count < handle->mo_count; loop_count++)
 80042ec:	2300      	movs	r3, #0
 80042ee:	613b      	str	r3, [r7, #16]
 80042f0:	e019      	b.n	8004326 <CAN_NODE_Init+0xe6>
      {
        lmo_ptr = handle->lmobj_ptr[loop_count];
 80042f2:	687a      	ldr	r2, [r7, #4]
 80042f4:	693b      	ldr	r3, [r7, #16]
 80042f6:	3302      	adds	r3, #2
 80042f8:	009b      	lsls	r3, r3, #2
 80042fa:	4413      	add	r3, r2
 80042fc:	685b      	ldr	r3, [r3, #4]
 80042fe:	60bb      	str	r3, [r7, #8]
        XMC_CAN_AllocateMOtoNodeList(handle->global_ptr->canglobal_ptr, handle->node_num, lmo_ptr->number);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	6859      	ldr	r1, [r3, #4]
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	f893 20a1 	ldrb.w	r2, [r3, #161]	; 0xa1
 800430c:	68bb      	ldr	r3, [r7, #8]
 800430e:	791b      	ldrb	r3, [r3, #4]
 8004310:	4608      	mov	r0, r1
 8004312:	4611      	mov	r1, r2
 8004314:	461a      	mov	r2, r3
 8004316:	f7fc fedf 	bl	80010d8 <XMC_CAN_AllocateMOtoNodeList>
        CAN_NODE_MO_Init(lmo_ptr);
 800431a:	68b8      	ldr	r0, [r7, #8]
 800431c:	f7ff ff30 	bl	8004180 <CAN_NODE_MO_Init>
        XMC_GPIO_Init(handle->gpio_in->port, handle->gpio_in->pin, handle->gpio_in_config);
        XMC_CAN_NODE_SetReceiveInput(handle->node_ptr, handle->rx_signal);
      }
      CAN_NODE_SetNodeEvents(handle); /* API to enable node events */

      for (loop_count = 0U; loop_count < handle->mo_count; loop_count++)
 8004320:	693b      	ldr	r3, [r7, #16]
 8004322:	3301      	adds	r3, #1
 8004324:	613b      	str	r3, [r7, #16]
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	f893 30a2 	ldrb.w	r3, [r3, #162]	; 0xa2
 800432c:	461a      	mov	r2, r3
 800432e:	693b      	ldr	r3, [r7, #16]
 8004330:	429a      	cmp	r2, r3
 8004332:	d8de      	bhi.n	80042f2 <CAN_NODE_Init+0xb2>
        lmo_ptr = handle->lmobj_ptr[loop_count];
        XMC_CAN_AllocateMOtoNodeList(handle->global_ptr->canglobal_ptr, handle->node_num, lmo_ptr->number);
        CAN_NODE_MO_Init(lmo_ptr);
      }
      /* reset CCE and INIT bit NCR for node configuration */
      XMC_CAN_NODE_DisableConfigurationChange(handle->node_ptr);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	685b      	ldr	r3, [r3, #4]
 8004338:	4618      	mov	r0, r3
 800433a:	f7ff fe19 	bl	8003f70 <XMC_CAN_NODE_DisableConfigurationChange>
      XMC_CAN_NODE_ResetInitBit(handle->node_ptr);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	685b      	ldr	r3, [r3, #4]
 8004342:	4618      	mov	r0, r3
 8004344:	f7ff fe34 	bl	8003fb0 <XMC_CAN_NODE_ResetInitBit>
      if (handle->loopback_enable == false)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	f893 30a7 	ldrb.w	r3, [r3, #167]	; 0xa7
 800434e:	f083 0301 	eor.w	r3, r3, #1
 8004352:	b2db      	uxtb	r3, r3
 8004354:	2b00      	cmp	r3, #0
 8004356:	d011      	beq.n	800437c <CAN_NODE_Init+0x13c>
      {
        /* CAN transmit pin configuration */
        XMC_GPIO_Init(lgpio_ptr->port, lgpio_ptr->pin, handle->gpio_out_config);
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	6819      	ldr	r1, [r3, #0]
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	791a      	ldrb	r2, [r3, #4]
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004366:	4608      	mov	r0, r1
 8004368:	4611      	mov	r1, r2
 800436a:	461a      	mov	r2, r3
 800436c:	f7fc f82c 	bl	80003c8 <XMC_GPIO_Init>
 8004370:	e004      	b.n	800437c <CAN_NODE_Init+0x13c>
      }
    }
    else
    {
      status = CAN_NODE_STATUS_FAILURE;
 8004372:	2301      	movs	r3, #1
 8004374:	75fb      	strb	r3, [r7, #23]
 8004376:	e001      	b.n	800437c <CAN_NODE_Init+0x13c>
    }
  }
  else
  {
    status = CAN_NODE_STATUS_FAILURE;
 8004378:	2301      	movs	r3, #1
 800437a:	75fb      	strb	r3, [r7, #23]
  }

  return (status);
 800437c:	7dfb      	ldrb	r3, [r7, #23]
}
 800437e:	4618      	mov	r0, r3
 8004380:	3718      	adds	r7, #24
 8004382:	46bd      	mov	sp, r7
 8004384:	bd80      	pop	{r7, pc}
 8004386:	bf00      	nop

08004388 <ANALOG_IO_Init>:
 * Input Parameter  : Handler Pointer pointing to APP data structure.
 * Output Parameter : ANALOG_IO_STATUS_t (ANALOG_IO APP initialization status).
 */

ANALOG_IO_STATUS_t ANALOG_IO_Init(const ANALOG_IO_t *const handle)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b082      	sub	sp, #8
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("ANALOG_IO_Init: Passed handler is a null pointer", handler != NULL);
  if (*(handle->state) == ANALOG_IO_STATE_NOT_INITIALIZED)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	685b      	ldr	r3, [r3, #4]
 8004394:	781b      	ldrb	r3, [r3, #0]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d10a      	bne.n	80043b0 <ANALOG_IO_Init+0x28>
  {
    if (handle->config_ptr != NULL)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d002      	beq.n	80043a8 <ANALOG_IO_Init+0x20>
    {
      /* Instance specific initialization function call*/
      handle->config_ptr();
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	4798      	blx	r3
    }
    /* Set the state variable to initialized state*/
    *(handle->state) = ANALOG_IO_STATE_INITIALIZED;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	685b      	ldr	r3, [r3, #4]
 80043ac:	2201      	movs	r2, #1
 80043ae:	701a      	strb	r2, [r3, #0]
  }
  return (ANALOG_IO_STATUS_OK);
 80043b0:	2300      	movs	r3, #0
}
 80043b2:	4618      	mov	r0, r3
 80043b4:	3708      	adds	r7, #8
 80043b6:	46bd      	mov	sp, r7
 80043b8:	bd80      	pop	{r7, pc}
 80043ba:	bf00      	nop

080043bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80043bc:	b480      	push	{r7}
 80043be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80043c0:	4b04      	ldr	r3, [pc, #16]	; (80043d4 <__NVIC_GetPriorityGrouping+0x18>)
 80043c2:	68db      	ldr	r3, [r3, #12]
 80043c4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80043c8:	0a1b      	lsrs	r3, r3, #8
}
 80043ca:	4618      	mov	r0, r3
 80043cc:	46bd      	mov	sp, r7
 80043ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d2:	4770      	bx	lr
 80043d4:	e000ed00 	.word	0xe000ed00

080043d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80043d8:	b480      	push	{r7}
 80043da:	b083      	sub	sp, #12
 80043dc:	af00      	add	r7, sp, #0
 80043de:	4603      	mov	r3, r0
 80043e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80043e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	db0b      	blt.n	8004402 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80043ea:	4908      	ldr	r1, [pc, #32]	; (800440c <__NVIC_EnableIRQ+0x34>)
 80043ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043f0:	095b      	lsrs	r3, r3, #5
 80043f2:	79fa      	ldrb	r2, [r7, #7]
 80043f4:	f002 021f 	and.w	r2, r2, #31
 80043f8:	2001      	movs	r0, #1
 80043fa:	fa00 f202 	lsl.w	r2, r0, r2
 80043fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004402:	370c      	adds	r7, #12
 8004404:	46bd      	mov	sp, r7
 8004406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440a:	4770      	bx	lr
 800440c:	e000e100 	.word	0xe000e100

08004410 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004410:	b480      	push	{r7}
 8004412:	b083      	sub	sp, #12
 8004414:	af00      	add	r7, sp, #0
 8004416:	4603      	mov	r3, r0
 8004418:	6039      	str	r1, [r7, #0]
 800441a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800441c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004420:	2b00      	cmp	r3, #0
 8004422:	db0a      	blt.n	800443a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004424:	490d      	ldr	r1, [pc, #52]	; (800445c <__NVIC_SetPriority+0x4c>)
 8004426:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800442a:	683a      	ldr	r2, [r7, #0]
 800442c:	b2d2      	uxtb	r2, r2
 800442e:	0092      	lsls	r2, r2, #2
 8004430:	b2d2      	uxtb	r2, r2
 8004432:	440b      	add	r3, r1
 8004434:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 8004438:	e00a      	b.n	8004450 <__NVIC_SetPriority+0x40>
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800443a:	4909      	ldr	r1, [pc, #36]	; (8004460 <__NVIC_SetPriority+0x50>)
 800443c:	79fb      	ldrb	r3, [r7, #7]
 800443e:	f003 030f 	and.w	r3, r3, #15
 8004442:	3b04      	subs	r3, #4
 8004444:	683a      	ldr	r2, [r7, #0]
 8004446:	b2d2      	uxtb	r2, r2
 8004448:	0092      	lsls	r2, r2, #2
 800444a:	b2d2      	uxtb	r2, r2
 800444c:	440b      	add	r3, r1
 800444e:	761a      	strb	r2, [r3, #24]
  }
}
 8004450:	370c      	adds	r7, #12
 8004452:	46bd      	mov	sp, r7
 8004454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004458:	4770      	bx	lr
 800445a:	bf00      	nop
 800445c:	e000e100 	.word	0xe000e100
 8004460:	e000ed00 	.word	0xe000ed00

08004464 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004464:	b480      	push	{r7}
 8004466:	b089      	sub	sp, #36	; 0x24
 8004468:	af00      	add	r7, sp, #0
 800446a:	60f8      	str	r0, [r7, #12]
 800446c:	60b9      	str	r1, [r7, #8]
 800446e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	f003 0307 	and.w	r3, r3, #7
 8004476:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004478:	69fb      	ldr	r3, [r7, #28]
 800447a:	f1c3 0307 	rsb	r3, r3, #7
 800447e:	2b06      	cmp	r3, #6
 8004480:	bf28      	it	cs
 8004482:	2306      	movcs	r3, #6
 8004484:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004486:	69fb      	ldr	r3, [r7, #28]
 8004488:	3306      	adds	r3, #6
 800448a:	2b06      	cmp	r3, #6
 800448c:	d902      	bls.n	8004494 <NVIC_EncodePriority+0x30>
 800448e:	69fb      	ldr	r3, [r7, #28]
 8004490:	3b01      	subs	r3, #1
 8004492:	e000      	b.n	8004496 <NVIC_EncodePriority+0x32>
 8004494:	2300      	movs	r3, #0
 8004496:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004498:	69bb      	ldr	r3, [r7, #24]
 800449a:	2201      	movs	r2, #1
 800449c:	fa02 f303 	lsl.w	r3, r2, r3
 80044a0:	1e5a      	subs	r2, r3, #1
 80044a2:	68bb      	ldr	r3, [r7, #8]
 80044a4:	401a      	ands	r2, r3
 80044a6:	697b      	ldr	r3, [r7, #20]
 80044a8:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80044aa:	697b      	ldr	r3, [r7, #20]
 80044ac:	2101      	movs	r1, #1
 80044ae:	fa01 f303 	lsl.w	r3, r1, r3
 80044b2:	1e59      	subs	r1, r3, #1
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	400b      	ands	r3, r1
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 80044b8:	4313      	orrs	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
         );
}
 80044ba:	4618      	mov	r0, r3
 80044bc:	3724      	adds	r7, #36	; 0x24
 80044be:	46bd      	mov	sp, r7
 80044c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c4:	4770      	bx	lr
 80044c6:	bf00      	nop

080044c8 <XMC_VADC_GLOBAL_BackgroundTriggerConversion>:
 *
 * \par<b>Related APIs:</b><br>
 *  None.
 */
__STATIC_INLINE void XMC_VADC_GLOBAL_BackgroundTriggerConversion(XMC_VADC_GLOBAL_t *const global_ptr)
{
 80044c8:	b480      	push	{r7}
 80044ca:	b083      	sub	sp, #12
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundTriggerConversion:Wrong Module Pointer", (global_ptr == VADC))
  global_ptr->BRSMR |= (uint32_t)VADC_BRSMR_LDEV_Msk;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80044d6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
}
 80044e0:	370c      	adds	r7, #12
 80044e2:	46bd      	mov	sp, r7
 80044e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e8:	4770      	bx	lr
 80044ea:	bf00      	nop

080044ec <XMC_VADC_GLOBAL_BackgroundAddChannelToSequence>:
 *  XMC_VADC_GLOBAL_BackgroundAddMultipleChannels()<BR>
 */
__STATIC_INLINE void XMC_VADC_GLOBAL_BackgroundAddChannelToSequence(XMC_VADC_GLOBAL_t *const global_ptr,
    const uint32_t grp_num,
    const uint32_t ch_num)
{
 80044ec:	b480      	push	{r7}
 80044ee:	b085      	sub	sp, #20
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	60f8      	str	r0, [r7, #12]
 80044f4:	60b9      	str	r1, [r7, #8]
 80044f6:	607a      	str	r2, [r7, #4]
  XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundAddChannelToSequence:Wrong Module Pointer", (global_ptr == VADC))
  XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundAddChannelToSequence:Wrong Group Number", ((grp_num) < XMC_VADC_MAXIMUM_NUM_GROUPS))
  XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundAddChannelToSequence:Wrong Channel Number",
             ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))

  global_ptr->BRSSEL[grp_num] |= (uint32_t)((uint32_t)1 << ch_num);
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	68ba      	ldr	r2, [r7, #8]
 80044fc:	3260      	adds	r2, #96	; 0x60
 80044fe:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2101      	movs	r1, #1
 8004506:	fa01 f303 	lsl.w	r3, r1, r3
 800450a:	ea42 0103 	orr.w	r1, r2, r3
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	68ba      	ldr	r2, [r7, #8]
 8004512:	3260      	adds	r2, #96	; 0x60
 8004514:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8004518:	3714      	adds	r7, #20
 800451a:	46bd      	mov	sp, r7
 800451c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004520:	4770      	bx	lr
 8004522:	bf00      	nop

08004524 <XMC_VADC_GROUP_ResultInit>:
 * XMC_VADC_GROUP_AddResultToFifo()<BR> XMC_VADC_GROUP_EnableResultEvent()<br> XMC_VADC_GROUP_DisableResultEvent()<BR>
 */
__STATIC_INLINE void XMC_VADC_GROUP_ResultInit(XMC_VADC_GROUP_t *const group_ptr,
    const uint32_t res_reg_num,
    const XMC_VADC_RESULT_CONFIG_t *config)
{
 8004524:	b480      	push	{r7}
 8004526:	b085      	sub	sp, #20
 8004528:	af00      	add	r7, sp, #0
 800452a:	60f8      	str	r0, [r7, #12]
 800452c:	60b9      	str	r1, [r7, #8]
 800452e:	607a      	str	r2, [r7, #4]
  XMC_ASSERT("XMC_VADC_GROUP_ResultInit:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  group_ptr->RCR[res_reg_num] = config->g_rcr;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6819      	ldr	r1, [r3, #0]
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	68ba      	ldr	r2, [r7, #8]
 8004538:	32a0      	adds	r2, #160	; 0xa0
 800453a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

}
 800453e:	3714      	adds	r7, #20
 8004540:	46bd      	mov	sp, r7
 8004542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004546:	4770      	bx	lr

08004548 <XMC_VADC_GROUP_GetResult>:
 * \par<b>Related APIs:</b><br>
 * XMC_VADC_GROUP_GetDetailedResult().
 */
__STATIC_INLINE XMC_VADC_RESULT_SIZE_t XMC_VADC_GROUP_GetResult(XMC_VADC_GROUP_t *const group_ptr,
    const uint32_t res_reg)
{
 8004548:	b480      	push	{r7}
 800454a:	b083      	sub	sp, #12
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
 8004550:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_VADC_GROUP_GetResult:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  XMC_ASSERT("XMC_VADC_GROUP_GetResult:Wrong Result Register", ((res_reg) < XMC_VADC_NUM_RESULT_REGISTERS))

  return ((XMC_VADC_RESULT_SIZE_t)group_ptr->RES[res_reg]);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	683a      	ldr	r2, [r7, #0]
 8004556:	32c0      	adds	r2, #192	; 0xc0
 8004558:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800455c:	b29b      	uxth	r3, r3
}
 800455e:	4618      	mov	r0, r3
 8004560:	370c      	adds	r7, #12
 8004562:	46bd      	mov	sp, r7
 8004564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004568:	4770      	bx	lr
 800456a:	bf00      	nop

0800456c <ADC_MEASUREMENT_Init>:
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/* Initialization routine to call ADC LLD API's */
ADC_MEASUREMENT_STATUS_t ADC_MEASUREMENT_Init(ADC_MEASUREMENT_t *const handle_ptr)
{
 800456c:	b590      	push	{r4, r7, lr}
 800456e:	b085      	sub	sp, #20
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
  uint8_t j;
  ADC_MEASUREMENT_STATUS_t status;

  XMC_ASSERT("ADC_MEASUREMENT_Init:Invalid handle_ptr", (handle_ptr != NULL));

  if (ADC_MEASUREMENT_STATUS_UNINITIALIZED == handle_ptr->init_state)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	7e1b      	ldrb	r3, [r3, #24]
 8004578:	2b02      	cmp	r3, #2
 800457a:	f040 80a7 	bne.w	80046cc <ADC_MEASUREMENT_Init+0x160>
  {
    /* Call the function to initialise Clock and ADC global functional units*/
    status = (ADC_MEASUREMENT_STATUS_t) GLOBAL_ADC_Init(handle_ptr->global_handle);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	68db      	ldr	r3, [r3, #12]
 8004582:	4618      	mov	r0, r3
 8004584:	f7ff fb74 	bl	8003c70 <GLOBAL_ADC_Init>
 8004588:	4603      	mov	r3, r0
 800458a:	73bb      	strb	r3, [r7, #14]
  
    /*Initialize the Global Conversion class 0*/
    XMC_VADC_GLOBAL_InputClassInit(handle_ptr->global_handle->module_ptr,*handle_ptr->iclass_config_handle,
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	68db      	ldr	r3, [r3, #12]
 8004590:	68da      	ldr	r2, [r3, #12]
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	689b      	ldr	r3, [r3, #8]
 8004596:	4610      	mov	r0, r2
 8004598:	6819      	ldr	r1, [r3, #0]
 800459a:	2200      	movs	r2, #0
 800459c:	2300      	movs	r3, #0
 800459e:	f7fd ff07 	bl	80023b0 <XMC_VADC_GLOBAL_InputClassInit>
    XMC_VADC_GLOBAL_InputClassInit(handle_ptr->global_handle->module_ptr,*handle_ptr->iclass_config_handle,
                                      XMC_VADC_GROUP_CONV_STD,ADC_MEASUREMENT_ICLASS_NUM_XMC11);
#endif
  
    /* Initialize the Background Scan hardware */
    XMC_VADC_GLOBAL_BackgroundInit(handle_ptr->global_handle->module_ptr, handle_ptr->backgnd_config_handle);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	68db      	ldr	r3, [r3, #12]
 80045a6:	68da      	ldr	r2, [r3, #12]
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	685b      	ldr	r3, [r3, #4]
 80045ac:	4610      	mov	r0, r2
 80045ae:	4619      	mov	r1, r3
 80045b0:	f7fe f824 	bl	80025fc <XMC_VADC_GLOBAL_BackgroundInit>
#if (XMC_VADC_GROUP_AVAILABLE == 0U)
    /* Initialize the global result register */
    XMC_VADC_GLOBAL_ResultInit(handle_ptr->global_handle->module_ptr,handle_ptr->array->res_handle);
#endif

    for (j = (uint8_t)0; j < (uint8_t)ADC_MEASUREMENT_MAXCHANNELS; j++)
 80045b4:	2300      	movs	r3, #0
 80045b6:	73fb      	strb	r3, [r7, #15]
 80045b8:	e03c      	b.n	8004634 <ADC_MEASUREMENT_Init+0xc8>
    {
      indexed = handle_ptr->array->channel_array[j];
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	7bfa      	ldrb	r2, [r7, #15]
 80045c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80045c4:	60bb      	str	r3, [r7, #8]
#if (XMC_VADC_GROUP_AVAILABLE == 1U)
      /* Initialize for configured channels*/
      XMC_VADC_GROUP_ChannelInit(indexed->group_handle,(uint32_t)indexed->ch_num, indexed->ch_handle);
 80045c6:	68bb      	ldr	r3, [r7, #8]
 80045c8:	689a      	ldr	r2, [r3, #8]
 80045ca:	68bb      	ldr	r3, [r7, #8]
 80045cc:	7c5b      	ldrb	r3, [r3, #17]
 80045ce:	4619      	mov	r1, r3
 80045d0:	68bb      	ldr	r3, [r7, #8]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	4610      	mov	r0, r2
 80045d6:	461a      	mov	r2, r3
 80045d8:	f7fe f88e 	bl	80026f8 <XMC_VADC_GROUP_ChannelInit>
  
      /* Initialize for configured result registers */
      XMC_VADC_GROUP_ResultInit(indexed->group_handle, (uint32_t)indexed->ch_handle->result_reg_number,
 80045dc:	68bb      	ldr	r3, [r7, #8]
 80045de:	689a      	ldr	r2, [r3, #8]
 80045e0:	68bb      	ldr	r3, [r7, #8]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	789b      	ldrb	r3, [r3, #2]
 80045e6:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80045ea:	b2db      	uxtb	r3, r3
 80045ec:	4619      	mov	r1, r3
                                indexed->res_handle);
 80045ee:	68bb      	ldr	r3, [r7, #8]
 80045f0:	685b      	ldr	r3, [r3, #4]
#if (XMC_VADC_GROUP_AVAILABLE == 1U)
      /* Initialize for configured channels*/
      XMC_VADC_GROUP_ChannelInit(indexed->group_handle,(uint32_t)indexed->ch_num, indexed->ch_handle);
  
      /* Initialize for configured result registers */
      XMC_VADC_GROUP_ResultInit(indexed->group_handle, (uint32_t)indexed->ch_handle->result_reg_number,
 80045f2:	4610      	mov	r0, r2
 80045f4:	461a      	mov	r2, r3
 80045f6:	f7ff ff95 	bl	8004524 <XMC_VADC_GROUP_ResultInit>
                                indexed->res_handle);
#endif
      /* Add all channels into the Background Request Source Channel Select Register */
      XMC_VADC_GLOBAL_BackgroundAddChannelToSequence(handle_ptr->global_handle->module_ptr,
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	68db      	ldr	r3, [r3, #12]
 80045fe:	68da      	ldr	r2, [r3, #12]
                                                     (uint32_t)indexed->group_index, (uint32_t)indexed->ch_num);
 8004600:	68bb      	ldr	r3, [r7, #8]
 8004602:	7c1b      	ldrb	r3, [r3, #16]
      /* Initialize for configured result registers */
      XMC_VADC_GROUP_ResultInit(indexed->group_handle, (uint32_t)indexed->ch_handle->result_reg_number,
                                indexed->res_handle);
#endif
      /* Add all channels into the Background Request Source Channel Select Register */
      XMC_VADC_GLOBAL_BackgroundAddChannelToSequence(handle_ptr->global_handle->module_ptr,
 8004604:	4619      	mov	r1, r3
                                                     (uint32_t)indexed->group_index, (uint32_t)indexed->ch_num);
 8004606:	68bb      	ldr	r3, [r7, #8]
 8004608:	7c5b      	ldrb	r3, [r3, #17]
      /* Initialize for configured result registers */
      XMC_VADC_GROUP_ResultInit(indexed->group_handle, (uint32_t)indexed->ch_handle->result_reg_number,
                                indexed->res_handle);
#endif
      /* Add all channels into the Background Request Source Channel Select Register */
      XMC_VADC_GLOBAL_BackgroundAddChannelToSequence(handle_ptr->global_handle->module_ptr,
 800460a:	4610      	mov	r0, r2
 800460c:	461a      	mov	r2, r3
 800460e:	f7ff ff6d 	bl	80044ec <XMC_VADC_GLOBAL_BackgroundAddChannelToSequence>
                                                     (uint32_t)indexed->group_index, (uint32_t)indexed->ch_num);

#ifdef ADC_MEASUREMENT_ANALOG_IO_USED
      /* ANALOG_IO initialization for the channel*/
      if(indexed->analog_io_config != NULL)
 8004612:	68bb      	ldr	r3, [r7, #8]
 8004614:	68db      	ldr	r3, [r3, #12]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d009      	beq.n	800462e <ADC_MEASUREMENT_Init+0xc2>
      {
        status |= (ADC_MEASUREMENT_STATUS_t) ANALOG_IO_Init(indexed->analog_io_config);
 800461a:	68bb      	ldr	r3, [r7, #8]
 800461c:	68db      	ldr	r3, [r3, #12]
 800461e:	4618      	mov	r0, r3
 8004620:	f7ff feb2 	bl	8004388 <ANALOG_IO_Init>
 8004624:	4603      	mov	r3, r0
 8004626:	461a      	mov	r2, r3
 8004628:	7bbb      	ldrb	r3, [r7, #14]
 800462a:	4313      	orrs	r3, r2
 800462c:	73bb      	strb	r3, [r7, #14]
#if (XMC_VADC_GROUP_AVAILABLE == 0U)
    /* Initialize the global result register */
    XMC_VADC_GLOBAL_ResultInit(handle_ptr->global_handle->module_ptr,handle_ptr->array->res_handle);
#endif

    for (j = (uint8_t)0; j < (uint8_t)ADC_MEASUREMENT_MAXCHANNELS; j++)
 800462e:	7bfb      	ldrb	r3, [r7, #15]
 8004630:	3301      	adds	r3, #1
 8004632:	73fb      	strb	r3, [r7, #15]
 8004634:	7bfb      	ldrb	r3, [r7, #15]
 8004636:	2b01      	cmp	r3, #1
 8004638:	d9bf      	bls.n	80045ba <ADC_MEASUREMENT_Init+0x4e>
        status |= (ADC_MEASUREMENT_STATUS_t) ANALOG_IO_Init(indexed->analog_io_config);
      }
#endif
    }
#if(UC_SERIES != XMC11)
    if ((handle_ptr->backgnd_config_handle->req_src_interrupt) && (handle_ptr->req_src_intr_handle != NULL ))
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	685b      	ldr	r3, [r3, #4]
 800463e:	7a1b      	ldrb	r3, [r3, #8]
 8004640:	f003 0308 	and.w	r3, r3, #8
 8004644:	b2db      	uxtb	r3, r3
 8004646:	2b00      	cmp	r3, #0
 8004648:	d02c      	beq.n	80046a4 <ADC_MEASUREMENT_Init+0x138>
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	691b      	ldr	r3, [r3, #16]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d028      	beq.n	80046a4 <ADC_MEASUREMENT_Init+0x138>
    {
#if (UC_FAMILY == XMC1)
      NVIC_SetPriority((IRQn_Type)handle_ptr->req_src_intr_handle->node_id,
                        handle_ptr->req_src_intr_handle->priority);
#else
      NVIC_SetPriority((IRQn_Type)handle_ptr->req_src_intr_handle->node_id,
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	691b      	ldr	r3, [r3, #16]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	b2dc      	uxtb	r4, r3
 800465a:	f7ff feaf 	bl	80043bc <__NVIC_GetPriorityGrouping>
 800465e:	4601      	mov	r1, r0
                        NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
                        handle_ptr->req_src_intr_handle->priority, handle_ptr->req_src_intr_handle->sub_priority));
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	691b      	ldr	r3, [r3, #16]
    {
#if (UC_FAMILY == XMC1)
      NVIC_SetPriority((IRQn_Type)handle_ptr->req_src_intr_handle->node_id,
                        handle_ptr->req_src_intr_handle->priority);
#else
      NVIC_SetPriority((IRQn_Type)handle_ptr->req_src_intr_handle->node_id,
 8004664:	685a      	ldr	r2, [r3, #4]
                        NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
                        handle_ptr->req_src_intr_handle->priority, handle_ptr->req_src_intr_handle->sub_priority));
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	691b      	ldr	r3, [r3, #16]
    {
#if (UC_FAMILY == XMC1)
      NVIC_SetPriority((IRQn_Type)handle_ptr->req_src_intr_handle->node_id,
                        handle_ptr->req_src_intr_handle->priority);
#else
      NVIC_SetPriority((IRQn_Type)handle_ptr->req_src_intr_handle->node_id,
 800466a:	689b      	ldr	r3, [r3, #8]
 800466c:	4608      	mov	r0, r1
 800466e:	4611      	mov	r1, r2
 8004670:	461a      	mov	r2, r3
 8004672:	f7ff fef7 	bl	8004464 <NVIC_EncodePriority>
 8004676:	4602      	mov	r2, r0
 8004678:	b263      	sxtb	r3, r4
 800467a:	4618      	mov	r0, r3
 800467c:	4611      	mov	r1, r2
 800467e:	f7ff fec7 	bl	8004410 <__NVIC_SetPriority>
                        NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
                        handle_ptr->req_src_intr_handle->priority, handle_ptr->req_src_intr_handle->sub_priority));
#endif
      /* Connect background Request Source Event to NVIC node */
      XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode(handle_ptr->global_handle->module_ptr,
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	68db      	ldr	r3, [r3, #12]
 8004686:	68da      	ldr	r2, [r3, #12]
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	7e5b      	ldrb	r3, [r3, #25]
 800468c:	4610      	mov	r0, r2
 800468e:	4619      	mov	r1, r3
 8004690:	f7fd fee4 	bl	800245c <XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode>
                                                 (XMC_VADC_SR_t) handle_ptr->srv_req_node);
    
      /* Enable Background Scan Request source IRQ */
      NVIC_EnableIRQ((IRQn_Type)handle_ptr->req_src_intr_handle->node_id);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	691b      	ldr	r3, [r3, #16]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	b2db      	uxtb	r3, r3
 800469c:	b25b      	sxtb	r3, r3
 800469e:	4618      	mov	r0, r3
 80046a0:	f7ff fe9a 	bl	80043d8 <__NVIC_EnableIRQ>
    /* Enable Background Scan Request source IRQ */
    NVIC_EnableIRQ((IRQn_Type)handle_ptr->result_intr_handle->node_id);
#endif
#endif
    /* Mux Configuration is done*/
    if (handle_ptr->mux_config != NULL)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	695b      	ldr	r3, [r3, #20]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d002      	beq.n	80046b2 <ADC_MEASUREMENT_Init+0x146>
    {
      (handle_ptr->mux_config)();
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	695b      	ldr	r3, [r3, #20]
 80046b0:	4798      	blx	r3
    }
  
    if (handle_ptr->start_conversion != (bool)false)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	7e9b      	ldrb	r3, [r3, #26]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d005      	beq.n	80046c6 <ADC_MEASUREMENT_Init+0x15a>
    {
      /* Start conversion manually using load event trigger*/
      XMC_VADC_GLOBAL_BackgroundTriggerConversion(handle_ptr->global_handle->module_ptr);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	68db      	ldr	r3, [r3, #12]
 80046be:	68db      	ldr	r3, [r3, #12]
 80046c0:	4618      	mov	r0, r3
 80046c2:	f7ff ff01 	bl	80044c8 <XMC_VADC_GLOBAL_BackgroundTriggerConversion>
    }
    handle_ptr->init_state = status;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	7bba      	ldrb	r2, [r7, #14]
 80046ca:	761a      	strb	r2, [r3, #24]
  }
  return (handle_ptr->init_state);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	7e1b      	ldrb	r3, [r3, #24]
}
 80046d0:	4618      	mov	r0, r3
 80046d2:	3714      	adds	r7, #20
 80046d4:	46bd      	mov	sp, r7
 80046d6:	bd90      	pop	{r4, r7, pc}

080046d8 <ADC_MEASUREMENT_GetResult>:
}
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
#if(XMC_VADC_GROUP_AVAILABLE == 1U)
/* This API will get the result of a conversion for a specific channel*/
XMC_VADC_RESULT_SIZE_t ADC_MEASUREMENT_GetResult(ADC_MEASUREMENT_CHANNEL_t *const handle_ptr)
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	b084      	sub	sp, #16
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
  XMC_VADC_RESULT_SIZE_t result;

  XMC_ASSERT("ADC_MEASUREMENT_GetResult:Invalid handle_ptr", (handle_ptr != NULL));

  result = XMC_VADC_GROUP_GetResult(handle_ptr->group_handle, handle_ptr->ch_handle->result_reg_number);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	689a      	ldr	r2, [r3, #8]
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	789b      	ldrb	r3, [r3, #2]
 80046ea:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80046ee:	b2db      	uxtb	r3, r3
 80046f0:	4610      	mov	r0, r2
 80046f2:	4619      	mov	r1, r3
 80046f4:	f7ff ff28 	bl	8004548 <XMC_VADC_GROUP_GetResult>
 80046f8:	4603      	mov	r3, r0
 80046fa:	81fb      	strh	r3, [r7, #14]

  return (result);
 80046fc:	89fb      	ldrh	r3, [r7, #14]
}
 80046fe:	4618      	mov	r0, r3
 8004700:	3710      	adds	r7, #16
 8004702:	46bd      	mov	sp, r7
 8004704:	bd80      	pop	{r7, pc}
 8004706:	bf00      	nop

08004708 <DAVE_Init>:
 * @param[in]  None
 *
 * @return  DAVE_STATUS_t <BR>
 ******************************************************************************/
__WEAK DAVE_STATUS_t DAVE_Init(void)
{
 8004708:	b580      	push	{r7, lr}
 800470a:	b082      	sub	sp, #8
 800470c:	af00      	add	r7, sp, #0
  DAVE_STATUS_t init_status;
  
  init_status = DAVE_STATUS_SUCCESS;
 800470e:	2300      	movs	r3, #0
 8004710:	71fb      	strb	r3, [r7, #7]
     /** @Initialization of APPs Init Functions */
     init_status = (DAVE_STATUS_t)CLOCK_XMC4_Init(&CLOCK_XMC4_0);
 8004712:	4831      	ldr	r0, [pc, #196]	; (80047d8 <DAVE_Init+0xd0>)
 8004714:	f7ff fb98 	bl	8003e48 <CLOCK_XMC4_Init>
 8004718:	4603      	mov	r3, r0
 800471a:	71fb      	strb	r3, [r7, #7]

  if (init_status == DAVE_STATUS_SUCCESS)
 800471c:	79fb      	ldrb	r3, [r7, #7]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d104      	bne.n	800472c <DAVE_Init+0x24>
  {
	 /**  Initialization of TIMER APP instance TIMER_0 */
	 init_status = (DAVE_STATUS_t)TIMER_Init(&TIMER_0); 
 8004722:	482e      	ldr	r0, [pc, #184]	; (80047dc <DAVE_Init+0xd4>)
 8004724:	f7fe fa40 	bl	8002ba8 <TIMER_Init>
 8004728:	4603      	mov	r3, r0
 800472a:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 800472c:	79fb      	ldrb	r3, [r7, #7]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d104      	bne.n	800473c <DAVE_Init+0x34>
  {
	 /**  Initialization of INTERRUPT APP instance INTERRUPT_0 */
	 init_status = (DAVE_STATUS_t)INTERRUPT_Init(&INTERRUPT_0); 
 8004732:	482b      	ldr	r0, [pc, #172]	; (80047e0 <DAVE_Init+0xd8>)
 8004734:	f7fe fdea 	bl	800330c <INTERRUPT_Init>
 8004738:	4603      	mov	r3, r0
 800473a:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 800473c:	79fb      	ldrb	r3, [r7, #7]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d104      	bne.n	800474c <DAVE_Init+0x44>
  {
	 /**  Initialization of PIN_INTERRUPT APP instance PIN_INTERRUPT_0 */
	 init_status = (DAVE_STATUS_t)PIN_INTERRUPT_Init(&PIN_INTERRUPT_0); 
 8004742:	4828      	ldr	r0, [pc, #160]	; (80047e4 <DAVE_Init+0xdc>)
 8004744:	f7fe fcea 	bl	800311c <PIN_INTERRUPT_Init>
 8004748:	4603      	mov	r3, r0
 800474a:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 800474c:	79fb      	ldrb	r3, [r7, #7]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d104      	bne.n	800475c <DAVE_Init+0x54>
  {
	 /**  Initialization of DIGITAL_IO APP instance DIGITAL_IO_0 */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&DIGITAL_IO_0); 
 8004752:	4825      	ldr	r0, [pc, #148]	; (80047e8 <DAVE_Init+0xe0>)
 8004754:	f7ff fae4 	bl	8003d20 <DIGITAL_IO_Init>
 8004758:	4603      	mov	r3, r0
 800475a:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 800475c:	79fb      	ldrb	r3, [r7, #7]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d104      	bne.n	800476c <DAVE_Init+0x64>
  {
	 /**  Initialization of ADC_MEASUREMENT APP instance ADC_MEASUREMENT_0 */
	 init_status = (DAVE_STATUS_t)ADC_MEASUREMENT_Init(&ADC_MEASUREMENT_0); 
 8004762:	4822      	ldr	r0, [pc, #136]	; (80047ec <DAVE_Init+0xe4>)
 8004764:	f7ff ff02 	bl	800456c <ADC_MEASUREMENT_Init>
 8004768:	4603      	mov	r3, r0
 800476a:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 800476c:	79fb      	ldrb	r3, [r7, #7]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d104      	bne.n	800477c <DAVE_Init+0x74>
  {
	 /**  Initialization of PWM APP instance PWM_0 */
	 init_status = (DAVE_STATUS_t)PWM_Init(&PWM_0); 
 8004772:	481f      	ldr	r0, [pc, #124]	; (80047f0 <DAVE_Init+0xe8>)
 8004774:	f7fe fbf0 	bl	8002f58 <PWM_Init>
 8004778:	4603      	mov	r3, r0
 800477a:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 800477c:	79fb      	ldrb	r3, [r7, #7]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d104      	bne.n	800478c <DAVE_Init+0x84>
  {
	 /**  Initialization of I2C_MASTER APP instance I2C_MASTER_0 */
	 init_status = (DAVE_STATUS_t)I2C_MASTER_Init(&I2C_MASTER_0); 
 8004782:	481c      	ldr	r0, [pc, #112]	; (80047f4 <DAVE_Init+0xec>)
 8004784:	f7fe fed8 	bl	8003538 <I2C_MASTER_Init>
 8004788:	4603      	mov	r3, r0
 800478a:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 800478c:	79fb      	ldrb	r3, [r7, #7]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d104      	bne.n	800479c <DAVE_Init+0x94>
  {
	 /**  Initialization of UART APP instance UART_0 */
	 init_status = (DAVE_STATUS_t)UART_Init(&UART_0); 
 8004792:	4819      	ldr	r0, [pc, #100]	; (80047f8 <DAVE_Init+0xf0>)
 8004794:	f7fe f88e 	bl	80028b4 <UART_Init>
 8004798:	4603      	mov	r3, r0
 800479a:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 800479c:	79fb      	ldrb	r3, [r7, #7]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d104      	bne.n	80047ac <DAVE_Init+0xa4>
  {
	 /**  Initialization of CAN_NODE APP instance CAN_NODE_A */
	 init_status = (DAVE_STATUS_t)CAN_NODE_Init(&CAN_NODE_A); 
 80047a2:	4816      	ldr	r0, [pc, #88]	; (80047fc <DAVE_Init+0xf4>)
 80047a4:	f7ff fd4c 	bl	8004240 <CAN_NODE_Init>
 80047a8:	4603      	mov	r3, r0
 80047aa:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 80047ac:	79fb      	ldrb	r3, [r7, #7]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d104      	bne.n	80047bc <DAVE_Init+0xb4>
  {
	 /**  Initialization of INTERRUPT APP instance INTERRUPT_CAN_A */
	 init_status = (DAVE_STATUS_t)INTERRUPT_Init(&INTERRUPT_CAN_A); 
 80047b2:	4813      	ldr	r0, [pc, #76]	; (8004800 <DAVE_Init+0xf8>)
 80047b4:	f7fe fdaa 	bl	800330c <INTERRUPT_Init>
 80047b8:	4603      	mov	r3, r0
 80047ba:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 80047bc:	79fb      	ldrb	r3, [r7, #7]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d104      	bne.n	80047cc <DAVE_Init+0xc4>
  {
	 /**  Initialization of INTERRUPT APP instance TIMER_INT */
	 init_status = (DAVE_STATUS_t)INTERRUPT_Init(&TIMER_INT); 
 80047c2:	4810      	ldr	r0, [pc, #64]	; (8004804 <DAVE_Init+0xfc>)
 80047c4:	f7fe fda2 	bl	800330c <INTERRUPT_Init>
 80047c8:	4603      	mov	r3, r0
 80047ca:	71fb      	strb	r3, [r7, #7]
   }  
  return init_status;
 80047cc:	79fb      	ldrb	r3, [r7, #7]
} /**  End of function DAVE_Init */
 80047ce:	4618      	mov	r0, r3
 80047d0:	3708      	adds	r7, #8
 80047d2:	46bd      	mov	sp, r7
 80047d4:	bd80      	pop	{r7, pc}
 80047d6:	bf00      	nop
 80047d8:	1fffcaf8 	.word	0x1fffcaf8
 80047dc:	1fffc814 	.word	0x1fffc814
 80047e0:	08007bac 	.word	0x08007bac
 80047e4:	08007b88 	.word	0x08007b88
 80047e8:	08007c44 	.word	0x08007c44
 80047ec:	1fffc968 	.word	0x1fffc968
 80047f0:	1fffc83c 	.word	0x1fffc83c
 80047f4:	1fffc870 	.word	0x1fffc870
 80047f8:	1fffc800 	.word	0x1fffc800
 80047fc:	08007cbc 	.word	0x08007cbc
 8004800:	08007bb0 	.word	0x08007bb0
 8004804:	08007bb4 	.word	0x08007bb4

08004808 <XMC_CAN_MO_ResetStatus>:
 * None
 *
 */

__STATIC_INLINE void XMC_CAN_MO_ResetStatus(const XMC_CAN_MO_t *const can_mo, const uint32_t mask)
{
 8004808:	b480      	push	{r7}
 800480a:	b083      	sub	sp, #12
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
 8004810:	6039      	str	r1, [r7, #0]
  can_mo->can_mo_ptr->MOCTR = mask;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	683a      	ldr	r2, [r7, #0]
 8004818:	61da      	str	r2, [r3, #28]
}
 800481a:	370c      	adds	r7, #12
 800481c:	46bd      	mov	sp, r7
 800481e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004822:	4770      	bx	lr

08004824 <CCU80_3_IRQHandler>:
    }
}



void CAN_A_RX(void) {
 8004824:	b580      	push	{r7, lr}
 8004826:	b086      	sub	sp, #24
 8004828:	af00      	add	r7, sp, #0
    CAN_NODE_STATUS_t receive_status;
    CAN_NODE_STATUS_t status;
    XMC_CAN_MO_t *MO_Ptr;
    const CAN_NODE_t *HandlePtr1 = &CAN_NODE_A;
 800482a:	4b23      	ldr	r3, [pc, #140]	; (80048b8 <CCU80_3_IRQHandler+0x94>)
 800482c:	617b      	str	r3, [r7, #20]
    MO_Ptr = HandlePtr1->lmobj_ptr[0]->mo_ptr;
 800482e:	697b      	ldr	r3, [r7, #20]
 8004830:	68db      	ldr	r3, [r3, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	613b      	str	r3, [r7, #16]

    status = CAN_NODE_MO_GetStatus(HandlePtr1->lmobj_ptr[0]);
 8004836:	697b      	ldr	r3, [r7, #20]
 8004838:	68db      	ldr	r3, [r3, #12]
 800483a:	4618      	mov	r0, r3
 800483c:	f7ff fcf0 	bl	8004220 <CAN_NODE_MO_GetStatus>
 8004840:	4603      	mov	r3, r0
 8004842:	73fb      	strb	r3, [r7, #15]
    // Verificar o estado pendente de recepção
    if (status & XMC_CAN_MO_STATUS_RX_PENDING) {
 8004844:	7bfb      	ldrb	r3, [r7, #15]
 8004846:	f003 0301 	and.w	r3, r3, #1
 800484a:	2b00      	cmp	r3, #0
 800484c:	d030      	beq.n	80048b0 <CCU80_3_IRQHandler+0x8c>
        // Limpar a flag
        XMC_CAN_MO_ResetStatus(MO_Ptr, XMC_CAN_MO_RESET_STATUS_RX_PENDING);
 800484e:	6938      	ldr	r0, [r7, #16]
 8004850:	2101      	movs	r1, #1
 8004852:	f7ff ffd9 	bl	8004808 <XMC_CAN_MO_ResetStatus>
        // Ler o objecto de mensagem recebido
        receive_status = CAN_NODE_MO_Receive(HandlePtr1->lmobj_ptr[0]);
 8004856:	697b      	ldr	r3, [r7, #20]
 8004858:	68db      	ldr	r3, [r3, #12]
 800485a:	4618      	mov	r0, r3
 800485c:	f7ff fcce 	bl	80041fc <CAN_NODE_MO_Receive>
 8004860:	4603      	mov	r3, r0
 8004862:	73bb      	strb	r3, [r7, #14]
        if (receive_status == CAN_NODE_STATUS_SUCCESS) {
 8004864:	7bbb      	ldrb	r3, [r7, #14]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d122      	bne.n	80048b0 <CCU80_3_IRQHandler+0x8c>
            uint8_t data[8] = {0};
 800486a:	2300      	movs	r3, #0
 800486c:	607b      	str	r3, [r7, #4]
 800486e:	2300      	movs	r3, #0
 8004870:	60bb      	str	r3, [r7, #8]
            memcpy(data, &MO_Ptr->can_data[0], sizeof(MO_Ptr->can_data[0]));
 8004872:	693b      	ldr	r3, [r7, #16]
 8004874:	3310      	adds	r3, #16
 8004876:	1d3a      	adds	r2, r7, #4
 8004878:	4610      	mov	r0, r2
 800487a:	4619      	mov	r1, r3
 800487c:	2204      	movs	r2, #4
 800487e:	f001 f82f 	bl	80058e0 <memcpy>
            memcpy(data + sizeof(MO_Ptr->can_data[0]), &MO_Ptr->can_data[1], sizeof(MO_Ptr->can_data[1]));
 8004882:	693b      	ldr	r3, [r7, #16]
 8004884:	f103 0214 	add.w	r2, r3, #20
 8004888:	1d3b      	adds	r3, r7, #4
 800488a:	3304      	adds	r3, #4
 800488c:	4618      	mov	r0, r3
 800488e:	4611      	mov	r1, r2
 8004890:	2204      	movs	r2, #4
 8004892:	f001 f825 	bl	80058e0 <memcpy>

            can_transmit(MO_Ptr->can_identifier, data, MO_Ptr->can_data_length);
 8004896:	693b      	ldr	r3, [r7, #16]
 8004898:	685b      	ldr	r3, [r3, #4]
 800489a:	f3c3 031c 	ubfx	r3, r3, #0, #29
 800489e:	b299      	uxth	r1, r3
 80048a0:	693b      	ldr	r3, [r7, #16]
 80048a2:	7b1b      	ldrb	r3, [r3, #12]
 80048a4:	1d3a      	adds	r2, r7, #4
 80048a6:	4608      	mov	r0, r1
 80048a8:	4611      	mov	r1, r2
 80048aa:	461a      	mov	r2, r3
 80048ac:	f000 f806 	bl	80048bc <can_transmit>
        }
    }
}
 80048b0:	3718      	adds	r7, #24
 80048b2:	46bd      	mov	sp, r7
 80048b4:	bd80      	pop	{r7, pc}
 80048b6:	bf00      	nop
 80048b8:	08007cbc 	.word	0x08007cbc

080048bc <can_transmit>:

void can_transmit(uint16_t id, uint8_t *data, uint8_t length) {
 80048bc:	b580      	push	{r7, lr}
 80048be:	b086      	sub	sp, #24
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	4603      	mov	r3, r0
 80048c4:	6039      	str	r1, [r7, #0]
 80048c6:	80fb      	strh	r3, [r7, #6]
 80048c8:	4613      	mov	r3, r2
 80048ca:	717b      	strb	r3, [r7, #5]
    XMC_CAN_MO_t *MO_Ptr;
    const CAN_NODE_t *HandlePtr1 = &CAN_NODE_A;
 80048cc:	4b35      	ldr	r3, [pc, #212]	; (80049a4 <can_transmit+0xe8>)
 80048ce:	617b      	str	r3, [r7, #20]
    MO_Ptr = HandlePtr1->lmobj_ptr[1]->mo_ptr;
 80048d0:	697b      	ldr	r3, [r7, #20]
 80048d2:	691b      	ldr	r3, [r3, #16]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	613b      	str	r3, [r7, #16]

    // Código da aplicação
    MO_Ptr->can_mo_type = XMC_CAN_MO_TYPE_TRANSMSGOBJ;  // Configurar tipo do objecto de mensagem como tipo de transmissão
 80048d8:	693b      	ldr	r3, [r7, #16]
 80048da:	2201      	movs	r2, #1
 80048dc:	761a      	strb	r2, [r3, #24]
    MO_Ptr->can_id_mode = XMC_CAN_FRAME_TYPE_STANDARD_11BITS;  // Configurar tipo do identificador do MO
 80048de:	693a      	ldr	r2, [r7, #16]
 80048e0:	79d3      	ldrb	r3, [r2, #7]
 80048e2:	f36f 1345 	bfc	r3, #5, #1
 80048e6:	71d3      	strb	r3, [r2, #7]
    MO_Ptr->can_data_length = length;  // Configurar campo de comprimento dos dados do MO de transmissão CAN
 80048e8:	693b      	ldr	r3, [r7, #16]
 80048ea:	797a      	ldrb	r2, [r7, #5]
 80048ec:	731a      	strb	r2, [r3, #12]
    MO_Ptr->can_identifier = id;
 80048ee:	88fa      	ldrh	r2, [r7, #6]
 80048f0:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
 80048f4:	6939      	ldr	r1, [r7, #16]
 80048f6:	684b      	ldr	r3, [r1, #4]
 80048f8:	f362 031c 	bfi	r3, r2, #0, #29
 80048fc:	604b      	str	r3, [r1, #4]
    MO_Ptr->can_data[0] = data[0] + (data[1]<<8) + (data[2]<<16) + (data[3]<<24);  // Configurar os 4 bytes superiores dos dados
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	781b      	ldrb	r3, [r3, #0]
 8004902:	461a      	mov	r2, r3
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	3301      	adds	r3, #1
 8004908:	781b      	ldrb	r3, [r3, #0]
 800490a:	021b      	lsls	r3, r3, #8
 800490c:	441a      	add	r2, r3
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	3302      	adds	r3, #2
 8004912:	781b      	ldrb	r3, [r3, #0]
 8004914:	041b      	lsls	r3, r3, #16
 8004916:	441a      	add	r2, r3
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	3303      	adds	r3, #3
 800491c:	781b      	ldrb	r3, [r3, #0]
 800491e:	061b      	lsls	r3, r3, #24
 8004920:	4413      	add	r3, r2
 8004922:	461a      	mov	r2, r3
 8004924:	693b      	ldr	r3, [r7, #16]
 8004926:	611a      	str	r2, [r3, #16]
    MO_Ptr->can_data[1] = data[4] + (data[5]<<8) + (data[6]<<16) + (data[7]<<24);  // Configurar os 4 bytes inferiores dos dados
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	3304      	adds	r3, #4
 800492c:	781b      	ldrb	r3, [r3, #0]
 800492e:	461a      	mov	r2, r3
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	3305      	adds	r3, #5
 8004934:	781b      	ldrb	r3, [r3, #0]
 8004936:	021b      	lsls	r3, r3, #8
 8004938:	441a      	add	r2, r3
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	3306      	adds	r3, #6
 800493e:	781b      	ldrb	r3, [r3, #0]
 8004940:	041b      	lsls	r3, r3, #16
 8004942:	441a      	add	r2, r3
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	3307      	adds	r3, #7
 8004948:	781b      	ldrb	r3, [r3, #0]
 800494a:	061b      	lsls	r3, r3, #24
 800494c:	4413      	add	r3, r2
 800494e:	461a      	mov	r2, r3
 8004950:	693b      	ldr	r3, [r7, #16]
 8004952:	615a      	str	r2, [r3, #20]

    // Alterar a configuração do MO em tempo de execução
    CAN_NODE_MO_Init(HandlePtr1->lmobj_ptr[1]);
 8004954:	697b      	ldr	r3, [r7, #20]
 8004956:	691b      	ldr	r3, [r3, #16]
 8004958:	4618      	mov	r0, r3
 800495a:	f7ff fc11 	bl	8004180 <CAN_NODE_MO_Init>

    CAN_NODE_STATUS_t mo_tranmit_status;
    CAN_NODE_STATUS_t status;

    MO_Ptr = HandlePtr1->lmobj_ptr[1]->mo_ptr;
 800495e:	697b      	ldr	r3, [r7, #20]
 8004960:	691b      	ldr	r3, [r3, #16]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	613b      	str	r3, [r7, #16]
    mo_tranmit_status = CAN_NODE_MO_Transmit(HandlePtr1->lmobj_ptr[1]);
 8004966:	697b      	ldr	r3, [r7, #20]
 8004968:	691b      	ldr	r3, [r3, #16]
 800496a:	4618      	mov	r0, r3
 800496c:	f7ff fc34 	bl	80041d8 <CAN_NODE_MO_Transmit>
 8004970:	4603      	mov	r3, r0
 8004972:	73fb      	strb	r3, [r7, #15]

    if (mo_tranmit_status == CAN_NODE_STATUS_SUCCESS) {
 8004974:	7bfb      	ldrb	r3, [r7, #15]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d10f      	bne.n	800499a <can_transmit+0xde>
        // Sucesso na transmissão do objecto de mensagem
        status = CAN_NODE_MO_GetStatus(HandlePtr1->lmobj_ptr[1]);
 800497a:	697b      	ldr	r3, [r7, #20]
 800497c:	691b      	ldr	r3, [r3, #16]
 800497e:	4618      	mov	r0, r3
 8004980:	f7ff fc4e 	bl	8004220 <CAN_NODE_MO_GetStatus>
 8004984:	4603      	mov	r3, r0
 8004986:	73bb      	strb	r3, [r7, #14]

        if (status & XMC_CAN_MO_STATUS_TX_PENDING) {
 8004988:	7bbb      	ldrb	r3, [r7, #14]
 800498a:	f003 0302 	and.w	r3, r3, #2
 800498e:	2b00      	cmp	r3, #0
 8004990:	d003      	beq.n	800499a <can_transmit+0xde>
            // Limpar a flag de transmissão OK
            XMC_CAN_MO_ResetStatus(MO_Ptr, XMC_CAN_MO_RESET_STATUS_TX_PENDING);
 8004992:	6938      	ldr	r0, [r7, #16]
 8004994:	2102      	movs	r1, #2
 8004996:	f7ff ff37 	bl	8004808 <XMC_CAN_MO_ResetStatus>
        }
    }

    __NOP();
 800499a:	bf00      	nop
}
 800499c:	3718      	adds	r7, #24
 800499e:	46bd      	mov	sp, r7
 80049a0:	bd80      	pop	{r7, pc}
 80049a2:	bf00      	nop
 80049a4:	08007cbc 	.word	0x08007cbc

080049a8 <updateTime>:
 *      Author: Ricardo França
 */

#include <customtime.h>

void updateTime(time_struct_t *time){
 80049a8:	b480      	push	{r7}
 80049aa:	b083      	sub	sp, #12
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
	if(time->millis == 1000){
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80049b8:	d108      	bne.n	80049cc <updateTime+0x24>
		time->seconds++;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	889b      	ldrh	r3, [r3, #4]
 80049be:	3301      	adds	r3, #1
 80049c0:	b29a      	uxth	r2, r3
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	809a      	strh	r2, [r3, #4]
		time->millis = 0;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2200      	movs	r2, #0
 80049ca:	601a      	str	r2, [r3, #0]
	}
	if(time->seconds == 60){
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	889b      	ldrh	r3, [r3, #4]
 80049d0:	2b3c      	cmp	r3, #60	; 0x3c
 80049d2:	d108      	bne.n	80049e6 <updateTime+0x3e>
		time->minutes++;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	88db      	ldrh	r3, [r3, #6]
 80049d8:	3301      	adds	r3, #1
 80049da:	b29a      	uxth	r2, r3
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	80da      	strh	r2, [r3, #6]
		time->seconds = 0;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2200      	movs	r2, #0
 80049e4:	809a      	strh	r2, [r3, #4]
	}
	if(time->minutes == 60){
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	88db      	ldrh	r3, [r3, #6]
 80049ea:	2b3c      	cmp	r3, #60	; 0x3c
 80049ec:	d108      	bne.n	8004a00 <updateTime+0x58>
		time->hours++;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	891b      	ldrh	r3, [r3, #8]
 80049f2:	3301      	adds	r3, #1
 80049f4:	b29a      	uxth	r2, r3
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	811a      	strh	r2, [r3, #8]
		time->minutes = 0;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2200      	movs	r2, #0
 80049fe:	80da      	strh	r2, [r3, #6]
	}
	if(time->hours == 24){
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	891b      	ldrh	r3, [r3, #8]
 8004a04:	2b18      	cmp	r3, #24
 8004a06:	d108      	bne.n	8004a1a <updateTime+0x72>
		time->days++;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	7a9b      	ldrb	r3, [r3, #10]
 8004a0c:	3301      	adds	r3, #1
 8004a0e:	b2da      	uxtb	r2, r3
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	729a      	strb	r2, [r3, #10]
		time->hours = 0;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2200      	movs	r2, #0
 8004a18:	811a      	strh	r2, [r3, #8]
	}
}
 8004a1a:	370c      	adds	r7, #12
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a22:	4770      	bx	lr

08004a24 <I2C_MASTER_IsTxBusy>:
 *
 * @endcode<BR> </p>
 *
 */
__STATIC_INLINE bool I2C_MASTER_IsTxBusy(I2C_MASTER_t * const handle)
{
 8004a24:	b480      	push	{r7}
 8004a26:	b083      	sub	sp, #12
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("I2C_MASTER_IsTxBusy: invalid handle", (handle != NULL));
  return handle->runtime->tx_busy;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	689b      	ldr	r3, [r3, #8]
 8004a30:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8004a34:	b2db      	uxtb	r3, r3
}
 8004a36:	4618      	mov	r0, r3
 8004a38:	370c      	adds	r7, #12
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a40:	4770      	bx	lr
 8004a42:	bf00      	nop

08004a44 <I2C_MASTER_IsRxBusy>:
 *
 * @endcode<BR> </p>
 *
 */
__STATIC_INLINE bool I2C_MASTER_IsRxBusy(I2C_MASTER_t * const handle)
{
 8004a44:	b480      	push	{r7}
 8004a46:	b083      	sub	sp, #12
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("I2C_MASTER_IsRxBusy: invalid handle", (handle != NULL));
  return handle->runtime->rx_busy;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	689b      	ldr	r3, [r3, #8]
 8004a50:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8004a54:	b2db      	uxtb	r3, r3
}
 8004a56:	4618      	mov	r0, r3
 8004a58:	370c      	adds	r7, #12
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a60:	4770      	bx	lr
 8004a62:	bf00      	nop

08004a64 <StartMeasurement>:
#include <stdio.h>
#include "DAVE.h"

extern I2C_MASTER_t I2C_MASTER_0; // Declaração do I2C_0

void StartMeasurement() {
 8004a64:	b590      	push	{r4, r7, lr}
 8004a66:	b085      	sub	sp, #20
 8004a68:	af02      	add	r7, sp, #8
    uint8_t tx_buffer[3] = {0xAC, 0x33, 0x00};  // Comando para medir temperatura e humidade
 8004a6a:	4a0d      	ldr	r2, [pc, #52]	; (8004aa0 <StartMeasurement+0x3c>)
 8004a6c:	1d3b      	adds	r3, r7, #4
 8004a6e:	8811      	ldrh	r1, [r2, #0]
 8004a70:	7892      	ldrb	r2, [r2, #2]
 8004a72:	8019      	strh	r1, [r3, #0]
 8004a74:	709a      	strb	r2, [r3, #2]
    I2C_MASTER_Transmit(&I2C_MASTER_0, true, SLAVE_ADDRESS, tx_buffer, 3, true);
 8004a76:	1d3c      	adds	r4, r7, #4
 8004a78:	2303      	movs	r3, #3
 8004a7a:	9300      	str	r3, [sp, #0]
 8004a7c:	2301      	movs	r3, #1
 8004a7e:	9301      	str	r3, [sp, #4]
 8004a80:	4808      	ldr	r0, [pc, #32]	; (8004aa4 <StartMeasurement+0x40>)
 8004a82:	2101      	movs	r1, #1
 8004a84:	2270      	movs	r2, #112	; 0x70
 8004a86:	4623      	mov	r3, r4
 8004a88:	f7fe fd8c 	bl	80035a4 <I2C_MASTER_Transmit>
    while(I2C_MASTER_IsTxBusy(&I2C_MASTER_0));
 8004a8c:	bf00      	nop
 8004a8e:	4805      	ldr	r0, [pc, #20]	; (8004aa4 <StartMeasurement+0x40>)
 8004a90:	f7ff ffc8 	bl	8004a24 <I2C_MASTER_IsTxBusy>
 8004a94:	4603      	mov	r3, r0
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d1f9      	bne.n	8004a8e <StartMeasurement+0x2a>
}
 8004a9a:	370c      	adds	r7, #12
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	bd90      	pop	{r4, r7, pc}
 8004aa0:	08007d94 	.word	0x08007d94
 8004aa4:	1fffc870 	.word	0x1fffc870

08004aa8 <updateTempAndHumidity>:
    // Process the result
    uint32_t raw_hum = (rx_buffer[1] << 12) | (rx_buffer[2] << 4) | (rx_buffer[3] >> 4);
    return (raw_hum / 1048576.0) * 100.0; // Return humidity in percentage
}

void updateTempAndHumidity(float* temp, float* humidity){
 8004aa8:	b590      	push	{r4, r7, lr}
 8004aaa:	b08b      	sub	sp, #44	; 0x2c
 8004aac:	af04      	add	r7, sp, #16
 8004aae:	6078      	str	r0, [r7, #4]
 8004ab0:	6039      	str	r1, [r7, #0]
    StartMeasurement();
 8004ab2:	f7ff ffd7 	bl	8004a64 <StartMeasurement>
    uint8_t rx_buffer[6] = {0x00}; // Buffer to receive data from the sensor
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	60bb      	str	r3, [r7, #8]
 8004aba:	2300      	movs	r3, #0
 8004abc:	81bb      	strh	r3, [r7, #12]

    // Receive data from the sensor
    I2C_MASTER_Receive(&I2C_MASTER_0, true, SLAVE_ADDRESS, rx_buffer, 6, true, true);
 8004abe:	f107 0408 	add.w	r4, r7, #8
 8004ac2:	2306      	movs	r3, #6
 8004ac4:	9300      	str	r3, [sp, #0]
 8004ac6:	2301      	movs	r3, #1
 8004ac8:	9301      	str	r3, [sp, #4]
 8004aca:	2301      	movs	r3, #1
 8004acc:	9302      	str	r3, [sp, #8]
 8004ace:	482c      	ldr	r0, [pc, #176]	; (8004b80 <updateTempAndHumidity+0xd8>)
 8004ad0:	2101      	movs	r1, #1
 8004ad2:	2270      	movs	r2, #112	; 0x70
 8004ad4:	4623      	mov	r3, r4
 8004ad6:	f7fe fd8f 	bl	80035f8 <I2C_MASTER_Receive>
    while (I2C_MASTER_IsRxBusy(&I2C_MASTER_0));
 8004ada:	bf00      	nop
 8004adc:	4828      	ldr	r0, [pc, #160]	; (8004b80 <updateTempAndHumidity+0xd8>)
 8004ade:	f7ff ffb1 	bl	8004a44 <I2C_MASTER_IsRxBusy>
 8004ae2:	4603      	mov	r3, r0
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d1f9      	bne.n	8004adc <updateTempAndHumidity+0x34>

    // Process the results
    float raw_temp = ((rx_buffer[3] & 0x0f) << 16) + (rx_buffer[4] << 8) + (rx_buffer[5]);
 8004ae8:	7afb      	ldrb	r3, [r7, #11]
 8004aea:	f003 030f 	and.w	r3, r3, #15
 8004aee:	041a      	lsls	r2, r3, #16
 8004af0:	7b3b      	ldrb	r3, [r7, #12]
 8004af2:	021b      	lsls	r3, r3, #8
 8004af4:	4413      	add	r3, r2
 8004af6:	7b7a      	ldrb	r2, [r7, #13]
 8004af8:	4413      	add	r3, r2
 8004afa:	ee07 3a90 	vmov	s15, r3
 8004afe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004b02:	edc7 7a05 	vstr	s15, [r7, #20]
    *temp = (raw_temp / 1048576) * 200 - 50;
 8004b06:	edd7 7a05 	vldr	s15, [r7, #20]
 8004b0a:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8004b84 <updateTempAndHumidity+0xdc>
 8004b0e:	eec7 7a87 	vdiv.f32	s15, s15, s14
 8004b12:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8004b88 <updateTempAndHumidity+0xe0>
 8004b16:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004b1a:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8004b8c <updateTempAndHumidity+0xe4>
 8004b1e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	edc3 7a00 	vstr	s15, [r3]

    uint32_t raw_hum = (rx_buffer[1] << 12) | (rx_buffer[2] << 4) | (rx_buffer[3] >> 4);
 8004b28:	7a7b      	ldrb	r3, [r7, #9]
 8004b2a:	031a      	lsls	r2, r3, #12
 8004b2c:	7abb      	ldrb	r3, [r7, #10]
 8004b2e:	011b      	lsls	r3, r3, #4
 8004b30:	4313      	orrs	r3, r2
 8004b32:	7afa      	ldrb	r2, [r7, #11]
 8004b34:	0912      	lsrs	r2, r2, #4
 8004b36:	b2d2      	uxtb	r2, r2
 8004b38:	4313      	orrs	r3, r2
 8004b3a:	613b      	str	r3, [r7, #16]
    *humidity = (raw_hum / 1048576.0) * 100.0;
 8004b3c:	6938      	ldr	r0, [r7, #16]
 8004b3e:	f000 fbcb 	bl	80052d8 <__aeabi_ui2d>
 8004b42:	4602      	mov	r2, r0
 8004b44:	460b      	mov	r3, r1
 8004b46:	4610      	mov	r0, r2
 8004b48:	4619      	mov	r1, r3
 8004b4a:	f04f 0200 	mov.w	r2, #0
 8004b4e:	4b10      	ldr	r3, [pc, #64]	; (8004b90 <updateTempAndHumidity+0xe8>)
 8004b50:	f000 fd62 	bl	8005618 <__aeabi_ddiv>
 8004b54:	4602      	mov	r2, r0
 8004b56:	460b      	mov	r3, r1
 8004b58:	4610      	mov	r0, r2
 8004b5a:	4619      	mov	r1, r3
 8004b5c:	f04f 0200 	mov.w	r2, #0
 8004b60:	4b0c      	ldr	r3, [pc, #48]	; (8004b94 <updateTempAndHumidity+0xec>)
 8004b62:	f000 fc2f 	bl	80053c4 <__aeabi_dmul>
 8004b66:	4602      	mov	r2, r0
 8004b68:	460b      	mov	r3, r1
 8004b6a:	4610      	mov	r0, r2
 8004b6c:	4619      	mov	r1, r3
 8004b6e:	f000 fe3b 	bl	80057e8 <__aeabi_d2f>
 8004b72:	4602      	mov	r2, r0
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	601a      	str	r2, [r3, #0]
}
 8004b78:	371c      	adds	r7, #28
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	bd90      	pop	{r4, r7, pc}
 8004b7e:	bf00      	nop
 8004b80:	1fffc870 	.word	0x1fffc870
 8004b84:	49800000 	.word	0x49800000
 8004b88:	43480000 	.word	0x43480000
 8004b8c:	42480000 	.word	0x42480000
 8004b90:	41300000 	.word	0x41300000
 8004b94:	40590000 	.word	0x40590000

08004b98 <XMC_GPIO_ToggleOutput>:
 * and does not contain any flip-flop. A read action delivers the value of 0.
 *
 */

__STATIC_INLINE void XMC_GPIO_ToggleOutput(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 8004b98:	b480      	push	{r7}
 8004b9a:	b083      	sub	sp, #12
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
 8004ba0:	460b      	mov	r3, r1
 8004ba2:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_ToggleOutput: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = 0x10001U << pin;
 8004ba4:	78fb      	ldrb	r3, [r7, #3]
 8004ba6:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 8004baa:	409a      	lsls	r2, r3
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	605a      	str	r2, [r3, #4]
}
 8004bb0:	370c      	adds	r7, #12
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb8:	4770      	bx	lr
 8004bba:	bf00      	nop

08004bbc <DIGITAL_IO_ToggleOutput>:
* }
*  @endcode
*/

__STATIC_INLINE void DIGITAL_IO_ToggleOutput(const DIGITAL_IO_t *const handler)
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b082      	sub	sp, #8
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_ToggleOutput: handler null pointer", handler != NULL);
  XMC_GPIO_ToggleOutput(handler->gpio_port, handler->gpio_pin);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681a      	ldr	r2, [r3, #0]
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	7c1b      	ldrb	r3, [r3, #16]
 8004bcc:	4610      	mov	r0, r2
 8004bce:	4619      	mov	r1, r3
 8004bd0:	f7ff ffe2 	bl	8004b98 <XMC_GPIO_ToggleOutput>
}
 8004bd4:	3708      	adds	r7, #8
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	bd80      	pop	{r7, pc}
 8004bda:	bf00      	nop

08004bdc <CCU40_2_IRQHandler>:
#include "interrupt.h"
#include "customtime.h"

extern time_struct_t runTime;

void interrupcao(){
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	af00      	add	r7, sp, #0
	//DIGITAL_IO_ToggleOutput(&DIGITAL_IO_0);
	runTime.millis++;
 8004be0:	4b04      	ldr	r3, [pc, #16]	; (8004bf4 <CCU40_2_IRQHandler+0x18>)
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	3301      	adds	r3, #1
 8004be6:	4a03      	ldr	r2, [pc, #12]	; (8004bf4 <CCU40_2_IRQHandler+0x18>)
 8004be8:	6013      	str	r3, [r2, #0]
	updateTime(&runTime);
 8004bea:	4802      	ldr	r0, [pc, #8]	; (8004bf4 <CCU40_2_IRQHandler+0x18>)
 8004bec:	f7ff fedc 	bl	80049a8 <updateTime>
}
 8004bf0:	bd80      	pop	{r7, pc}
 8004bf2:	bf00      	nop
 8004bf4:	1fffcb08 	.word	0x1fffcb08

08004bf8 <ERU1_0_IRQHandler>:

void btn_interrupt(){
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	af00      	add	r7, sp, #0
	DIGITAL_IO_ToggleOutput(&DIGITAL_IO_0);
 8004bfc:	4801      	ldr	r0, [pc, #4]	; (8004c04 <ERU1_0_IRQHandler+0xc>)
 8004bfe:	f7ff ffdd 	bl	8004bbc <DIGITAL_IO_ToggleOutput>
}
 8004c02:	bd80      	pop	{r7, pc}
 8004c04:	08007c44 	.word	0x08007c44

08004c08 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004c08:	b480      	push	{r7}
 8004c0a:	b083      	sub	sp, #12
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	4603      	mov	r3, r0
 8004c10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004c12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	db0b      	blt.n	8004c32 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004c1a:	4908      	ldr	r1, [pc, #32]	; (8004c3c <__NVIC_EnableIRQ+0x34>)
 8004c1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c20:	095b      	lsrs	r3, r3, #5
 8004c22:	79fa      	ldrb	r2, [r7, #7]
 8004c24:	f002 021f 	and.w	r2, r2, #31
 8004c28:	2001      	movs	r0, #1
 8004c2a:	fa00 f202 	lsl.w	r2, r0, r2
 8004c2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004c32:	370c      	adds	r7, #12
 8004c34:	46bd      	mov	sp, r7
 8004c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3a:	4770      	bx	lr
 8004c3c:	e000e100 	.word	0xe000e100

08004c40 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004c40:	b480      	push	{r7}
 8004c42:	b083      	sub	sp, #12
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	4603      	mov	r3, r0
 8004c48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004c4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	db10      	blt.n	8004c74 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004c52:	490b      	ldr	r1, [pc, #44]	; (8004c80 <__NVIC_DisableIRQ+0x40>)
 8004c54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c58:	095b      	lsrs	r3, r3, #5
 8004c5a:	79fa      	ldrb	r2, [r7, #7]
 8004c5c:	f002 021f 	and.w	r2, r2, #31
 8004c60:	2001      	movs	r0, #1
 8004c62:	fa00 f202 	lsl.w	r2, r0, r2
 8004c66:	3320      	adds	r3, #32
 8004c68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8004c6c:	f3bf 8f4f 	dsb	sy
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8004c70:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 8004c74:	370c      	adds	r7, #12
 8004c76:	46bd      	mov	sp, r7
 8004c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7c:	4770      	bx	lr
 8004c7e:	bf00      	nop
 8004c80:	e000e100 	.word	0xe000e100

08004c84 <XMC_GPIO_ToggleOutput>:
 * and does not contain any flip-flop. A read action delivers the value of 0.
 *
 */

__STATIC_INLINE void XMC_GPIO_ToggleOutput(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 8004c84:	b480      	push	{r7}
 8004c86:	b083      	sub	sp, #12
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
 8004c8c:	460b      	mov	r3, r1
 8004c8e:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_ToggleOutput: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = 0x10001U << pin;
 8004c90:	78fb      	ldrb	r3, [r7, #3]
 8004c92:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 8004c96:	409a      	lsls	r2, r3
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	605a      	str	r2, [r3, #4]
}
 8004c9c:	370c      	adds	r7, #12
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca4:	4770      	bx	lr
 8004ca6:	bf00      	nop

08004ca8 <PIN_INTERRUPT_Enable>:
 *    return (1);
 *  }
 * @endcode<BR> </p>
 */
__STATIC_INLINE void PIN_INTERRUPT_Enable(const PIN_INTERRUPT_t *const handle)
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b082      	sub	sp, #8
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("PIN_INTERRUPT_Enable: Handler null pointer", handle != NULL);
  NVIC_EnableIRQ(handle->IRQn);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	7f1b      	ldrb	r3, [r3, #28]
 8004cb4:	b25b      	sxtb	r3, r3
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	f7ff ffa6 	bl	8004c08 <__NVIC_EnableIRQ>
}
 8004cbc:	3708      	adds	r7, #8
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	bd80      	pop	{r7, pc}
 8004cc2:	bf00      	nop

08004cc4 <PIN_INTERRUPT_Disable>:
 *
 *  }
 * @endcode<BR> </p>
 */
__STATIC_INLINE void PIN_INTERRUPT_Disable(const PIN_INTERRUPT_t *const handle)
{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	b082      	sub	sp, #8
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("PIN_INTERRUPT_Disable: Handler null pointer", handle != NULL);
  NVIC_DisableIRQ(handle->IRQn);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	7f1b      	ldrb	r3, [r3, #28]
 8004cd0:	b25b      	sxtb	r3, r3
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	f7ff ffb4 	bl	8004c40 <__NVIC_DisableIRQ>
}
 8004cd8:	3708      	adds	r7, #8
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	bd80      	pop	{r7, pc}
 8004cde:	bf00      	nop

08004ce0 <DIGITAL_IO_ToggleOutput>:
* }
*  @endcode
*/

__STATIC_INLINE void DIGITAL_IO_ToggleOutput(const DIGITAL_IO_t *const handler)
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b082      	sub	sp, #8
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_ToggleOutput: handler null pointer", handler != NULL);
  XMC_GPIO_ToggleOutput(handler->gpio_port, handler->gpio_pin);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681a      	ldr	r2, [r3, #0]
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	7c1b      	ldrb	r3, [r3, #16]
 8004cf0:	4610      	mov	r0, r2
 8004cf2:	4619      	mov	r1, r3
 8004cf4:	f7ff ffc6 	bl	8004c84 <XMC_GPIO_ToggleOutput>
}
 8004cf8:	3708      	adds	r7, #8
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	bd80      	pop	{r7, pc}
 8004cfe:	bf00      	nop

08004d00 <XMC_USIC_CH_RXFIFO_IsEmpty>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_Flush(), XMC_USIC_CH_RXFIFO_PutData() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_RXFIFO_IsEmpty(XMC_USIC_CH_t *const channel)
{
 8004d00:	b480      	push	{r7}
 8004d02:	b083      	sub	sp, #12
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_REMPTY_Msk);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8004d0e:	f003 0308 	and.w	r3, r3, #8
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	bf14      	ite	ne
 8004d16:	2301      	movne	r3, #1
 8004d18:	2300      	moveq	r3, #0
 8004d1a:	b2db      	uxtb	r3, r3
}
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	370c      	adds	r7, #12
 8004d20:	46bd      	mov	sp, r7
 8004d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d26:	4770      	bx	lr

08004d28 <UART_GetReceivedWord>:
 *  }
 * @endcode
 *
 */
__STATIC_INLINE uint8_t UART_GetReceivedWord(const UART_t* const handle)
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b082      	sub	sp, #8
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("UART APP handle invalid", (handle != NULL));
  return (uint8_t)XMC_UART_CH_GetReceivedData(handle->channel);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	4618      	mov	r0, r3
 8004d36:	f7fd f8af 	bl	8001e98 <XMC_UART_CH_GetReceivedData>
 8004d3a:	4603      	mov	r3, r0
 8004d3c:	b2db      	uxtb	r3, r3
}
 8004d3e:	4618      	mov	r0, r3
 8004d40:	3708      	adds	r7, #8
 8004d42:	46bd      	mov	sp, r7
 8004d44:	bd80      	pop	{r7, pc}
 8004d46:	bf00      	nop

08004d48 <UART_IsRXFIFOEmpty>:
 *   }
 * }
 * @endcode
 */
__STATIC_INLINE bool UART_IsRXFIFOEmpty(const UART_t* const handle)
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b082      	sub	sp, #8
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("UART APP handle invalid", (handle != NULL));
  return XMC_USIC_CH_RXFIFO_IsEmpty(handle->channel);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	4618      	mov	r0, r3
 8004d56:	f7ff ffd3 	bl	8004d00 <XMC_USIC_CH_RXFIFO_IsEmpty>
 8004d5a:	4603      	mov	r3, r0
}
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	3708      	adds	r7, #8
 8004d60:	46bd      	mov	sp, r7
 8004d62:	bd80      	pop	{r7, pc}

08004d64 <main>:
#include "interrupt.h"

extern I2C_MASTER_t I2C_MASTER_0; // Declaração do I2C_0
time_struct_t runTime = {0};

int main(void){
 8004d64:	b5b0      	push	{r4, r5, r7, lr}
 8004d66:	b092      	sub	sp, #72	; 0x48
 8004d68:	af00      	add	r7, sp, #0
	DAVE_STATUS_t dave_status;
	dave_status = DAVE_Init();           /* Initialization of DAVE APPs  */
 8004d6a:	f7ff fccd 	bl	8004708 <DAVE_Init>
 8004d6e:	4603      	mov	r3, r0
 8004d70:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
	bool ath10read = false;
 8004d74:	2300      	movs	r3, #0
 8004d76:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	static alinea_enum_t alinea = a;
	static alineaB_enum_t alineaB = l;

	//unsigned short int modeTime = 10;    // Duração de cada modo

	if (dave_status != DAVE_STATUS_SUCCESS){
 8004d7a:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d000      	beq.n	8004d84 <main+0x20>
		/* Placeholder for error handler code. The while loop below can be replaced with an user error handler. */
		XMC_DEBUG("DAVE APPs initialization failed\n");
		while(1U){}
 8004d82:	e7fe      	b.n	8004d82 <main+0x1e>
	}

	while(1U){  //Application loop
		//Tarefa C
		if(runTime.millis % 100 > 90 && ath10read == false){
 8004d84:	4b99      	ldr	r3, [pc, #612]	; (8004fec <main+0x288>)
 8004d86:	681a      	ldr	r2, [r3, #0]
 8004d88:	4b99      	ldr	r3, [pc, #612]	; (8004ff0 <main+0x28c>)
 8004d8a:	fba3 1302 	umull	r1, r3, r3, r2
 8004d8e:	095b      	lsrs	r3, r3, #5
 8004d90:	2164      	movs	r1, #100	; 0x64
 8004d92:	fb01 f303 	mul.w	r3, r1, r3
 8004d96:	1ad3      	subs	r3, r2, r3
 8004d98:	2b5a      	cmp	r3, #90	; 0x5a
 8004d9a:	d90e      	bls.n	8004dba <main+0x56>
 8004d9c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004da0:	f083 0301 	eor.w	r3, r3, #1
 8004da4:	b2db      	uxtb	r3, r3
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d007      	beq.n	8004dba <main+0x56>
			updateTempAndHumidity(&temperature, &humidity);
 8004daa:	4892      	ldr	r0, [pc, #584]	; (8004ff4 <main+0x290>)
 8004dac:	4992      	ldr	r1, [pc, #584]	; (8004ff8 <main+0x294>)
 8004dae:	f7ff fe7b 	bl	8004aa8 <updateTempAndHumidity>
			ath10read = true;
 8004db2:	2301      	movs	r3, #1
 8004db4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8004db8:	e002      	b.n	8004dc0 <main+0x5c>
		}else{
			ath10read = false;
 8004dba:	2300      	movs	r3, #0
 8004dbc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		}


		//Parte A
		if (!UART_IsRXFIFOEmpty(&UART_0)) {
 8004dc0:	488e      	ldr	r0, [pc, #568]	; (8004ffc <main+0x298>)
 8004dc2:	f7ff ffc1 	bl	8004d48 <UART_IsRXFIFOEmpty>
 8004dc6:	4603      	mov	r3, r0
 8004dc8:	f083 0301 	eor.w	r3, r3, #1
 8004dcc:	b2db      	uxtb	r3, r3
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	f000 80b0 	beq.w	8004f34 <main+0x1d0>
			// Recebe o dado da FIFO de recebimento da UART
			receivedData = UART_GetReceivedWord(&UART_0);
 8004dd4:	4889      	ldr	r0, [pc, #548]	; (8004ffc <main+0x298>)
 8004dd6:	f7ff ffa7 	bl	8004d28 <UART_GetReceivedWord>
 8004dda:	4603      	mov	r3, r0
 8004ddc:	461a      	mov	r2, r3
 8004dde:	4b88      	ldr	r3, [pc, #544]	; (8005000 <main+0x29c>)
 8004de0:	701a      	strb	r2, [r3, #0]

			// Verifica o comando recebido
			switch (receivedData) {
 8004de2:	4b87      	ldr	r3, [pc, #540]	; (8005000 <main+0x29c>)
 8004de4:	781b      	ldrb	r3, [r3, #0]
 8004de6:	3b01      	subs	r3, #1
 8004de8:	2b06      	cmp	r3, #6
 8004dea:	f200 8099 	bhi.w	8004f20 <main+0x1bc>
 8004dee:	a201      	add	r2, pc, #4	; (adr r2, 8004df4 <main+0x90>)
 8004df0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004df4:	08004e11 	.word	0x08004e11
 8004df8:	08004e2b 	.word	0x08004e2b
 8004dfc:	08004e45 	.word	0x08004e45
 8004e00:	08004e5f 	.word	0x08004e5f
 8004e04:	08004e79 	.word	0x08004e79
 8004e08:	08004e93 	.word	0x08004e93
 8004e0c:	08004edd 	.word	0x08004edd
	       	   	   case CONFIG_MODE_A:
	       	   		   // Envia a resposta de confirmação do modo A pela UART
	                    UART_Transmit(&UART_0, (uint8_t*)confirm_mode_a, strlen(confirm_mode_a));
 8004e10:	487c      	ldr	r0, [pc, #496]	; (8005004 <main+0x2a0>)
 8004e12:	f001 fa2b 	bl	800626c <strlen>
 8004e16:	4603      	mov	r3, r0
 8004e18:	4878      	ldr	r0, [pc, #480]	; (8004ffc <main+0x298>)
 8004e1a:	497a      	ldr	r1, [pc, #488]	; (8005004 <main+0x2a0>)
 8004e1c:	461a      	mov	r2, r3
 8004e1e:	f7fd fd5b 	bl	80028d8 <UART_Transmit>
	       	   		   alinea = a;
 8004e22:	4b79      	ldr	r3, [pc, #484]	; (8005008 <main+0x2a4>)
 8004e24:	2200      	movs	r2, #0
 8004e26:	701a      	strb	r2, [r3, #0]
	       		   break;
 8004e28:	e084      	b.n	8004f34 <main+0x1d0>
	       	   	   case CONFIG_MODE_B:
	       	   		   // Envia a resposta de confirmação do modo B pela UART
	                    UART_Transmit(&UART_0, (uint8_t*)confirm_mode_b, strlen(confirm_mode_b));
 8004e2a:	4878      	ldr	r0, [pc, #480]	; (800500c <main+0x2a8>)
 8004e2c:	f001 fa1e 	bl	800626c <strlen>
 8004e30:	4603      	mov	r3, r0
 8004e32:	4872      	ldr	r0, [pc, #456]	; (8004ffc <main+0x298>)
 8004e34:	4975      	ldr	r1, [pc, #468]	; (800500c <main+0x2a8>)
 8004e36:	461a      	mov	r2, r3
 8004e38:	f7fd fd4e 	bl	80028d8 <UART_Transmit>
	       	   		   alinea = b;
 8004e3c:	4b72      	ldr	r3, [pc, #456]	; (8005008 <main+0x2a4>)
 8004e3e:	2201      	movs	r2, #1
 8004e40:	701a      	strb	r2, [r3, #0]
	       		   break;
 8004e42:	e077      	b.n	8004f34 <main+0x1d0>
	       	   	   case CONFIG_MODE_C:
	       	   		   // Envia a resposta de confirmação do modo C pela UART
	                    UART_Transmit(&UART_0, (uint8_t*)confirm_mode_c, strlen(confirm_mode_c));
 8004e44:	4872      	ldr	r0, [pc, #456]	; (8005010 <main+0x2ac>)
 8004e46:	f001 fa11 	bl	800626c <strlen>
 8004e4a:	4603      	mov	r3, r0
 8004e4c:	486b      	ldr	r0, [pc, #428]	; (8004ffc <main+0x298>)
 8004e4e:	4970      	ldr	r1, [pc, #448]	; (8005010 <main+0x2ac>)
 8004e50:	461a      	mov	r2, r3
 8004e52:	f7fd fd41 	bl	80028d8 <UART_Transmit>
	       	   		   alinea = c;
 8004e56:	4b6c      	ldr	r3, [pc, #432]	; (8005008 <main+0x2a4>)
 8004e58:	2202      	movs	r2, #2
 8004e5a:	701a      	strb	r2, [r3, #0]
	       		   break;
 8004e5c:	e06a      	b.n	8004f34 <main+0x1d0>
	       	   	   case READ_POTENTIOMETER:
	       	   		   // Envia a resposta de confirmação de leitura do potenciômetro pela UART
	                    UART_Transmit(&UART_0, (uint8_t*)confirm_read_potentiometer, strlen(confirm_read_potentiometer));
 8004e5e:	486d      	ldr	r0, [pc, #436]	; (8005014 <main+0x2b0>)
 8004e60:	f001 fa04 	bl	800626c <strlen>
 8004e64:	4603      	mov	r3, r0
 8004e66:	4865      	ldr	r0, [pc, #404]	; (8004ffc <main+0x298>)
 8004e68:	496a      	ldr	r1, [pc, #424]	; (8005014 <main+0x2b0>)
 8004e6a:	461a      	mov	r2, r3
 8004e6c:	f7fd fd34 	bl	80028d8 <UART_Transmit>
	       	   		   alineaB = p;
 8004e70:	4b69      	ldr	r3, [pc, #420]	; (8005018 <main+0x2b4>)
 8004e72:	2201      	movs	r2, #1
 8004e74:	701a      	strb	r2, [r3, #0]
	       		   break;
 8004e76:	e05d      	b.n	8004f34 <main+0x1d0>
	       	   	   case READ_LDR:
	       	   		   // Envia a resposta de confirmação de leitura do LDR pela UART
	                    UART_Transmit(&UART_0, (uint8_t*)confirm_read_ldr, strlen(confirm_read_ldr));
 8004e78:	4868      	ldr	r0, [pc, #416]	; (800501c <main+0x2b8>)
 8004e7a:	f001 f9f7 	bl	800626c <strlen>
 8004e7e:	4603      	mov	r3, r0
 8004e80:	485e      	ldr	r0, [pc, #376]	; (8004ffc <main+0x298>)
 8004e82:	4966      	ldr	r1, [pc, #408]	; (800501c <main+0x2b8>)
 8004e84:	461a      	mov	r2, r3
 8004e86:	f7fd fd27 	bl	80028d8 <UART_Transmit>
	       	   		   alineaB = l;
 8004e8a:	4b63      	ldr	r3, [pc, #396]	; (8005018 <main+0x2b4>)
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	701a      	strb	r2, [r3, #0]
	       		   break;
 8004e90:	e050      	b.n	8004f34 <main+0x1d0>
	       	   	   case READ_TEMPERATURE:
	       	   		   // Envia a resposta de confirmação de leitura do LDR pela UART
	                    UART_Transmit(&UART_0, (uint8_t*)confirm_read_temperature, strlen(confirm_read_temperature));
 8004e92:	4863      	ldr	r0, [pc, #396]	; (8005020 <main+0x2bc>)
 8004e94:	f001 f9ea 	bl	800626c <strlen>
 8004e98:	4603      	mov	r3, r0
 8004e9a:	4858      	ldr	r0, [pc, #352]	; (8004ffc <main+0x298>)
 8004e9c:	4960      	ldr	r1, [pc, #384]	; (8005020 <main+0x2bc>)
 8004e9e:	461a      	mov	r2, r3
 8004ea0:	f7fd fd1a 	bl	80028d8 <UART_Transmit>
	       	   		    char tempMessage[30];
	                    sprintf(tempMessage, "%.2f C\r\n", temperature); // Formatar resposta
 8004ea4:	4b53      	ldr	r3, [pc, #332]	; (8004ff4 <main+0x290>)
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	f000 fa37 	bl	800531c <__aeabi_f2d>
 8004eae:	4604      	mov	r4, r0
 8004eb0:	460d      	mov	r5, r1
 8004eb2:	f107 0320 	add.w	r3, r7, #32
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	495a      	ldr	r1, [pc, #360]	; (8005024 <main+0x2c0>)
 8004eba:	4622      	mov	r2, r4
 8004ebc:	462b      	mov	r3, r5
 8004ebe:	f001 f9b1 	bl	8006224 <siprintf>
	                    UART_Transmit(&UART_0, (uint8_t*)tempMessage, strlen(tempMessage));
 8004ec2:	f107 0320 	add.w	r3, r7, #32
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	f001 f9d0 	bl	800626c <strlen>
 8004ecc:	4602      	mov	r2, r0
 8004ece:	f107 0320 	add.w	r3, r7, #32
 8004ed2:	484a      	ldr	r0, [pc, #296]	; (8004ffc <main+0x298>)
 8004ed4:	4619      	mov	r1, r3
 8004ed6:	f7fd fcff 	bl	80028d8 <UART_Transmit>

	       	   	   break;
 8004eda:	e02b      	b.n	8004f34 <main+0x1d0>
	       	   	   case READ_HUMIDITY:
	       	   			// Envia a resposta de confirmação de leitura do LDR pela UART
	                    UART_Transmit(&UART_0, (uint8_t*)confirm_read_humidity, strlen(confirm_read_humidity));
 8004edc:	4852      	ldr	r0, [pc, #328]	; (8005028 <main+0x2c4>)
 8004ede:	f001 f9c5 	bl	800626c <strlen>
 8004ee2:	4603      	mov	r3, r0
 8004ee4:	4845      	ldr	r0, [pc, #276]	; (8004ffc <main+0x298>)
 8004ee6:	4950      	ldr	r1, [pc, #320]	; (8005028 <main+0x2c4>)
 8004ee8:	461a      	mov	r2, r3
 8004eea:	f7fd fcf5 	bl	80028d8 <UART_Transmit>
				        char humMessage[30];
	                    sprintf(humMessage, "%.2f %%\r\n", humidity);
 8004eee:	4b42      	ldr	r3, [pc, #264]	; (8004ff8 <main+0x294>)
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	f000 fa12 	bl	800531c <__aeabi_f2d>
 8004ef8:	4604      	mov	r4, r0
 8004efa:	460d      	mov	r5, r1
 8004efc:	463b      	mov	r3, r7
 8004efe:	4618      	mov	r0, r3
 8004f00:	494a      	ldr	r1, [pc, #296]	; (800502c <main+0x2c8>)
 8004f02:	4622      	mov	r2, r4
 8004f04:	462b      	mov	r3, r5
 8004f06:	f001 f98d 	bl	8006224 <siprintf>
	                    UART_Transmit(&UART_0, (uint8_t*)humMessage, strlen(humMessage));
 8004f0a:	463b      	mov	r3, r7
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	f001 f9ad 	bl	800626c <strlen>
 8004f12:	4602      	mov	r2, r0
 8004f14:	463b      	mov	r3, r7
 8004f16:	4839      	ldr	r0, [pc, #228]	; (8004ffc <main+0x298>)
 8004f18:	4619      	mov	r1, r3
 8004f1a:	f7fd fcdd 	bl	80028d8 <UART_Transmit>
	               break;
 8004f1e:	e009      	b.n	8004f34 <main+0x1d0>
	       	   	   default:
	       	   		   //Erro
	                    UART_Transmit(&UART_0, (uint8_t*)error, strlen(error));
 8004f20:	4843      	ldr	r0, [pc, #268]	; (8005030 <main+0x2cc>)
 8004f22:	f001 f9a3 	bl	800626c <strlen>
 8004f26:	4603      	mov	r3, r0
 8004f28:	4834      	ldr	r0, [pc, #208]	; (8004ffc <main+0x298>)
 8004f2a:	4941      	ldr	r1, [pc, #260]	; (8005030 <main+0x2cc>)
 8004f2c:	461a      	mov	r2, r3
 8004f2e:	f7fd fcd3 	bl	80028d8 <UART_Transmit>
	       		   break;
 8004f32:	bf00      	nop
	       }
	  }

	  //Tarefa B (LED Externo)
	  valor_LDR = ADC_MEASUREMENT_GetResult(&ADC_MEASUREMENT_Resultado_LDR);
 8004f34:	483f      	ldr	r0, [pc, #252]	; (8005034 <main+0x2d0>)
 8004f36:	f7ff fbcf 	bl	80046d8 <ADC_MEASUREMENT_GetResult>
 8004f3a:	4603      	mov	r3, r0
 8004f3c:	461a      	mov	r2, r3
 8004f3e:	4b3e      	ldr	r3, [pc, #248]	; (8005038 <main+0x2d4>)
 8004f40:	801a      	strh	r2, [r3, #0]
	  valor_potenciometro = ADC_MEASUREMENT_GetResult(&ADC_MEASUREMENT_Resultado_potenciometro);
 8004f42:	483e      	ldr	r0, [pc, #248]	; (800503c <main+0x2d8>)
 8004f44:	f7ff fbc8 	bl	80046d8 <ADC_MEASUREMENT_GetResult>
 8004f48:	4603      	mov	r3, r0
 8004f4a:	461a      	mov	r2, r3
 8004f4c:	4b3c      	ldr	r3, [pc, #240]	; (8005040 <main+0x2dc>)
 8004f4e:	801a      	strh	r2, [r3, #0]
	  else{
	  	alineaB = l;
	  }
	*/

	  if(alineaB == l){
 8004f50:	4b31      	ldr	r3, [pc, #196]	; (8005018 <main+0x2b4>)
 8004f52:	781b      	ldrb	r3, [r3, #0]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d104      	bne.n	8004f62 <main+0x1fe>
		  result = valor_LDR;
 8004f58:	4b37      	ldr	r3, [pc, #220]	; (8005038 <main+0x2d4>)
 8004f5a:	881a      	ldrh	r2, [r3, #0]
 8004f5c:	4b39      	ldr	r3, [pc, #228]	; (8005044 <main+0x2e0>)
 8004f5e:	801a      	strh	r2, [r3, #0]
 8004f60:	e007      	b.n	8004f72 <main+0x20e>
	  } else if(alineaB == p) {
 8004f62:	4b2d      	ldr	r3, [pc, #180]	; (8005018 <main+0x2b4>)
 8004f64:	781b      	ldrb	r3, [r3, #0]
 8004f66:	2b01      	cmp	r3, #1
 8004f68:	d103      	bne.n	8004f72 <main+0x20e>
		  result = valor_potenciometro;
 8004f6a:	4b35      	ldr	r3, [pc, #212]	; (8005040 <main+0x2dc>)
 8004f6c:	881a      	ldrh	r2, [r3, #0]
 8004f6e:	4b35      	ldr	r3, [pc, #212]	; (8005044 <main+0x2e0>)
 8004f70:	801a      	strh	r2, [r3, #0]
	  }

	  uint32_t dutyCycle = (result * (8000 - 1500)) / 4096 + 1500;
 8004f72:	4b34      	ldr	r3, [pc, #208]	; (8005044 <main+0x2e0>)
 8004f74:	881b      	ldrh	r3, [r3, #0]
 8004f76:	461a      	mov	r2, r3
 8004f78:	f641 1364 	movw	r3, #6500	; 0x1964
 8004f7c:	fb03 f302 	mul.w	r3, r3, r2
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	da01      	bge.n	8004f88 <main+0x224>
 8004f84:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8004f88:	131b      	asrs	r3, r3, #12
 8004f8a:	f203 53dc 	addw	r3, r3, #1500	; 0x5dc
 8004f8e:	643b      	str	r3, [r7, #64]	; 0x40
	  PWM_SetDutyCycle(&PWM_0, dutyCycle);
 8004f90:	482d      	ldr	r0, [pc, #180]	; (8005048 <main+0x2e4>)
 8004f92:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004f94:	f7fe f806 	bl	8002fa4 <PWM_SetDutyCycle>
		  alinea = b;
	  }else{
		  alinea = c;
	  }
	  */
	  switch(alinea){
 8004f98:	4b1b      	ldr	r3, [pc, #108]	; (8005008 <main+0x2a4>)
 8004f9a:	781b      	ldrb	r3, [r3, #0]
 8004f9c:	2b01      	cmp	r3, #1
 8004f9e:	d013      	beq.n	8004fc8 <main+0x264>
 8004fa0:	2b02      	cmp	r3, #2
 8004fa2:	d019      	beq.n	8004fd8 <main+0x274>
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d000      	beq.n	8004faa <main+0x246>
		  //timer_status = TIMER_Stop(&TIMER_0);
		  PIN_INTERRUPT_Enable(&PIN_INTERRUPT_0);
		  PIN_INTERRUPT_SetEdgeSensitivity(&PIN_INTERRUPT_0, PIN_INTERRUPT_EDGE_FALLING);
		  break;
	  default:
		  break;
 8004fa8:	e01e      	b.n	8004fe8 <main+0x284>
		  alinea = c;
	  }
	  */
	  switch(alinea){
	  case a:
		  PIN_INTERRUPT_Disable(&PIN_INTERRUPT_0);
 8004faa:	4828      	ldr	r0, [pc, #160]	; (800504c <main+0x2e8>)
 8004fac:	f7ff fe8a 	bl	8004cc4 <PIN_INTERRUPT_Disable>
		  //timer_status = TIMER_Start(&TIMER_0);
		  if(runTime.seconds % 2 == 0)
 8004fb0:	4b0e      	ldr	r3, [pc, #56]	; (8004fec <main+0x288>)
 8004fb2:	889b      	ldrh	r3, [r3, #4]
 8004fb4:	f003 0301 	and.w	r3, r3, #1
 8004fb8:	b29b      	uxth	r3, r3
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d103      	bne.n	8004fc6 <main+0x262>
			  DIGITAL_IO_ToggleOutput(&DIGITAL_IO_0);
 8004fbe:	4824      	ldr	r0, [pc, #144]	; (8005050 <main+0x2ec>)
 8004fc0:	f7ff fe8e 	bl	8004ce0 <DIGITAL_IO_ToggleOutput>
		  break;
 8004fc4:	e010      	b.n	8004fe8 <main+0x284>
 8004fc6:	e00f      	b.n	8004fe8 <main+0x284>
	  case b:
		  //timer_status = TIMER_Stop(&TIMER_0);
		  PIN_INTERRUPT_Enable(&PIN_INTERRUPT_0);
 8004fc8:	4820      	ldr	r0, [pc, #128]	; (800504c <main+0x2e8>)
 8004fca:	f7ff fe6d 	bl	8004ca8 <PIN_INTERRUPT_Enable>
		  PIN_INTERRUPT_SetEdgeSensitivity(&PIN_INTERRUPT_0, PIN_INTERRUPT_EDGE_RISING);
 8004fce:	481f      	ldr	r0, [pc, #124]	; (800504c <main+0x2e8>)
 8004fd0:	2101      	movs	r1, #1
 8004fd2:	f7fe f8f3 	bl	80031bc <PIN_INTERRUPT_SetEdgeSensitivity>
		  break;
 8004fd6:	e007      	b.n	8004fe8 <main+0x284>
	  case c:
		  //timer_status = TIMER_Stop(&TIMER_0);
		  PIN_INTERRUPT_Enable(&PIN_INTERRUPT_0);
 8004fd8:	481c      	ldr	r0, [pc, #112]	; (800504c <main+0x2e8>)
 8004fda:	f7ff fe65 	bl	8004ca8 <PIN_INTERRUPT_Enable>
		  PIN_INTERRUPT_SetEdgeSensitivity(&PIN_INTERRUPT_0, PIN_INTERRUPT_EDGE_FALLING);
 8004fde:	481b      	ldr	r0, [pc, #108]	; (800504c <main+0x2e8>)
 8004fe0:	2102      	movs	r1, #2
 8004fe2:	f7fe f8eb 	bl	80031bc <PIN_INTERRUPT_SetEdgeSensitivity>
		  break;
 8004fe6:	bf00      	nop
	  default:
		  break;
	  }
  }
 8004fe8:	e6cc      	b.n	8004d84 <main+0x20>
 8004fea:	bf00      	nop
 8004fec:	1fffcb08 	.word	0x1fffcb08
 8004ff0:	51eb851f 	.word	0x51eb851f
 8004ff4:	1fffcb24 	.word	0x1fffcb24
 8004ff8:	1fffcb28 	.word	0x1fffcb28
 8004ffc:	1fffc800 	.word	0x1fffc800
 8005000:	1fffcb30 	.word	0x1fffcb30
 8005004:	1fffc984 	.word	0x1fffc984
 8005008:	1fffcb14 	.word	0x1fffcb14
 800500c:	1fffc998 	.word	0x1fffc998
 8005010:	1fffc9ac 	.word	0x1fffc9ac
 8005014:	1fffc9c0 	.word	0x1fffc9c0
 8005018:	1fffcb15 	.word	0x1fffcb15
 800501c:	1fffc9d4 	.word	0x1fffc9d4
 8005020:	1fffc9e0 	.word	0x1fffc9e0
 8005024:	08007d98 	.word	0x08007d98
 8005028:	1fffc9f0 	.word	0x1fffc9f0
 800502c:	08007da4 	.word	0x08007da4
 8005030:	1fffc9fc 	.word	0x1fffc9fc
 8005034:	1fffc928 	.word	0x1fffc928
 8005038:	1fffcb20 	.word	0x1fffcb20
 800503c:	1fffc94c 	.word	0x1fffc94c
 8005040:	1fffcb2e 	.word	0x1fffcb2e
 8005044:	1fffcb2c 	.word	0x1fffcb2c
 8005048:	1fffc83c 	.word	0x1fffc83c
 800504c:	08007b88 	.word	0x08007b88
 8005050:	08007c44 	.word	0x08007c44

08005054 <__aeabi_drsub>:
 8005054:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8005058:	e002      	b.n	8005060 <__adddf3>
 800505a:	bf00      	nop

0800505c <__aeabi_dsub>:
 800505c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08005060 <__adddf3>:
 8005060:	b530      	push	{r4, r5, lr}
 8005062:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8005066:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800506a:	ea94 0f05 	teq	r4, r5
 800506e:	bf08      	it	eq
 8005070:	ea90 0f02 	teqeq	r0, r2
 8005074:	bf1f      	itttt	ne
 8005076:	ea54 0c00 	orrsne.w	ip, r4, r0
 800507a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800507e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8005082:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8005086:	f000 80e2 	beq.w	800524e <__adddf3+0x1ee>
 800508a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800508e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8005092:	bfb8      	it	lt
 8005094:	426d      	neglt	r5, r5
 8005096:	dd0c      	ble.n	80050b2 <__adddf3+0x52>
 8005098:	442c      	add	r4, r5
 800509a:	ea80 0202 	eor.w	r2, r0, r2
 800509e:	ea81 0303 	eor.w	r3, r1, r3
 80050a2:	ea82 0000 	eor.w	r0, r2, r0
 80050a6:	ea83 0101 	eor.w	r1, r3, r1
 80050aa:	ea80 0202 	eor.w	r2, r0, r2
 80050ae:	ea81 0303 	eor.w	r3, r1, r3
 80050b2:	2d36      	cmp	r5, #54	; 0x36
 80050b4:	bf88      	it	hi
 80050b6:	bd30      	pophi	{r4, r5, pc}
 80050b8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80050bc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80050c0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80050c4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80050c8:	d002      	beq.n	80050d0 <__adddf3+0x70>
 80050ca:	4240      	negs	r0, r0
 80050cc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80050d0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80050d4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80050d8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80050dc:	d002      	beq.n	80050e4 <__adddf3+0x84>
 80050de:	4252      	negs	r2, r2
 80050e0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80050e4:	ea94 0f05 	teq	r4, r5
 80050e8:	f000 80a7 	beq.w	800523a <__adddf3+0x1da>
 80050ec:	f1a4 0401 	sub.w	r4, r4, #1
 80050f0:	f1d5 0e20 	rsbs	lr, r5, #32
 80050f4:	db0d      	blt.n	8005112 <__adddf3+0xb2>
 80050f6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80050fa:	fa22 f205 	lsr.w	r2, r2, r5
 80050fe:	1880      	adds	r0, r0, r2
 8005100:	f141 0100 	adc.w	r1, r1, #0
 8005104:	fa03 f20e 	lsl.w	r2, r3, lr
 8005108:	1880      	adds	r0, r0, r2
 800510a:	fa43 f305 	asr.w	r3, r3, r5
 800510e:	4159      	adcs	r1, r3
 8005110:	e00e      	b.n	8005130 <__adddf3+0xd0>
 8005112:	f1a5 0520 	sub.w	r5, r5, #32
 8005116:	f10e 0e20 	add.w	lr, lr, #32
 800511a:	2a01      	cmp	r2, #1
 800511c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8005120:	bf28      	it	cs
 8005122:	f04c 0c02 	orrcs.w	ip, ip, #2
 8005126:	fa43 f305 	asr.w	r3, r3, r5
 800512a:	18c0      	adds	r0, r0, r3
 800512c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8005130:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8005134:	d507      	bpl.n	8005146 <__adddf3+0xe6>
 8005136:	f04f 0e00 	mov.w	lr, #0
 800513a:	f1dc 0c00 	rsbs	ip, ip, #0
 800513e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8005142:	eb6e 0101 	sbc.w	r1, lr, r1
 8005146:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800514a:	d31b      	bcc.n	8005184 <__adddf3+0x124>
 800514c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8005150:	d30c      	bcc.n	800516c <__adddf3+0x10c>
 8005152:	0849      	lsrs	r1, r1, #1
 8005154:	ea5f 0030 	movs.w	r0, r0, rrx
 8005158:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800515c:	f104 0401 	add.w	r4, r4, #1
 8005160:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8005164:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8005168:	f080 809a 	bcs.w	80052a0 <__adddf3+0x240>
 800516c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8005170:	bf08      	it	eq
 8005172:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8005176:	f150 0000 	adcs.w	r0, r0, #0
 800517a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800517e:	ea41 0105 	orr.w	r1, r1, r5
 8005182:	bd30      	pop	{r4, r5, pc}
 8005184:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8005188:	4140      	adcs	r0, r0
 800518a:	eb41 0101 	adc.w	r1, r1, r1
 800518e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8005192:	f1a4 0401 	sub.w	r4, r4, #1
 8005196:	d1e9      	bne.n	800516c <__adddf3+0x10c>
 8005198:	f091 0f00 	teq	r1, #0
 800519c:	bf04      	itt	eq
 800519e:	4601      	moveq	r1, r0
 80051a0:	2000      	moveq	r0, #0
 80051a2:	fab1 f381 	clz	r3, r1
 80051a6:	bf08      	it	eq
 80051a8:	3320      	addeq	r3, #32
 80051aa:	f1a3 030b 	sub.w	r3, r3, #11
 80051ae:	f1b3 0220 	subs.w	r2, r3, #32
 80051b2:	da0c      	bge.n	80051ce <__adddf3+0x16e>
 80051b4:	320c      	adds	r2, #12
 80051b6:	dd08      	ble.n	80051ca <__adddf3+0x16a>
 80051b8:	f102 0c14 	add.w	ip, r2, #20
 80051bc:	f1c2 020c 	rsb	r2, r2, #12
 80051c0:	fa01 f00c 	lsl.w	r0, r1, ip
 80051c4:	fa21 f102 	lsr.w	r1, r1, r2
 80051c8:	e00c      	b.n	80051e4 <__adddf3+0x184>
 80051ca:	f102 0214 	add.w	r2, r2, #20
 80051ce:	bfd8      	it	le
 80051d0:	f1c2 0c20 	rsble	ip, r2, #32
 80051d4:	fa01 f102 	lsl.w	r1, r1, r2
 80051d8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80051dc:	bfdc      	itt	le
 80051de:	ea41 010c 	orrle.w	r1, r1, ip
 80051e2:	4090      	lslle	r0, r2
 80051e4:	1ae4      	subs	r4, r4, r3
 80051e6:	bfa2      	ittt	ge
 80051e8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80051ec:	4329      	orrge	r1, r5
 80051ee:	bd30      	popge	{r4, r5, pc}
 80051f0:	ea6f 0404 	mvn.w	r4, r4
 80051f4:	3c1f      	subs	r4, #31
 80051f6:	da1c      	bge.n	8005232 <__adddf3+0x1d2>
 80051f8:	340c      	adds	r4, #12
 80051fa:	dc0e      	bgt.n	800521a <__adddf3+0x1ba>
 80051fc:	f104 0414 	add.w	r4, r4, #20
 8005200:	f1c4 0220 	rsb	r2, r4, #32
 8005204:	fa20 f004 	lsr.w	r0, r0, r4
 8005208:	fa01 f302 	lsl.w	r3, r1, r2
 800520c:	ea40 0003 	orr.w	r0, r0, r3
 8005210:	fa21 f304 	lsr.w	r3, r1, r4
 8005214:	ea45 0103 	orr.w	r1, r5, r3
 8005218:	bd30      	pop	{r4, r5, pc}
 800521a:	f1c4 040c 	rsb	r4, r4, #12
 800521e:	f1c4 0220 	rsb	r2, r4, #32
 8005222:	fa20 f002 	lsr.w	r0, r0, r2
 8005226:	fa01 f304 	lsl.w	r3, r1, r4
 800522a:	ea40 0003 	orr.w	r0, r0, r3
 800522e:	4629      	mov	r1, r5
 8005230:	bd30      	pop	{r4, r5, pc}
 8005232:	fa21 f004 	lsr.w	r0, r1, r4
 8005236:	4629      	mov	r1, r5
 8005238:	bd30      	pop	{r4, r5, pc}
 800523a:	f094 0f00 	teq	r4, #0
 800523e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8005242:	bf06      	itte	eq
 8005244:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8005248:	3401      	addeq	r4, #1
 800524a:	3d01      	subne	r5, #1
 800524c:	e74e      	b.n	80050ec <__adddf3+0x8c>
 800524e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8005252:	bf18      	it	ne
 8005254:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8005258:	d029      	beq.n	80052ae <__adddf3+0x24e>
 800525a:	ea94 0f05 	teq	r4, r5
 800525e:	bf08      	it	eq
 8005260:	ea90 0f02 	teqeq	r0, r2
 8005264:	d005      	beq.n	8005272 <__adddf3+0x212>
 8005266:	ea54 0c00 	orrs.w	ip, r4, r0
 800526a:	bf04      	itt	eq
 800526c:	4619      	moveq	r1, r3
 800526e:	4610      	moveq	r0, r2
 8005270:	bd30      	pop	{r4, r5, pc}
 8005272:	ea91 0f03 	teq	r1, r3
 8005276:	bf1e      	ittt	ne
 8005278:	2100      	movne	r1, #0
 800527a:	2000      	movne	r0, #0
 800527c:	bd30      	popne	{r4, r5, pc}
 800527e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8005282:	d105      	bne.n	8005290 <__adddf3+0x230>
 8005284:	0040      	lsls	r0, r0, #1
 8005286:	4149      	adcs	r1, r1
 8005288:	bf28      	it	cs
 800528a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800528e:	bd30      	pop	{r4, r5, pc}
 8005290:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8005294:	bf3c      	itt	cc
 8005296:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800529a:	bd30      	popcc	{r4, r5, pc}
 800529c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80052a0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80052a4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80052a8:	f04f 0000 	mov.w	r0, #0
 80052ac:	bd30      	pop	{r4, r5, pc}
 80052ae:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80052b2:	bf1a      	itte	ne
 80052b4:	4619      	movne	r1, r3
 80052b6:	4610      	movne	r0, r2
 80052b8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80052bc:	bf1c      	itt	ne
 80052be:	460b      	movne	r3, r1
 80052c0:	4602      	movne	r2, r0
 80052c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80052c6:	bf06      	itte	eq
 80052c8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80052cc:	ea91 0f03 	teqeq	r1, r3
 80052d0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80052d4:	bd30      	pop	{r4, r5, pc}
 80052d6:	bf00      	nop

080052d8 <__aeabi_ui2d>:
 80052d8:	f090 0f00 	teq	r0, #0
 80052dc:	bf04      	itt	eq
 80052de:	2100      	moveq	r1, #0
 80052e0:	4770      	bxeq	lr
 80052e2:	b530      	push	{r4, r5, lr}
 80052e4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80052e8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80052ec:	f04f 0500 	mov.w	r5, #0
 80052f0:	f04f 0100 	mov.w	r1, #0
 80052f4:	e750      	b.n	8005198 <__adddf3+0x138>
 80052f6:	bf00      	nop

080052f8 <__aeabi_i2d>:
 80052f8:	f090 0f00 	teq	r0, #0
 80052fc:	bf04      	itt	eq
 80052fe:	2100      	moveq	r1, #0
 8005300:	4770      	bxeq	lr
 8005302:	b530      	push	{r4, r5, lr}
 8005304:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8005308:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800530c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8005310:	bf48      	it	mi
 8005312:	4240      	negmi	r0, r0
 8005314:	f04f 0100 	mov.w	r1, #0
 8005318:	e73e      	b.n	8005198 <__adddf3+0x138>
 800531a:	bf00      	nop

0800531c <__aeabi_f2d>:
 800531c:	0042      	lsls	r2, r0, #1
 800531e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8005322:	ea4f 0131 	mov.w	r1, r1, rrx
 8005326:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800532a:	bf1f      	itttt	ne
 800532c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8005330:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8005334:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8005338:	4770      	bxne	lr
 800533a:	f092 0f00 	teq	r2, #0
 800533e:	bf14      	ite	ne
 8005340:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8005344:	4770      	bxeq	lr
 8005346:	b530      	push	{r4, r5, lr}
 8005348:	f44f 7460 	mov.w	r4, #896	; 0x380
 800534c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8005350:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8005354:	e720      	b.n	8005198 <__adddf3+0x138>
 8005356:	bf00      	nop

08005358 <__aeabi_ul2d>:
 8005358:	ea50 0201 	orrs.w	r2, r0, r1
 800535c:	bf08      	it	eq
 800535e:	4770      	bxeq	lr
 8005360:	b530      	push	{r4, r5, lr}
 8005362:	f04f 0500 	mov.w	r5, #0
 8005366:	e00a      	b.n	800537e <__aeabi_l2d+0x16>

08005368 <__aeabi_l2d>:
 8005368:	ea50 0201 	orrs.w	r2, r0, r1
 800536c:	bf08      	it	eq
 800536e:	4770      	bxeq	lr
 8005370:	b530      	push	{r4, r5, lr}
 8005372:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8005376:	d502      	bpl.n	800537e <__aeabi_l2d+0x16>
 8005378:	4240      	negs	r0, r0
 800537a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800537e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8005382:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8005386:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800538a:	f43f aedc 	beq.w	8005146 <__adddf3+0xe6>
 800538e:	f04f 0203 	mov.w	r2, #3
 8005392:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8005396:	bf18      	it	ne
 8005398:	3203      	addne	r2, #3
 800539a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800539e:	bf18      	it	ne
 80053a0:	3203      	addne	r2, #3
 80053a2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80053a6:	f1c2 0320 	rsb	r3, r2, #32
 80053aa:	fa00 fc03 	lsl.w	ip, r0, r3
 80053ae:	fa20 f002 	lsr.w	r0, r0, r2
 80053b2:	fa01 fe03 	lsl.w	lr, r1, r3
 80053b6:	ea40 000e 	orr.w	r0, r0, lr
 80053ba:	fa21 f102 	lsr.w	r1, r1, r2
 80053be:	4414      	add	r4, r2
 80053c0:	e6c1      	b.n	8005146 <__adddf3+0xe6>
 80053c2:	bf00      	nop

080053c4 <__aeabi_dmul>:
 80053c4:	b570      	push	{r4, r5, r6, lr}
 80053c6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80053ca:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80053ce:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80053d2:	bf1d      	ittte	ne
 80053d4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80053d8:	ea94 0f0c 	teqne	r4, ip
 80053dc:	ea95 0f0c 	teqne	r5, ip
 80053e0:	f000 f8de 	bleq	80055a0 <__aeabi_dmul+0x1dc>
 80053e4:	442c      	add	r4, r5
 80053e6:	ea81 0603 	eor.w	r6, r1, r3
 80053ea:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80053ee:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80053f2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80053f6:	bf18      	it	ne
 80053f8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80053fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8005400:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005404:	d038      	beq.n	8005478 <__aeabi_dmul+0xb4>
 8005406:	fba0 ce02 	umull	ip, lr, r0, r2
 800540a:	f04f 0500 	mov.w	r5, #0
 800540e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8005412:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8005416:	fbe0 e503 	umlal	lr, r5, r0, r3
 800541a:	f04f 0600 	mov.w	r6, #0
 800541e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8005422:	f09c 0f00 	teq	ip, #0
 8005426:	bf18      	it	ne
 8005428:	f04e 0e01 	orrne.w	lr, lr, #1
 800542c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8005430:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8005434:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8005438:	d204      	bcs.n	8005444 <__aeabi_dmul+0x80>
 800543a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800543e:	416d      	adcs	r5, r5
 8005440:	eb46 0606 	adc.w	r6, r6, r6
 8005444:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8005448:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800544c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8005450:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8005454:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8005458:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800545c:	bf88      	it	hi
 800545e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8005462:	d81e      	bhi.n	80054a2 <__aeabi_dmul+0xde>
 8005464:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8005468:	bf08      	it	eq
 800546a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800546e:	f150 0000 	adcs.w	r0, r0, #0
 8005472:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8005476:	bd70      	pop	{r4, r5, r6, pc}
 8005478:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800547c:	ea46 0101 	orr.w	r1, r6, r1
 8005480:	ea40 0002 	orr.w	r0, r0, r2
 8005484:	ea81 0103 	eor.w	r1, r1, r3
 8005488:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800548c:	bfc2      	ittt	gt
 800548e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8005492:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8005496:	bd70      	popgt	{r4, r5, r6, pc}
 8005498:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800549c:	f04f 0e00 	mov.w	lr, #0
 80054a0:	3c01      	subs	r4, #1
 80054a2:	f300 80ab 	bgt.w	80055fc <__aeabi_dmul+0x238>
 80054a6:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80054aa:	bfde      	ittt	le
 80054ac:	2000      	movle	r0, #0
 80054ae:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80054b2:	bd70      	pople	{r4, r5, r6, pc}
 80054b4:	f1c4 0400 	rsb	r4, r4, #0
 80054b8:	3c20      	subs	r4, #32
 80054ba:	da35      	bge.n	8005528 <__aeabi_dmul+0x164>
 80054bc:	340c      	adds	r4, #12
 80054be:	dc1b      	bgt.n	80054f8 <__aeabi_dmul+0x134>
 80054c0:	f104 0414 	add.w	r4, r4, #20
 80054c4:	f1c4 0520 	rsb	r5, r4, #32
 80054c8:	fa00 f305 	lsl.w	r3, r0, r5
 80054cc:	fa20 f004 	lsr.w	r0, r0, r4
 80054d0:	fa01 f205 	lsl.w	r2, r1, r5
 80054d4:	ea40 0002 	orr.w	r0, r0, r2
 80054d8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80054dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80054e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80054e4:	fa21 f604 	lsr.w	r6, r1, r4
 80054e8:	eb42 0106 	adc.w	r1, r2, r6
 80054ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80054f0:	bf08      	it	eq
 80054f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80054f6:	bd70      	pop	{r4, r5, r6, pc}
 80054f8:	f1c4 040c 	rsb	r4, r4, #12
 80054fc:	f1c4 0520 	rsb	r5, r4, #32
 8005500:	fa00 f304 	lsl.w	r3, r0, r4
 8005504:	fa20 f005 	lsr.w	r0, r0, r5
 8005508:	fa01 f204 	lsl.w	r2, r1, r4
 800550c:	ea40 0002 	orr.w	r0, r0, r2
 8005510:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8005514:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8005518:	f141 0100 	adc.w	r1, r1, #0
 800551c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8005520:	bf08      	it	eq
 8005522:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8005526:	bd70      	pop	{r4, r5, r6, pc}
 8005528:	f1c4 0520 	rsb	r5, r4, #32
 800552c:	fa00 f205 	lsl.w	r2, r0, r5
 8005530:	ea4e 0e02 	orr.w	lr, lr, r2
 8005534:	fa20 f304 	lsr.w	r3, r0, r4
 8005538:	fa01 f205 	lsl.w	r2, r1, r5
 800553c:	ea43 0302 	orr.w	r3, r3, r2
 8005540:	fa21 f004 	lsr.w	r0, r1, r4
 8005544:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8005548:	fa21 f204 	lsr.w	r2, r1, r4
 800554c:	ea20 0002 	bic.w	r0, r0, r2
 8005550:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8005554:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8005558:	bf08      	it	eq
 800555a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800555e:	bd70      	pop	{r4, r5, r6, pc}
 8005560:	f094 0f00 	teq	r4, #0
 8005564:	d10f      	bne.n	8005586 <__aeabi_dmul+0x1c2>
 8005566:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800556a:	0040      	lsls	r0, r0, #1
 800556c:	eb41 0101 	adc.w	r1, r1, r1
 8005570:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8005574:	bf08      	it	eq
 8005576:	3c01      	subeq	r4, #1
 8005578:	d0f7      	beq.n	800556a <__aeabi_dmul+0x1a6>
 800557a:	ea41 0106 	orr.w	r1, r1, r6
 800557e:	f095 0f00 	teq	r5, #0
 8005582:	bf18      	it	ne
 8005584:	4770      	bxne	lr
 8005586:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800558a:	0052      	lsls	r2, r2, #1
 800558c:	eb43 0303 	adc.w	r3, r3, r3
 8005590:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8005594:	bf08      	it	eq
 8005596:	3d01      	subeq	r5, #1
 8005598:	d0f7      	beq.n	800558a <__aeabi_dmul+0x1c6>
 800559a:	ea43 0306 	orr.w	r3, r3, r6
 800559e:	4770      	bx	lr
 80055a0:	ea94 0f0c 	teq	r4, ip
 80055a4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80055a8:	bf18      	it	ne
 80055aa:	ea95 0f0c 	teqne	r5, ip
 80055ae:	d00c      	beq.n	80055ca <__aeabi_dmul+0x206>
 80055b0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80055b4:	bf18      	it	ne
 80055b6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80055ba:	d1d1      	bne.n	8005560 <__aeabi_dmul+0x19c>
 80055bc:	ea81 0103 	eor.w	r1, r1, r3
 80055c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80055c4:	f04f 0000 	mov.w	r0, #0
 80055c8:	bd70      	pop	{r4, r5, r6, pc}
 80055ca:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80055ce:	bf06      	itte	eq
 80055d0:	4610      	moveq	r0, r2
 80055d2:	4619      	moveq	r1, r3
 80055d4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80055d8:	d019      	beq.n	800560e <__aeabi_dmul+0x24a>
 80055da:	ea94 0f0c 	teq	r4, ip
 80055de:	d102      	bne.n	80055e6 <__aeabi_dmul+0x222>
 80055e0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80055e4:	d113      	bne.n	800560e <__aeabi_dmul+0x24a>
 80055e6:	ea95 0f0c 	teq	r5, ip
 80055ea:	d105      	bne.n	80055f8 <__aeabi_dmul+0x234>
 80055ec:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80055f0:	bf1c      	itt	ne
 80055f2:	4610      	movne	r0, r2
 80055f4:	4619      	movne	r1, r3
 80055f6:	d10a      	bne.n	800560e <__aeabi_dmul+0x24a>
 80055f8:	ea81 0103 	eor.w	r1, r1, r3
 80055fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8005600:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8005604:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005608:	f04f 0000 	mov.w	r0, #0
 800560c:	bd70      	pop	{r4, r5, r6, pc}
 800560e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8005612:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8005616:	bd70      	pop	{r4, r5, r6, pc}

08005618 <__aeabi_ddiv>:
 8005618:	b570      	push	{r4, r5, r6, lr}
 800561a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800561e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8005622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8005626:	bf1d      	ittte	ne
 8005628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800562c:	ea94 0f0c 	teqne	r4, ip
 8005630:	ea95 0f0c 	teqne	r5, ip
 8005634:	f000 f8a7 	bleq	8005786 <__aeabi_ddiv+0x16e>
 8005638:	eba4 0405 	sub.w	r4, r4, r5
 800563c:	ea81 0e03 	eor.w	lr, r1, r3
 8005640:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8005644:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8005648:	f000 8088 	beq.w	800575c <__aeabi_ddiv+0x144>
 800564c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8005650:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8005654:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8005658:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800565c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8005660:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8005664:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8005668:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800566c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8005670:	429d      	cmp	r5, r3
 8005672:	bf08      	it	eq
 8005674:	4296      	cmpeq	r6, r2
 8005676:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800567a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800567e:	d202      	bcs.n	8005686 <__aeabi_ddiv+0x6e>
 8005680:	085b      	lsrs	r3, r3, #1
 8005682:	ea4f 0232 	mov.w	r2, r2, rrx
 8005686:	1ab6      	subs	r6, r6, r2
 8005688:	eb65 0503 	sbc.w	r5, r5, r3
 800568c:	085b      	lsrs	r3, r3, #1
 800568e:	ea4f 0232 	mov.w	r2, r2, rrx
 8005692:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8005696:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800569a:	ebb6 0e02 	subs.w	lr, r6, r2
 800569e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80056a2:	bf22      	ittt	cs
 80056a4:	1ab6      	subcs	r6, r6, r2
 80056a6:	4675      	movcs	r5, lr
 80056a8:	ea40 000c 	orrcs.w	r0, r0, ip
 80056ac:	085b      	lsrs	r3, r3, #1
 80056ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80056b2:	ebb6 0e02 	subs.w	lr, r6, r2
 80056b6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80056ba:	bf22      	ittt	cs
 80056bc:	1ab6      	subcs	r6, r6, r2
 80056be:	4675      	movcs	r5, lr
 80056c0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80056c4:	085b      	lsrs	r3, r3, #1
 80056c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80056ca:	ebb6 0e02 	subs.w	lr, r6, r2
 80056ce:	eb75 0e03 	sbcs.w	lr, r5, r3
 80056d2:	bf22      	ittt	cs
 80056d4:	1ab6      	subcs	r6, r6, r2
 80056d6:	4675      	movcs	r5, lr
 80056d8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80056dc:	085b      	lsrs	r3, r3, #1
 80056de:	ea4f 0232 	mov.w	r2, r2, rrx
 80056e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80056e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80056ea:	bf22      	ittt	cs
 80056ec:	1ab6      	subcs	r6, r6, r2
 80056ee:	4675      	movcs	r5, lr
 80056f0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80056f4:	ea55 0e06 	orrs.w	lr, r5, r6
 80056f8:	d018      	beq.n	800572c <__aeabi_ddiv+0x114>
 80056fa:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80056fe:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8005702:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8005706:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800570a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800570e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8005712:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8005716:	d1c0      	bne.n	800569a <__aeabi_ddiv+0x82>
 8005718:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800571c:	d10b      	bne.n	8005736 <__aeabi_ddiv+0x11e>
 800571e:	ea41 0100 	orr.w	r1, r1, r0
 8005722:	f04f 0000 	mov.w	r0, #0
 8005726:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800572a:	e7b6      	b.n	800569a <__aeabi_ddiv+0x82>
 800572c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8005730:	bf04      	itt	eq
 8005732:	4301      	orreq	r1, r0
 8005734:	2000      	moveq	r0, #0
 8005736:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800573a:	bf88      	it	hi
 800573c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8005740:	f63f aeaf 	bhi.w	80054a2 <__aeabi_dmul+0xde>
 8005744:	ebb5 0c03 	subs.w	ip, r5, r3
 8005748:	bf04      	itt	eq
 800574a:	ebb6 0c02 	subseq.w	ip, r6, r2
 800574e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8005752:	f150 0000 	adcs.w	r0, r0, #0
 8005756:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800575a:	bd70      	pop	{r4, r5, r6, pc}
 800575c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8005760:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8005764:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8005768:	bfc2      	ittt	gt
 800576a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800576e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8005772:	bd70      	popgt	{r4, r5, r6, pc}
 8005774:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8005778:	f04f 0e00 	mov.w	lr, #0
 800577c:	3c01      	subs	r4, #1
 800577e:	e690      	b.n	80054a2 <__aeabi_dmul+0xde>
 8005780:	ea45 0e06 	orr.w	lr, r5, r6
 8005784:	e68d      	b.n	80054a2 <__aeabi_dmul+0xde>
 8005786:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800578a:	ea94 0f0c 	teq	r4, ip
 800578e:	bf08      	it	eq
 8005790:	ea95 0f0c 	teqeq	r5, ip
 8005794:	f43f af3b 	beq.w	800560e <__aeabi_dmul+0x24a>
 8005798:	ea94 0f0c 	teq	r4, ip
 800579c:	d10a      	bne.n	80057b4 <__aeabi_ddiv+0x19c>
 800579e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80057a2:	f47f af34 	bne.w	800560e <__aeabi_dmul+0x24a>
 80057a6:	ea95 0f0c 	teq	r5, ip
 80057aa:	f47f af25 	bne.w	80055f8 <__aeabi_dmul+0x234>
 80057ae:	4610      	mov	r0, r2
 80057b0:	4619      	mov	r1, r3
 80057b2:	e72c      	b.n	800560e <__aeabi_dmul+0x24a>
 80057b4:	ea95 0f0c 	teq	r5, ip
 80057b8:	d106      	bne.n	80057c8 <__aeabi_ddiv+0x1b0>
 80057ba:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80057be:	f43f aefd 	beq.w	80055bc <__aeabi_dmul+0x1f8>
 80057c2:	4610      	mov	r0, r2
 80057c4:	4619      	mov	r1, r3
 80057c6:	e722      	b.n	800560e <__aeabi_dmul+0x24a>
 80057c8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80057cc:	bf18      	it	ne
 80057ce:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80057d2:	f47f aec5 	bne.w	8005560 <__aeabi_dmul+0x19c>
 80057d6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80057da:	f47f af0d 	bne.w	80055f8 <__aeabi_dmul+0x234>
 80057de:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80057e2:	f47f aeeb 	bne.w	80055bc <__aeabi_dmul+0x1f8>
 80057e6:	e712      	b.n	800560e <__aeabi_dmul+0x24a>

080057e8 <__aeabi_d2f>:
 80057e8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80057ec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80057f0:	bf24      	itt	cs
 80057f2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80057f6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80057fa:	d90d      	bls.n	8005818 <__aeabi_d2f+0x30>
 80057fc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8005800:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8005804:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8005808:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 800580c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8005810:	bf08      	it	eq
 8005812:	f020 0001 	biceq.w	r0, r0, #1
 8005816:	4770      	bx	lr
 8005818:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 800581c:	d121      	bne.n	8005862 <__aeabi_d2f+0x7a>
 800581e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8005822:	bfbc      	itt	lt
 8005824:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8005828:	4770      	bxlt	lr
 800582a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800582e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8005832:	f1c2 0218 	rsb	r2, r2, #24
 8005836:	f1c2 0c20 	rsb	ip, r2, #32
 800583a:	fa10 f30c 	lsls.w	r3, r0, ip
 800583e:	fa20 f002 	lsr.w	r0, r0, r2
 8005842:	bf18      	it	ne
 8005844:	f040 0001 	orrne.w	r0, r0, #1
 8005848:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800584c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8005850:	fa03 fc0c 	lsl.w	ip, r3, ip
 8005854:	ea40 000c 	orr.w	r0, r0, ip
 8005858:	fa23 f302 	lsr.w	r3, r3, r2
 800585c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8005860:	e7cc      	b.n	80057fc <__aeabi_d2f+0x14>
 8005862:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8005866:	d107      	bne.n	8005878 <__aeabi_d2f+0x90>
 8005868:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 800586c:	bf1e      	ittt	ne
 800586e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8005872:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8005876:	4770      	bxne	lr
 8005878:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 800587c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8005880:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8005884:	4770      	bx	lr
 8005886:	bf00      	nop

08005888 <__errno>:
 8005888:	4b01      	ldr	r3, [pc, #4]	; (8005890 <__errno+0x8>)
 800588a:	6818      	ldr	r0, [r3, #0]
 800588c:	4770      	bx	lr
 800588e:	bf00      	nop
 8005890:	1fffca70 	.word	0x1fffca70

08005894 <__libc_init_array>:
 8005894:	b570      	push	{r4, r5, r6, lr}
 8005896:	4b0e      	ldr	r3, [pc, #56]	; (80058d0 <__libc_init_array+0x3c>)
 8005898:	4c0e      	ldr	r4, [pc, #56]	; (80058d4 <__libc_init_array+0x40>)
 800589a:	1ae4      	subs	r4, r4, r3
 800589c:	10a4      	asrs	r4, r4, #2
 800589e:	2500      	movs	r5, #0
 80058a0:	461e      	mov	r6, r3
 80058a2:	42a5      	cmp	r5, r4
 80058a4:	d004      	beq.n	80058b0 <__libc_init_array+0x1c>
 80058a6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80058aa:	4798      	blx	r3
 80058ac:	3501      	adds	r5, #1
 80058ae:	e7f8      	b.n	80058a2 <__libc_init_array+0xe>
 80058b0:	f7fc ffc4 	bl	800283c <_init>
 80058b4:	4c08      	ldr	r4, [pc, #32]	; (80058d8 <__libc_init_array+0x44>)
 80058b6:	4b09      	ldr	r3, [pc, #36]	; (80058dc <__libc_init_array+0x48>)
 80058b8:	1ae4      	subs	r4, r4, r3
 80058ba:	10a4      	asrs	r4, r4, #2
 80058bc:	2500      	movs	r5, #0
 80058be:	461e      	mov	r6, r3
 80058c0:	42a5      	cmp	r5, r4
 80058c2:	d004      	beq.n	80058ce <__libc_init_array+0x3a>
 80058c4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80058c8:	4798      	blx	r3
 80058ca:	3501      	adds	r5, #1
 80058cc:	e7f8      	b.n	80058c0 <__libc_init_array+0x2c>
 80058ce:	bd70      	pop	{r4, r5, r6, pc}
 80058d0:	1fffcaac 	.word	0x1fffcaac
 80058d4:	1fffcaac 	.word	0x1fffcaac
 80058d8:	1fffcaac 	.word	0x1fffcaac
 80058dc:	1fffcaac 	.word	0x1fffcaac

080058e0 <memcpy>:
 80058e0:	b510      	push	{r4, lr}
 80058e2:	1e43      	subs	r3, r0, #1
 80058e4:	440a      	add	r2, r1
 80058e6:	4291      	cmp	r1, r2
 80058e8:	d004      	beq.n	80058f4 <memcpy+0x14>
 80058ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 80058ee:	f803 4f01 	strb.w	r4, [r3, #1]!
 80058f2:	e7f8      	b.n	80058e6 <memcpy+0x6>
 80058f4:	bd10      	pop	{r4, pc}

080058f6 <memset>:
 80058f6:	4402      	add	r2, r0
 80058f8:	4603      	mov	r3, r0
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d002      	beq.n	8005904 <memset+0xe>
 80058fe:	f803 1b01 	strb.w	r1, [r3], #1
 8005902:	e7fa      	b.n	80058fa <memset+0x4>
 8005904:	4770      	bx	lr

08005906 <__cvt>:
 8005906:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800590a:	b088      	sub	sp, #32
 800590c:	2b00      	cmp	r3, #0
 800590e:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8005910:	9912      	ldr	r1, [sp, #72]	; 0x48
 8005912:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8005914:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8005918:	461d      	mov	r5, r3
 800591a:	bfb8      	it	lt
 800591c:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005920:	f027 0720 	bic.w	r7, r7, #32
 8005924:	bfb6      	itet	lt
 8005926:	461d      	movlt	r5, r3
 8005928:	2300      	movge	r3, #0
 800592a:	232d      	movlt	r3, #45	; 0x2d
 800592c:	4614      	mov	r4, r2
 800592e:	bfb8      	it	lt
 8005930:	4614      	movlt	r4, r2
 8005932:	2f46      	cmp	r7, #70	; 0x46
 8005934:	700b      	strb	r3, [r1, #0]
 8005936:	d003      	beq.n	8005940 <__cvt+0x3a>
 8005938:	2f45      	cmp	r7, #69	; 0x45
 800593a:	d103      	bne.n	8005944 <__cvt+0x3e>
 800593c:	3601      	adds	r6, #1
 800593e:	e001      	b.n	8005944 <__cvt+0x3e>
 8005940:	2303      	movs	r3, #3
 8005942:	e000      	b.n	8005946 <__cvt+0x40>
 8005944:	2302      	movs	r3, #2
 8005946:	e88d 0448 	stmia.w	sp, {r3, r6, sl}
 800594a:	ab06      	add	r3, sp, #24
 800594c:	9303      	str	r3, [sp, #12]
 800594e:	ab07      	add	r3, sp, #28
 8005950:	9304      	str	r3, [sp, #16]
 8005952:	4622      	mov	r2, r4
 8005954:	462b      	mov	r3, r5
 8005956:	f000 fd1f 	bl	8006398 <_dtoa_r>
 800595a:	2f47      	cmp	r7, #71	; 0x47
 800595c:	4680      	mov	r8, r0
 800595e:	d102      	bne.n	8005966 <__cvt+0x60>
 8005960:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005962:	07db      	lsls	r3, r3, #31
 8005964:	d526      	bpl.n	80059b4 <__cvt+0xae>
 8005966:	2f46      	cmp	r7, #70	; 0x46
 8005968:	eb08 0906 	add.w	r9, r8, r6
 800596c:	d111      	bne.n	8005992 <__cvt+0x8c>
 800596e:	f898 3000 	ldrb.w	r3, [r8]
 8005972:	2b30      	cmp	r3, #48	; 0x30
 8005974:	d10a      	bne.n	800598c <__cvt+0x86>
 8005976:	4620      	mov	r0, r4
 8005978:	4629      	mov	r1, r5
 800597a:	2200      	movs	r2, #0
 800597c:	2300      	movs	r3, #0
 800597e:	f002 f86f 	bl	8007a60 <__aeabi_dcmpeq>
 8005982:	b918      	cbnz	r0, 800598c <__cvt+0x86>
 8005984:	f1c6 0601 	rsb	r6, r6, #1
 8005988:	f8ca 6000 	str.w	r6, [sl]
 800598c:	f8da 3000 	ldr.w	r3, [sl]
 8005990:	4499      	add	r9, r3
 8005992:	4620      	mov	r0, r4
 8005994:	4629      	mov	r1, r5
 8005996:	2200      	movs	r2, #0
 8005998:	2300      	movs	r3, #0
 800599a:	f002 f861 	bl	8007a60 <__aeabi_dcmpeq>
 800599e:	b108      	cbz	r0, 80059a4 <__cvt+0x9e>
 80059a0:	f8cd 901c 	str.w	r9, [sp, #28]
 80059a4:	9b07      	ldr	r3, [sp, #28]
 80059a6:	454b      	cmp	r3, r9
 80059a8:	d204      	bcs.n	80059b4 <__cvt+0xae>
 80059aa:	1c5a      	adds	r2, r3, #1
 80059ac:	9207      	str	r2, [sp, #28]
 80059ae:	2230      	movs	r2, #48	; 0x30
 80059b0:	701a      	strb	r2, [r3, #0]
 80059b2:	e7f7      	b.n	80059a4 <__cvt+0x9e>
 80059b4:	9b07      	ldr	r3, [sp, #28]
 80059b6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80059b8:	ebc8 0303 	rsb	r3, r8, r3
 80059bc:	4640      	mov	r0, r8
 80059be:	6013      	str	r3, [r2, #0]
 80059c0:	b008      	add	sp, #32
 80059c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080059c6 <__exponent>:
 80059c6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80059c8:	4603      	mov	r3, r0
 80059ca:	2900      	cmp	r1, #0
 80059cc:	bfb8      	it	lt
 80059ce:	4249      	neglt	r1, r1
 80059d0:	f803 2b02 	strb.w	r2, [r3], #2
 80059d4:	bfb4      	ite	lt
 80059d6:	222d      	movlt	r2, #45	; 0x2d
 80059d8:	222b      	movge	r2, #43	; 0x2b
 80059da:	2909      	cmp	r1, #9
 80059dc:	7042      	strb	r2, [r0, #1]
 80059de:	dd19      	ble.n	8005a14 <__exponent+0x4e>
 80059e0:	f10d 0407 	add.w	r4, sp, #7
 80059e4:	4626      	mov	r6, r4
 80059e6:	220a      	movs	r2, #10
 80059e8:	fb91 f5f2 	sdiv	r5, r1, r2
 80059ec:	fb02 1115 	mls	r1, r2, r5, r1
 80059f0:	3130      	adds	r1, #48	; 0x30
 80059f2:	2d09      	cmp	r5, #9
 80059f4:	f804 1d01 	strb.w	r1, [r4, #-1]!
 80059f8:	4629      	mov	r1, r5
 80059fa:	dcf4      	bgt.n	80059e6 <__exponent+0x20>
 80059fc:	3130      	adds	r1, #48	; 0x30
 80059fe:	1e65      	subs	r5, r4, #1
 8005a00:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005a04:	42b5      	cmp	r5, r6
 8005a06:	461a      	mov	r2, r3
 8005a08:	d20a      	bcs.n	8005a20 <__exponent+0x5a>
 8005a0a:	f815 2b01 	ldrb.w	r2, [r5], #1
 8005a0e:	f803 2b01 	strb.w	r2, [r3], #1
 8005a12:	e7f7      	b.n	8005a04 <__exponent+0x3e>
 8005a14:	2430      	movs	r4, #48	; 0x30
 8005a16:	461a      	mov	r2, r3
 8005a18:	4421      	add	r1, r4
 8005a1a:	f802 4b02 	strb.w	r4, [r2], #2
 8005a1e:	7059      	strb	r1, [r3, #1]
 8005a20:	1a10      	subs	r0, r2, r0
 8005a22:	b002      	add	sp, #8
 8005a24:	bd70      	pop	{r4, r5, r6, pc}
	...

08005a28 <_printf_float>:
 8005a28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a2c:	b091      	sub	sp, #68	; 0x44
 8005a2e:	468b      	mov	fp, r1
 8005a30:	4615      	mov	r5, r2
 8005a32:	461e      	mov	r6, r3
 8005a34:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8005a36:	4604      	mov	r4, r0
 8005a38:	f001 fa72 	bl	8006f20 <_localeconv_r>
 8005a3c:	f8d0 a000 	ldr.w	sl, [r0]
 8005a40:	4650      	mov	r0, sl
 8005a42:	f000 fc13 	bl	800626c <strlen>
 8005a46:	2300      	movs	r3, #0
 8005a48:	930e      	str	r3, [sp, #56]	; 0x38
 8005a4a:	683b      	ldr	r3, [r7, #0]
 8005a4c:	9009      	str	r0, [sp, #36]	; 0x24
 8005a4e:	3307      	adds	r3, #7
 8005a50:	f023 0307 	bic.w	r3, r3, #7
 8005a54:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005a58:	f103 0208 	add.w	r2, r3, #8
 8005a5c:	f89b 8018 	ldrb.w	r8, [fp, #24]
 8005a60:	603a      	str	r2, [r7, #0]
 8005a62:	e9cb 0112 	strd	r0, r1, [fp, #72]	; 0x48
 8005a66:	f000 fbb3 	bl	80061d0 <__fpclassifyd>
 8005a6a:	2801      	cmp	r0, #1
 8005a6c:	e9db 0112 	ldrd	r0, r1, [fp, #72]	; 0x48
 8005a70:	d119      	bne.n	8005aa6 <_printf_float+0x7e>
 8005a72:	2200      	movs	r2, #0
 8005a74:	2300      	movs	r3, #0
 8005a76:	f001 fffd 	bl	8007a74 <__aeabi_dcmplt>
 8005a7a:	b110      	cbz	r0, 8005a82 <_printf_float+0x5a>
 8005a7c:	232d      	movs	r3, #45	; 0x2d
 8005a7e:	f88b 3043 	strb.w	r3, [fp, #67]	; 0x43
 8005a82:	4ba0      	ldr	r3, [pc, #640]	; (8005d04 <_printf_float+0x2dc>)
 8005a84:	4fa0      	ldr	r7, [pc, #640]	; (8005d08 <_printf_float+0x2e0>)
 8005a86:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005a8a:	bf88      	it	hi
 8005a8c:	461f      	movhi	r7, r3
 8005a8e:	2303      	movs	r3, #3
 8005a90:	f8cb 3010 	str.w	r3, [fp, #16]
 8005a94:	f8db 3000 	ldr.w	r3, [fp]
 8005a98:	f023 0304 	bic.w	r3, r3, #4
 8005a9c:	f8cb 3000 	str.w	r3, [fp]
 8005aa0:	f04f 0900 	mov.w	r9, #0
 8005aa4:	e0a1      	b.n	8005bea <_printf_float+0x1c2>
 8005aa6:	f000 fb93 	bl	80061d0 <__fpclassifyd>
 8005aaa:	f8db 3000 	ldr.w	r3, [fp]
 8005aae:	b948      	cbnz	r0, 8005ac4 <_printf_float+0x9c>
 8005ab0:	4a96      	ldr	r2, [pc, #600]	; (8005d0c <_printf_float+0x2e4>)
 8005ab2:	4f97      	ldr	r7, [pc, #604]	; (8005d10 <_printf_float+0x2e8>)
 8005ab4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005ab8:	bf88      	it	hi
 8005aba:	4617      	movhi	r7, r2
 8005abc:	2203      	movs	r2, #3
 8005abe:	f8cb 2010 	str.w	r2, [fp, #16]
 8005ac2:	e7e9      	b.n	8005a98 <_printf_float+0x70>
 8005ac4:	f8db 2004 	ldr.w	r2, [fp, #4]
 8005ac8:	ed9b 7b12 	vldr	d7, [fp, #72]	; 0x48
 8005acc:	1c57      	adds	r7, r2, #1
 8005ace:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8005ad2:	d101      	bne.n	8005ad8 <_printf_float+0xb0>
 8005ad4:	2206      	movs	r2, #6
 8005ad6:	e009      	b.n	8005aec <_printf_float+0xc4>
 8005ad8:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 8005adc:	d002      	beq.n	8005ae4 <_printf_float+0xbc>
 8005ade:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005ae2:	d105      	bne.n	8005af0 <_printf_float+0xc8>
 8005ae4:	2a00      	cmp	r2, #0
 8005ae6:	f040 81c7 	bne.w	8005e78 <_printf_float+0x450>
 8005aea:	2201      	movs	r2, #1
 8005aec:	f8cb 2004 	str.w	r2, [fp, #4]
 8005af0:	f8db 2004 	ldr.w	r2, [fp, #4]
 8005af4:	f8cd 8010 	str.w	r8, [sp, #16]
 8005af8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005afc:	e88d 000c 	stmia.w	sp, {r2, r3}
 8005b00:	f8cb 3000 	str.w	r3, [fp]
 8005b04:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 8005b08:	9302      	str	r3, [sp, #8]
 8005b0a:	ab0d      	add	r3, sp, #52	; 0x34
 8005b0c:	9303      	str	r3, [sp, #12]
 8005b0e:	ab0e      	add	r3, sp, #56	; 0x38
 8005b10:	9305      	str	r3, [sp, #20]
 8005b12:	2300      	movs	r3, #0
 8005b14:	9306      	str	r3, [sp, #24]
 8005b16:	4620      	mov	r0, r4
 8005b18:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005b1c:	f7ff fef3 	bl	8005906 <__cvt>
 8005b20:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 8005b24:	2b47      	cmp	r3, #71	; 0x47
 8005b26:	4607      	mov	r7, r0
 8005b28:	d10a      	bne.n	8005b40 <_printf_float+0x118>
 8005b2a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005b2c:	1cd8      	adds	r0, r3, #3
 8005b2e:	db03      	blt.n	8005b38 <_printf_float+0x110>
 8005b30:	f8db 2004 	ldr.w	r2, [fp, #4]
 8005b34:	4293      	cmp	r3, r2
 8005b36:	dd37      	ble.n	8005ba8 <_printf_float+0x180>
 8005b38:	f1a8 0802 	sub.w	r8, r8, #2
 8005b3c:	fa5f f888 	uxtb.w	r8, r8
 8005b40:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8005b44:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005b46:	d815      	bhi.n	8005b74 <_printf_float+0x14c>
 8005b48:	3901      	subs	r1, #1
 8005b4a:	4642      	mov	r2, r8
 8005b4c:	f10b 0050 	add.w	r0, fp, #80	; 0x50
 8005b50:	910d      	str	r1, [sp, #52]	; 0x34
 8005b52:	f7ff ff38 	bl	80059c6 <__exponent>
 8005b56:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005b58:	1883      	adds	r3, r0, r2
 8005b5a:	2a01      	cmp	r2, #1
 8005b5c:	4681      	mov	r9, r0
 8005b5e:	f8cb 3010 	str.w	r3, [fp, #16]
 8005b62:	dc03      	bgt.n	8005b6c <_printf_float+0x144>
 8005b64:	f8db 2000 	ldr.w	r2, [fp]
 8005b68:	07d1      	lsls	r1, r2, #31
 8005b6a:	d538      	bpl.n	8005bde <_printf_float+0x1b6>
 8005b6c:	3301      	adds	r3, #1
 8005b6e:	f8cb 3010 	str.w	r3, [fp, #16]
 8005b72:	e034      	b.n	8005bde <_printf_float+0x1b6>
 8005b74:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 8005b78:	d118      	bne.n	8005bac <_printf_float+0x184>
 8005b7a:	2900      	cmp	r1, #0
 8005b7c:	f8db 3004 	ldr.w	r3, [fp, #4]
 8005b80:	dd09      	ble.n	8005b96 <_printf_float+0x16e>
 8005b82:	f8cb 1010 	str.w	r1, [fp, #16]
 8005b86:	b91b      	cbnz	r3, 8005b90 <_printf_float+0x168>
 8005b88:	f8db 2000 	ldr.w	r2, [fp]
 8005b8c:	07d2      	lsls	r2, r2, #31
 8005b8e:	d521      	bpl.n	8005bd4 <_printf_float+0x1ac>
 8005b90:	3301      	adds	r3, #1
 8005b92:	440b      	add	r3, r1
 8005b94:	e01c      	b.n	8005bd0 <_printf_float+0x1a8>
 8005b96:	b91b      	cbnz	r3, 8005ba0 <_printf_float+0x178>
 8005b98:	f8db 2000 	ldr.w	r2, [fp]
 8005b9c:	07d0      	lsls	r0, r2, #31
 8005b9e:	d501      	bpl.n	8005ba4 <_printf_float+0x17c>
 8005ba0:	3302      	adds	r3, #2
 8005ba2:	e015      	b.n	8005bd0 <_printf_float+0x1a8>
 8005ba4:	2301      	movs	r3, #1
 8005ba6:	e013      	b.n	8005bd0 <_printf_float+0x1a8>
 8005ba8:	f04f 0867 	mov.w	r8, #103	; 0x67
 8005bac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005bae:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005bb0:	4293      	cmp	r3, r2
 8005bb2:	db07      	blt.n	8005bc4 <_printf_float+0x19c>
 8005bb4:	f8db 2000 	ldr.w	r2, [fp]
 8005bb8:	f8cb 3010 	str.w	r3, [fp, #16]
 8005bbc:	07d1      	lsls	r1, r2, #31
 8005bbe:	d509      	bpl.n	8005bd4 <_printf_float+0x1ac>
 8005bc0:	3301      	adds	r3, #1
 8005bc2:	e005      	b.n	8005bd0 <_printf_float+0x1a8>
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	bfd4      	ite	le
 8005bc8:	f1c3 0302 	rsble	r3, r3, #2
 8005bcc:	2301      	movgt	r3, #1
 8005bce:	4413      	add	r3, r2
 8005bd0:	f8cb 3010 	str.w	r3, [fp, #16]
 8005bd4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005bd6:	f8cb 3058 	str.w	r3, [fp, #88]	; 0x58
 8005bda:	f04f 0900 	mov.w	r9, #0
 8005bde:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8005be2:	b113      	cbz	r3, 8005bea <_printf_float+0x1c2>
 8005be4:	232d      	movs	r3, #45	; 0x2d
 8005be6:	f88b 3043 	strb.w	r3, [fp, #67]	; 0x43
 8005bea:	9600      	str	r6, [sp, #0]
 8005bec:	4620      	mov	r0, r4
 8005bee:	4659      	mov	r1, fp
 8005bf0:	aa0f      	add	r2, sp, #60	; 0x3c
 8005bf2:	462b      	mov	r3, r5
 8005bf4:	f000 f95c 	bl	8005eb0 <_printf_common>
 8005bf8:	3001      	adds	r0, #1
 8005bfa:	d102      	bne.n	8005c02 <_printf_float+0x1da>
 8005bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8005c00:	e152      	b.n	8005ea8 <_printf_float+0x480>
 8005c02:	f8db 3000 	ldr.w	r3, [fp]
 8005c06:	055a      	lsls	r2, r3, #21
 8005c08:	d405      	bmi.n	8005c16 <_printf_float+0x1ee>
 8005c0a:	4620      	mov	r0, r4
 8005c0c:	4629      	mov	r1, r5
 8005c0e:	463a      	mov	r2, r7
 8005c10:	f8db 3010 	ldr.w	r3, [fp, #16]
 8005c14:	e108      	b.n	8005e28 <_printf_float+0x400>
 8005c16:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8005c1a:	f240 80d0 	bls.w	8005dbe <_printf_float+0x396>
 8005c1e:	e9db 0112 	ldrd	r0, r1, [fp, #72]	; 0x48
 8005c22:	2200      	movs	r2, #0
 8005c24:	2300      	movs	r3, #0
 8005c26:	f001 ff1b 	bl	8007a60 <__aeabi_dcmpeq>
 8005c2a:	b350      	cbz	r0, 8005c82 <_printf_float+0x25a>
 8005c2c:	4620      	mov	r0, r4
 8005c2e:	4629      	mov	r1, r5
 8005c30:	4a38      	ldr	r2, [pc, #224]	; (8005d14 <_printf_float+0x2ec>)
 8005c32:	2301      	movs	r3, #1
 8005c34:	47b0      	blx	r6
 8005c36:	3001      	adds	r0, #1
 8005c38:	d0e0      	beq.n	8005bfc <_printf_float+0x1d4>
 8005c3a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005c3c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005c3e:	429a      	cmp	r2, r3
 8005c40:	db09      	blt.n	8005c56 <_printf_float+0x22e>
 8005c42:	f8db 3000 	ldr.w	r3, [fp]
 8005c46:	07d8      	lsls	r0, r3, #31
 8005c48:	d405      	bmi.n	8005c56 <_printf_float+0x22e>
 8005c4a:	f8db 3000 	ldr.w	r3, [fp]
 8005c4e:	079f      	lsls	r7, r3, #30
 8005c50:	f100 8110 	bmi.w	8005e74 <_printf_float+0x44c>
 8005c54:	e107      	b.n	8005e66 <_printf_float+0x43e>
 8005c56:	4620      	mov	r0, r4
 8005c58:	4629      	mov	r1, r5
 8005c5a:	4652      	mov	r2, sl
 8005c5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c5e:	47b0      	blx	r6
 8005c60:	3001      	adds	r0, #1
 8005c62:	d0cb      	beq.n	8005bfc <_printf_float+0x1d4>
 8005c64:	2700      	movs	r7, #0
 8005c66:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005c68:	3b01      	subs	r3, #1
 8005c6a:	429f      	cmp	r7, r3
 8005c6c:	daed      	bge.n	8005c4a <_printf_float+0x222>
 8005c6e:	4620      	mov	r0, r4
 8005c70:	4629      	mov	r1, r5
 8005c72:	f10b 021a 	add.w	r2, fp, #26
 8005c76:	2301      	movs	r3, #1
 8005c78:	47b0      	blx	r6
 8005c7a:	3001      	adds	r0, #1
 8005c7c:	d0be      	beq.n	8005bfc <_printf_float+0x1d4>
 8005c7e:	3701      	adds	r7, #1
 8005c80:	e7f1      	b.n	8005c66 <_printf_float+0x23e>
 8005c82:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	dc29      	bgt.n	8005cdc <_printf_float+0x2b4>
 8005c88:	4620      	mov	r0, r4
 8005c8a:	4629      	mov	r1, r5
 8005c8c:	4a21      	ldr	r2, [pc, #132]	; (8005d14 <_printf_float+0x2ec>)
 8005c8e:	2301      	movs	r3, #1
 8005c90:	47b0      	blx	r6
 8005c92:	3001      	adds	r0, #1
 8005c94:	d0b2      	beq.n	8005bfc <_printf_float+0x1d4>
 8005c96:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005c98:	b92b      	cbnz	r3, 8005ca6 <_printf_float+0x27e>
 8005c9a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005c9c:	b91b      	cbnz	r3, 8005ca6 <_printf_float+0x27e>
 8005c9e:	f8db 3000 	ldr.w	r3, [fp]
 8005ca2:	07d9      	lsls	r1, r3, #31
 8005ca4:	d5d1      	bpl.n	8005c4a <_printf_float+0x222>
 8005ca6:	4620      	mov	r0, r4
 8005ca8:	4629      	mov	r1, r5
 8005caa:	4652      	mov	r2, sl
 8005cac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005cae:	47b0      	blx	r6
 8005cb0:	3001      	adds	r0, #1
 8005cb2:	d0a3      	beq.n	8005bfc <_printf_float+0x1d4>
 8005cb4:	f04f 0800 	mov.w	r8, #0
 8005cb8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005cba:	425b      	negs	r3, r3
 8005cbc:	4598      	cmp	r8, r3
 8005cbe:	4620      	mov	r0, r4
 8005cc0:	4629      	mov	r1, r5
 8005cc2:	da08      	bge.n	8005cd6 <_printf_float+0x2ae>
 8005cc4:	f10b 021a 	add.w	r2, fp, #26
 8005cc8:	2301      	movs	r3, #1
 8005cca:	47b0      	blx	r6
 8005ccc:	3001      	adds	r0, #1
 8005cce:	d095      	beq.n	8005bfc <_printf_float+0x1d4>
 8005cd0:	f108 0801 	add.w	r8, r8, #1
 8005cd4:	e7f0      	b.n	8005cb8 <_printf_float+0x290>
 8005cd6:	463a      	mov	r2, r7
 8005cd8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005cda:	e0a5      	b.n	8005e28 <_printf_float+0x400>
 8005cdc:	f8db 2058 	ldr.w	r2, [fp, #88]	; 0x58
 8005ce0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005ce2:	429a      	cmp	r2, r3
 8005ce4:	bfa8      	it	ge
 8005ce6:	461a      	movge	r2, r3
 8005ce8:	2a00      	cmp	r2, #0
 8005cea:	4691      	mov	r9, r2
 8005cec:	dc02      	bgt.n	8005cf4 <_printf_float+0x2cc>
 8005cee:	f04f 0800 	mov.w	r8, #0
 8005cf2:	e01c      	b.n	8005d2e <_printf_float+0x306>
 8005cf4:	4620      	mov	r0, r4
 8005cf6:	4629      	mov	r1, r5
 8005cf8:	463a      	mov	r2, r7
 8005cfa:	464b      	mov	r3, r9
 8005cfc:	47b0      	blx	r6
 8005cfe:	3001      	adds	r0, #1
 8005d00:	d1f5      	bne.n	8005cee <_printf_float+0x2c6>
 8005d02:	e77b      	b.n	8005bfc <_printf_float+0x1d4>
 8005d04:	08007db6 	.word	0x08007db6
 8005d08:	08007db2 	.word	0x08007db2
 8005d0c:	08007dbe 	.word	0x08007dbe
 8005d10:	08007dba 	.word	0x08007dba
 8005d14:	08007dc2 	.word	0x08007dc2
 8005d18:	4620      	mov	r0, r4
 8005d1a:	4629      	mov	r1, r5
 8005d1c:	f10b 021a 	add.w	r2, fp, #26
 8005d20:	2301      	movs	r3, #1
 8005d22:	47b0      	blx	r6
 8005d24:	3001      	adds	r0, #1
 8005d26:	f43f af69 	beq.w	8005bfc <_printf_float+0x1d4>
 8005d2a:	f108 0801 	add.w	r8, r8, #1
 8005d2e:	f8db 3058 	ldr.w	r3, [fp, #88]	; 0x58
 8005d32:	f1b9 0f00 	cmp.w	r9, #0
 8005d36:	bfac      	ite	ge
 8005d38:	ebc9 0203 	rsbge	r2, r9, r3
 8005d3c:	461a      	movlt	r2, r3
 8005d3e:	4590      	cmp	r8, r2
 8005d40:	dbea      	blt.n	8005d18 <_printf_float+0x2f0>
 8005d42:	eb07 0803 	add.w	r8, r7, r3
 8005d46:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005d48:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005d4a:	429a      	cmp	r2, r3
 8005d4c:	db10      	blt.n	8005d70 <_printf_float+0x348>
 8005d4e:	f8db 3000 	ldr.w	r3, [fp]
 8005d52:	07da      	lsls	r2, r3, #31
 8005d54:	d40c      	bmi.n	8005d70 <_printf_float+0x348>
 8005d56:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005d58:	4417      	add	r7, r2
 8005d5a:	ebc8 0307 	rsb	r3, r8, r7
 8005d5e:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8005d60:	1bd2      	subs	r2, r2, r7
 8005d62:	4293      	cmp	r3, r2
 8005d64:	bfa8      	it	ge
 8005d66:	4613      	movge	r3, r2
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	461f      	mov	r7, r3
 8005d6c:	dc08      	bgt.n	8005d80 <_printf_float+0x358>
 8005d6e:	e00e      	b.n	8005d8e <_printf_float+0x366>
 8005d70:	4620      	mov	r0, r4
 8005d72:	4629      	mov	r1, r5
 8005d74:	4652      	mov	r2, sl
 8005d76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d78:	47b0      	blx	r6
 8005d7a:	3001      	adds	r0, #1
 8005d7c:	d1eb      	bne.n	8005d56 <_printf_float+0x32e>
 8005d7e:	e73d      	b.n	8005bfc <_printf_float+0x1d4>
 8005d80:	4620      	mov	r0, r4
 8005d82:	4629      	mov	r1, r5
 8005d84:	4642      	mov	r2, r8
 8005d86:	47b0      	blx	r6
 8005d88:	3001      	adds	r0, #1
 8005d8a:	f43f af37 	beq.w	8005bfc <_printf_float+0x1d4>
 8005d8e:	f04f 0800 	mov.w	r8, #0
 8005d92:	e00a      	b.n	8005daa <_printf_float+0x382>
 8005d94:	4620      	mov	r0, r4
 8005d96:	4629      	mov	r1, r5
 8005d98:	f10b 021a 	add.w	r2, fp, #26
 8005d9c:	2301      	movs	r3, #1
 8005d9e:	47b0      	blx	r6
 8005da0:	3001      	adds	r0, #1
 8005da2:	f43f af2b 	beq.w	8005bfc <_printf_float+0x1d4>
 8005da6:	f108 0801 	add.w	r8, r8, #1
 8005daa:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005dac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005dae:	2f00      	cmp	r7, #0
 8005db0:	eba3 0302 	sub.w	r3, r3, r2
 8005db4:	bfa8      	it	ge
 8005db6:	1bdb      	subge	r3, r3, r7
 8005db8:	4598      	cmp	r8, r3
 8005dba:	dbeb      	blt.n	8005d94 <_printf_float+0x36c>
 8005dbc:	e745      	b.n	8005c4a <_printf_float+0x222>
 8005dbe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005dc0:	2a01      	cmp	r2, #1
 8005dc2:	dc01      	bgt.n	8005dc8 <_printf_float+0x3a0>
 8005dc4:	07db      	lsls	r3, r3, #31
 8005dc6:	d536      	bpl.n	8005e36 <_printf_float+0x40e>
 8005dc8:	4620      	mov	r0, r4
 8005dca:	4629      	mov	r1, r5
 8005dcc:	463a      	mov	r2, r7
 8005dce:	2301      	movs	r3, #1
 8005dd0:	47b0      	blx	r6
 8005dd2:	3001      	adds	r0, #1
 8005dd4:	f43f af12 	beq.w	8005bfc <_printf_float+0x1d4>
 8005dd8:	4620      	mov	r0, r4
 8005dda:	4629      	mov	r1, r5
 8005ddc:	4652      	mov	r2, sl
 8005dde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005de0:	47b0      	blx	r6
 8005de2:	3001      	adds	r0, #1
 8005de4:	f43f af0a 	beq.w	8005bfc <_printf_float+0x1d4>
 8005de8:	e9db 0112 	ldrd	r0, r1, [fp, #72]	; 0x48
 8005dec:	2200      	movs	r2, #0
 8005dee:	2300      	movs	r3, #0
 8005df0:	f001 fe36 	bl	8007a60 <__aeabi_dcmpeq>
 8005df4:	b9e8      	cbnz	r0, 8005e32 <_printf_float+0x40a>
 8005df6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005df8:	4620      	mov	r0, r4
 8005dfa:	4629      	mov	r1, r5
 8005dfc:	1c7a      	adds	r2, r7, #1
 8005dfe:	3b01      	subs	r3, #1
 8005e00:	e01d      	b.n	8005e3e <_printf_float+0x416>
 8005e02:	4620      	mov	r0, r4
 8005e04:	4629      	mov	r1, r5
 8005e06:	f10b 021a 	add.w	r2, fp, #26
 8005e0a:	2301      	movs	r3, #1
 8005e0c:	47b0      	blx	r6
 8005e0e:	3001      	adds	r0, #1
 8005e10:	f43f aef4 	beq.w	8005bfc <_printf_float+0x1d4>
 8005e14:	3701      	adds	r7, #1
 8005e16:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005e18:	3b01      	subs	r3, #1
 8005e1a:	429f      	cmp	r7, r3
 8005e1c:	dbf1      	blt.n	8005e02 <_printf_float+0x3da>
 8005e1e:	4620      	mov	r0, r4
 8005e20:	4629      	mov	r1, r5
 8005e22:	f10b 0250 	add.w	r2, fp, #80	; 0x50
 8005e26:	464b      	mov	r3, r9
 8005e28:	47b0      	blx	r6
 8005e2a:	3001      	adds	r0, #1
 8005e2c:	f47f af0d 	bne.w	8005c4a <_printf_float+0x222>
 8005e30:	e6e4      	b.n	8005bfc <_printf_float+0x1d4>
 8005e32:	2700      	movs	r7, #0
 8005e34:	e7ef      	b.n	8005e16 <_printf_float+0x3ee>
 8005e36:	4620      	mov	r0, r4
 8005e38:	4629      	mov	r1, r5
 8005e3a:	463a      	mov	r2, r7
 8005e3c:	2301      	movs	r3, #1
 8005e3e:	47b0      	blx	r6
 8005e40:	3001      	adds	r0, #1
 8005e42:	d1ec      	bne.n	8005e1e <_printf_float+0x3f6>
 8005e44:	e6da      	b.n	8005bfc <_printf_float+0x1d4>
 8005e46:	4620      	mov	r0, r4
 8005e48:	4629      	mov	r1, r5
 8005e4a:	f10b 0219 	add.w	r2, fp, #25
 8005e4e:	2301      	movs	r3, #1
 8005e50:	47b0      	blx	r6
 8005e52:	3001      	adds	r0, #1
 8005e54:	f43f aed2 	beq.w	8005bfc <_printf_float+0x1d4>
 8005e58:	3701      	adds	r7, #1
 8005e5a:	f8db 300c 	ldr.w	r3, [fp, #12]
 8005e5e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005e60:	1a9b      	subs	r3, r3, r2
 8005e62:	429f      	cmp	r7, r3
 8005e64:	dbef      	blt.n	8005e46 <_printf_float+0x41e>
 8005e66:	f8db 000c 	ldr.w	r0, [fp, #12]
 8005e6a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005e6c:	4298      	cmp	r0, r3
 8005e6e:	bfb8      	it	lt
 8005e70:	4618      	movlt	r0, r3
 8005e72:	e019      	b.n	8005ea8 <_printf_float+0x480>
 8005e74:	2700      	movs	r7, #0
 8005e76:	e7f0      	b.n	8005e5a <_printf_float+0x432>
 8005e78:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005e7c:	e88d 000c 	stmia.w	sp, {r2, r3}
 8005e80:	f8cb 3000 	str.w	r3, [fp]
 8005e84:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 8005e88:	9302      	str	r3, [sp, #8]
 8005e8a:	ab0d      	add	r3, sp, #52	; 0x34
 8005e8c:	9303      	str	r3, [sp, #12]
 8005e8e:	ab0e      	add	r3, sp, #56	; 0x38
 8005e90:	9305      	str	r3, [sp, #20]
 8005e92:	2300      	movs	r3, #0
 8005e94:	9306      	str	r3, [sp, #24]
 8005e96:	f8cd 8010 	str.w	r8, [sp, #16]
 8005e9a:	4620      	mov	r0, r4
 8005e9c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005ea0:	f7ff fd31 	bl	8005906 <__cvt>
 8005ea4:	4607      	mov	r7, r0
 8005ea6:	e640      	b.n	8005b2a <_printf_float+0x102>
 8005ea8:	b011      	add	sp, #68	; 0x44
 8005eaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005eae:	bf00      	nop

08005eb0 <_printf_common>:
 8005eb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005eb4:	4691      	mov	r9, r2
 8005eb6:	461f      	mov	r7, r3
 8005eb8:	688a      	ldr	r2, [r1, #8]
 8005eba:	690b      	ldr	r3, [r1, #16]
 8005ebc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005ec0:	4293      	cmp	r3, r2
 8005ec2:	bfb8      	it	lt
 8005ec4:	4613      	movlt	r3, r2
 8005ec6:	f8c9 3000 	str.w	r3, [r9]
 8005eca:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005ece:	4606      	mov	r6, r0
 8005ed0:	460c      	mov	r4, r1
 8005ed2:	b112      	cbz	r2, 8005eda <_printf_common+0x2a>
 8005ed4:	3301      	adds	r3, #1
 8005ed6:	f8c9 3000 	str.w	r3, [r9]
 8005eda:	6823      	ldr	r3, [r4, #0]
 8005edc:	0699      	lsls	r1, r3, #26
 8005ede:	bf42      	ittt	mi
 8005ee0:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005ee4:	3302      	addmi	r3, #2
 8005ee6:	f8c9 3000 	strmi.w	r3, [r9]
 8005eea:	6825      	ldr	r5, [r4, #0]
 8005eec:	f015 0506 	ands.w	r5, r5, #6
 8005ef0:	d01c      	beq.n	8005f2c <_printf_common+0x7c>
 8005ef2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005ef6:	6822      	ldr	r2, [r4, #0]
 8005ef8:	3300      	adds	r3, #0
 8005efa:	bf18      	it	ne
 8005efc:	2301      	movne	r3, #1
 8005efe:	0692      	lsls	r2, r2, #26
 8005f00:	d51f      	bpl.n	8005f42 <_printf_common+0x92>
 8005f02:	18e1      	adds	r1, r4, r3
 8005f04:	1c5a      	adds	r2, r3, #1
 8005f06:	2030      	movs	r0, #48	; 0x30
 8005f08:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005f0c:	4422      	add	r2, r4
 8005f0e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005f12:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005f16:	3302      	adds	r3, #2
 8005f18:	e013      	b.n	8005f42 <_printf_common+0x92>
 8005f1a:	4630      	mov	r0, r6
 8005f1c:	4639      	mov	r1, r7
 8005f1e:	f104 0219 	add.w	r2, r4, #25
 8005f22:	2301      	movs	r3, #1
 8005f24:	47c0      	blx	r8
 8005f26:	3001      	adds	r0, #1
 8005f28:	d007      	beq.n	8005f3a <_printf_common+0x8a>
 8005f2a:	3501      	adds	r5, #1
 8005f2c:	68e3      	ldr	r3, [r4, #12]
 8005f2e:	f8d9 2000 	ldr.w	r2, [r9]
 8005f32:	1a9b      	subs	r3, r3, r2
 8005f34:	429d      	cmp	r5, r3
 8005f36:	dbf0      	blt.n	8005f1a <_printf_common+0x6a>
 8005f38:	e7db      	b.n	8005ef2 <_printf_common+0x42>
 8005f3a:	f04f 30ff 	mov.w	r0, #4294967295
 8005f3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005f42:	4630      	mov	r0, r6
 8005f44:	4639      	mov	r1, r7
 8005f46:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005f4a:	47c0      	blx	r8
 8005f4c:	3001      	adds	r0, #1
 8005f4e:	d0f4      	beq.n	8005f3a <_printf_common+0x8a>
 8005f50:	6822      	ldr	r2, [r4, #0]
 8005f52:	f8d9 5000 	ldr.w	r5, [r9]
 8005f56:	68e3      	ldr	r3, [r4, #12]
 8005f58:	f002 0206 	and.w	r2, r2, #6
 8005f5c:	2a04      	cmp	r2, #4
 8005f5e:	bf08      	it	eq
 8005f60:	1b5d      	subeq	r5, r3, r5
 8005f62:	6922      	ldr	r2, [r4, #16]
 8005f64:	68a3      	ldr	r3, [r4, #8]
 8005f66:	bf0c      	ite	eq
 8005f68:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005f6c:	2500      	movne	r5, #0
 8005f6e:	4293      	cmp	r3, r2
 8005f70:	bfc4      	itt	gt
 8005f72:	1a9b      	subgt	r3, r3, r2
 8005f74:	18ed      	addgt	r5, r5, r3
 8005f76:	f04f 0900 	mov.w	r9, #0
 8005f7a:	45a9      	cmp	r9, r5
 8005f7c:	da0a      	bge.n	8005f94 <_printf_common+0xe4>
 8005f7e:	4630      	mov	r0, r6
 8005f80:	4639      	mov	r1, r7
 8005f82:	f104 021a 	add.w	r2, r4, #26
 8005f86:	2301      	movs	r3, #1
 8005f88:	47c0      	blx	r8
 8005f8a:	3001      	adds	r0, #1
 8005f8c:	d0d5      	beq.n	8005f3a <_printf_common+0x8a>
 8005f8e:	f109 0901 	add.w	r9, r9, #1
 8005f92:	e7f2      	b.n	8005f7a <_printf_common+0xca>
 8005f94:	2000      	movs	r0, #0
 8005f96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

08005f9c <_printf_i>:
 8005f9c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8005fa0:	460c      	mov	r4, r1
 8005fa2:	4617      	mov	r7, r2
 8005fa4:	7e22      	ldrb	r2, [r4, #24]
 8005fa6:	2a6e      	cmp	r2, #110	; 0x6e
 8005fa8:	4698      	mov	r8, r3
 8005faa:	4606      	mov	r6, r0
 8005fac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005fae:	f101 0143 	add.w	r1, r1, #67	; 0x43
 8005fb2:	f000 80a9 	beq.w	8006108 <_printf_i+0x16c>
 8005fb6:	d812      	bhi.n	8005fde <_printf_i+0x42>
 8005fb8:	2a63      	cmp	r2, #99	; 0x63
 8005fba:	d023      	beq.n	8006004 <_printf_i+0x68>
 8005fbc:	d80a      	bhi.n	8005fd4 <_printf_i+0x38>
 8005fbe:	2a00      	cmp	r2, #0
 8005fc0:	f000 80b6 	beq.w	8006130 <_printf_i+0x194>
 8005fc4:	2a58      	cmp	r2, #88	; 0x58
 8005fc6:	f040 80c5 	bne.w	8006154 <_printf_i+0x1b8>
 8005fca:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8005fce:	f8df e1f8 	ldr.w	lr, [pc, #504]	; 80061c8 <_printf_i+0x22c>
 8005fd2:	e051      	b.n	8006078 <_printf_i+0xdc>
 8005fd4:	2a64      	cmp	r2, #100	; 0x64
 8005fd6:	d01e      	beq.n	8006016 <_printf_i+0x7a>
 8005fd8:	2a69      	cmp	r2, #105	; 0x69
 8005fda:	d01c      	beq.n	8006016 <_printf_i+0x7a>
 8005fdc:	e0ba      	b.n	8006154 <_printf_i+0x1b8>
 8005fde:	2a73      	cmp	r2, #115	; 0x73
 8005fe0:	f000 80aa 	beq.w	8006138 <_printf_i+0x19c>
 8005fe4:	d809      	bhi.n	8005ffa <_printf_i+0x5e>
 8005fe6:	2a6f      	cmp	r2, #111	; 0x6f
 8005fe8:	d02b      	beq.n	8006042 <_printf_i+0xa6>
 8005fea:	2a70      	cmp	r2, #112	; 0x70
 8005fec:	f040 80b2 	bne.w	8006154 <_printf_i+0x1b8>
 8005ff0:	6822      	ldr	r2, [r4, #0]
 8005ff2:	f042 0220 	orr.w	r2, r2, #32
 8005ff6:	6022      	str	r2, [r4, #0]
 8005ff8:	e039      	b.n	800606e <_printf_i+0xd2>
 8005ffa:	2a75      	cmp	r2, #117	; 0x75
 8005ffc:	d021      	beq.n	8006042 <_printf_i+0xa6>
 8005ffe:	2a78      	cmp	r2, #120	; 0x78
 8006000:	d035      	beq.n	800606e <_printf_i+0xd2>
 8006002:	e0a7      	b.n	8006154 <_printf_i+0x1b8>
 8006004:	681a      	ldr	r2, [r3, #0]
 8006006:	1d11      	adds	r1, r2, #4
 8006008:	6019      	str	r1, [r3, #0]
 800600a:	6813      	ldr	r3, [r2, #0]
 800600c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006010:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006014:	e0a2      	b.n	800615c <_printf_i+0x1c0>
 8006016:	6820      	ldr	r0, [r4, #0]
 8006018:	681a      	ldr	r2, [r3, #0]
 800601a:	f010 0f80 	tst.w	r0, #128	; 0x80
 800601e:	d003      	beq.n	8006028 <_printf_i+0x8c>
 8006020:	1d10      	adds	r0, r2, #4
 8006022:	6018      	str	r0, [r3, #0]
 8006024:	6813      	ldr	r3, [r2, #0]
 8006026:	e005      	b.n	8006034 <_printf_i+0x98>
 8006028:	0645      	lsls	r5, r0, #25
 800602a:	d5f9      	bpl.n	8006020 <_printf_i+0x84>
 800602c:	1d10      	adds	r0, r2, #4
 800602e:	6018      	str	r0, [r3, #0]
 8006030:	f9b2 3000 	ldrsh.w	r3, [r2]
 8006034:	2b00      	cmp	r3, #0
 8006036:	da3b      	bge.n	80060b0 <_printf_i+0x114>
 8006038:	222d      	movs	r2, #45	; 0x2d
 800603a:	425b      	negs	r3, r3
 800603c:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8006040:	e036      	b.n	80060b0 <_printf_i+0x114>
 8006042:	6820      	ldr	r0, [r4, #0]
 8006044:	681a      	ldr	r2, [r3, #0]
 8006046:	f010 0f80 	tst.w	r0, #128	; 0x80
 800604a:	d003      	beq.n	8006054 <_printf_i+0xb8>
 800604c:	1d10      	adds	r0, r2, #4
 800604e:	6018      	str	r0, [r3, #0]
 8006050:	6813      	ldr	r3, [r2, #0]
 8006052:	e004      	b.n	800605e <_printf_i+0xc2>
 8006054:	0640      	lsls	r0, r0, #25
 8006056:	d5f9      	bpl.n	800604c <_printf_i+0xb0>
 8006058:	1d10      	adds	r0, r2, #4
 800605a:	6018      	str	r0, [r3, #0]
 800605c:	8813      	ldrh	r3, [r2, #0]
 800605e:	7e22      	ldrb	r2, [r4, #24]
 8006060:	f8df e164 	ldr.w	lr, [pc, #356]	; 80061c8 <_printf_i+0x22c>
 8006064:	2a6f      	cmp	r2, #111	; 0x6f
 8006066:	bf0c      	ite	eq
 8006068:	2208      	moveq	r2, #8
 800606a:	220a      	movne	r2, #10
 800606c:	e01c      	b.n	80060a8 <_printf_i+0x10c>
 800606e:	2278      	movs	r2, #120	; 0x78
 8006070:	f8df e158 	ldr.w	lr, [pc, #344]	; 80061cc <_printf_i+0x230>
 8006074:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8006078:	6822      	ldr	r2, [r4, #0]
 800607a:	6818      	ldr	r0, [r3, #0]
 800607c:	f012 0f80 	tst.w	r2, #128	; 0x80
 8006080:	f100 0504 	add.w	r5, r0, #4
 8006084:	601d      	str	r5, [r3, #0]
 8006086:	d001      	beq.n	800608c <_printf_i+0xf0>
 8006088:	6803      	ldr	r3, [r0, #0]
 800608a:	e002      	b.n	8006092 <_printf_i+0xf6>
 800608c:	0655      	lsls	r5, r2, #25
 800608e:	d5fb      	bpl.n	8006088 <_printf_i+0xec>
 8006090:	8803      	ldrh	r3, [r0, #0]
 8006092:	07d0      	lsls	r0, r2, #31
 8006094:	bf44      	itt	mi
 8006096:	f042 0220 	orrmi.w	r2, r2, #32
 800609a:	6022      	strmi	r2, [r4, #0]
 800609c:	b91b      	cbnz	r3, 80060a6 <_printf_i+0x10a>
 800609e:	6822      	ldr	r2, [r4, #0]
 80060a0:	f022 0220 	bic.w	r2, r2, #32
 80060a4:	6022      	str	r2, [r4, #0]
 80060a6:	2210      	movs	r2, #16
 80060a8:	2000      	movs	r0, #0
 80060aa:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 80060ae:	e002      	b.n	80060b6 <_printf_i+0x11a>
 80060b0:	f8df e114 	ldr.w	lr, [pc, #276]	; 80061c8 <_printf_i+0x22c>
 80060b4:	220a      	movs	r2, #10
 80060b6:	6865      	ldr	r5, [r4, #4]
 80060b8:	60a5      	str	r5, [r4, #8]
 80060ba:	2d00      	cmp	r5, #0
 80060bc:	bfa2      	ittt	ge
 80060be:	6820      	ldrge	r0, [r4, #0]
 80060c0:	f020 0004 	bicge.w	r0, r0, #4
 80060c4:	6020      	strge	r0, [r4, #0]
 80060c6:	b903      	cbnz	r3, 80060ca <_printf_i+0x12e>
 80060c8:	b165      	cbz	r5, 80060e4 <_printf_i+0x148>
 80060ca:	460d      	mov	r5, r1
 80060cc:	fbb3 f0f2 	udiv	r0, r3, r2
 80060d0:	fb02 3310 	mls	r3, r2, r0, r3
 80060d4:	f81e 3003 	ldrb.w	r3, [lr, r3]
 80060d8:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80060dc:	4603      	mov	r3, r0
 80060de:	2800      	cmp	r0, #0
 80060e0:	d1f4      	bne.n	80060cc <_printf_i+0x130>
 80060e2:	e000      	b.n	80060e6 <_printf_i+0x14a>
 80060e4:	460d      	mov	r5, r1
 80060e6:	2a08      	cmp	r2, #8
 80060e8:	d10b      	bne.n	8006102 <_printf_i+0x166>
 80060ea:	6823      	ldr	r3, [r4, #0]
 80060ec:	07da      	lsls	r2, r3, #31
 80060ee:	d508      	bpl.n	8006102 <_printf_i+0x166>
 80060f0:	6923      	ldr	r3, [r4, #16]
 80060f2:	6862      	ldr	r2, [r4, #4]
 80060f4:	429a      	cmp	r2, r3
 80060f6:	bfde      	ittt	le
 80060f8:	2330      	movle	r3, #48	; 0x30
 80060fa:	f805 3c01 	strble.w	r3, [r5, #-1]
 80060fe:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006102:	1b49      	subs	r1, r1, r5
 8006104:	6121      	str	r1, [r4, #16]
 8006106:	e02e      	b.n	8006166 <_printf_i+0x1ca>
 8006108:	6825      	ldr	r5, [r4, #0]
 800610a:	681a      	ldr	r2, [r3, #0]
 800610c:	6960      	ldr	r0, [r4, #20]
 800610e:	f015 0f80 	tst.w	r5, #128	; 0x80
 8006112:	d003      	beq.n	800611c <_printf_i+0x180>
 8006114:	1d15      	adds	r5, r2, #4
 8006116:	601d      	str	r5, [r3, #0]
 8006118:	6813      	ldr	r3, [r2, #0]
 800611a:	e008      	b.n	800612e <_printf_i+0x192>
 800611c:	f015 0f40 	tst.w	r5, #64	; 0x40
 8006120:	f102 0504 	add.w	r5, r2, #4
 8006124:	601d      	str	r5, [r3, #0]
 8006126:	6813      	ldr	r3, [r2, #0]
 8006128:	d001      	beq.n	800612e <_printf_i+0x192>
 800612a:	8018      	strh	r0, [r3, #0]
 800612c:	e000      	b.n	8006130 <_printf_i+0x194>
 800612e:	6018      	str	r0, [r3, #0]
 8006130:	2300      	movs	r3, #0
 8006132:	6123      	str	r3, [r4, #16]
 8006134:	460d      	mov	r5, r1
 8006136:	e016      	b.n	8006166 <_printf_i+0x1ca>
 8006138:	681a      	ldr	r2, [r3, #0]
 800613a:	1d11      	adds	r1, r2, #4
 800613c:	6019      	str	r1, [r3, #0]
 800613e:	6815      	ldr	r5, [r2, #0]
 8006140:	6862      	ldr	r2, [r4, #4]
 8006142:	4628      	mov	r0, r5
 8006144:	2100      	movs	r1, #0
 8006146:	f000 fef7 	bl	8006f38 <memchr>
 800614a:	b108      	cbz	r0, 8006150 <_printf_i+0x1b4>
 800614c:	1b40      	subs	r0, r0, r5
 800614e:	6060      	str	r0, [r4, #4]
 8006150:	6863      	ldr	r3, [r4, #4]
 8006152:	e004      	b.n	800615e <_printf_i+0x1c2>
 8006154:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006158:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 800615c:	2301      	movs	r3, #1
 800615e:	6123      	str	r3, [r4, #16]
 8006160:	2300      	movs	r3, #0
 8006162:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006166:	f8cd 8000 	str.w	r8, [sp]
 800616a:	4630      	mov	r0, r6
 800616c:	4621      	mov	r1, r4
 800616e:	aa03      	add	r2, sp, #12
 8006170:	463b      	mov	r3, r7
 8006172:	f7ff fe9d 	bl	8005eb0 <_printf_common>
 8006176:	3001      	adds	r0, #1
 8006178:	d102      	bne.n	8006180 <_printf_i+0x1e4>
 800617a:	f04f 30ff 	mov.w	r0, #4294967295
 800617e:	e01f      	b.n	80061c0 <_printf_i+0x224>
 8006180:	4630      	mov	r0, r6
 8006182:	4639      	mov	r1, r7
 8006184:	462a      	mov	r2, r5
 8006186:	6923      	ldr	r3, [r4, #16]
 8006188:	47c0      	blx	r8
 800618a:	3001      	adds	r0, #1
 800618c:	d0f5      	beq.n	800617a <_printf_i+0x1de>
 800618e:	6823      	ldr	r3, [r4, #0]
 8006190:	079b      	lsls	r3, r3, #30
 8006192:	d405      	bmi.n	80061a0 <_printf_i+0x204>
 8006194:	68e0      	ldr	r0, [r4, #12]
 8006196:	9b03      	ldr	r3, [sp, #12]
 8006198:	4298      	cmp	r0, r3
 800619a:	bfb8      	it	lt
 800619c:	4618      	movlt	r0, r3
 800619e:	e00f      	b.n	80061c0 <_printf_i+0x224>
 80061a0:	2500      	movs	r5, #0
 80061a2:	68e3      	ldr	r3, [r4, #12]
 80061a4:	9a03      	ldr	r2, [sp, #12]
 80061a6:	1a9b      	subs	r3, r3, r2
 80061a8:	429d      	cmp	r5, r3
 80061aa:	daf3      	bge.n	8006194 <_printf_i+0x1f8>
 80061ac:	4630      	mov	r0, r6
 80061ae:	4639      	mov	r1, r7
 80061b0:	f104 0219 	add.w	r2, r4, #25
 80061b4:	2301      	movs	r3, #1
 80061b6:	47c0      	blx	r8
 80061b8:	3001      	adds	r0, #1
 80061ba:	d0de      	beq.n	800617a <_printf_i+0x1de>
 80061bc:	3501      	adds	r5, #1
 80061be:	e7f0      	b.n	80061a2 <_printf_i+0x206>
 80061c0:	b004      	add	sp, #16
 80061c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80061c6:	bf00      	nop
 80061c8:	08007dc4 	.word	0x08007dc4
 80061cc:	08007dd5 	.word	0x08007dd5

080061d0 <__fpclassifyd>:
 80061d0:	460a      	mov	r2, r1
 80061d2:	f031 4100 	bics.w	r1, r1, #2147483648	; 0x80000000
 80061d6:	b510      	push	{r4, lr}
 80061d8:	4603      	mov	r3, r0
 80061da:	d01b      	beq.n	8006214 <__fpclassifyd+0x44>
 80061dc:	480f      	ldr	r0, [pc, #60]	; (800621c <__fpclassifyd+0x4c>)
 80061de:	f5a2 1480 	sub.w	r4, r2, #1048576	; 0x100000
 80061e2:	4284      	cmp	r4, r0
 80061e4:	d910      	bls.n	8006208 <__fpclassifyd+0x38>
 80061e6:	f102 42ff 	add.w	r2, r2, #2139095040	; 0x7f800000
 80061ea:	480c      	ldr	r0, [pc, #48]	; (800621c <__fpclassifyd+0x4c>)
 80061ec:	f502 02e0 	add.w	r2, r2, #7340032	; 0x700000
 80061f0:	4282      	cmp	r2, r0
 80061f2:	d909      	bls.n	8006208 <__fpclassifyd+0x38>
 80061f4:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80061f8:	d308      	bcc.n	800620c <__fpclassifyd+0x3c>
 80061fa:	4a09      	ldr	r2, [pc, #36]	; (8006220 <__fpclassifyd+0x50>)
 80061fc:	4291      	cmp	r1, r2
 80061fe:	d107      	bne.n	8006210 <__fpclassifyd+0x40>
 8006200:	fab3 f083 	clz	r0, r3
 8006204:	0940      	lsrs	r0, r0, #5
 8006206:	bd10      	pop	{r4, pc}
 8006208:	2004      	movs	r0, #4
 800620a:	bd10      	pop	{r4, pc}
 800620c:	2003      	movs	r0, #3
 800620e:	bd10      	pop	{r4, pc}
 8006210:	2000      	movs	r0, #0
 8006212:	bd10      	pop	{r4, pc}
 8006214:	2800      	cmp	r0, #0
 8006216:	d1e6      	bne.n	80061e6 <__fpclassifyd+0x16>
 8006218:	2002      	movs	r0, #2
 800621a:	bd10      	pop	{r4, pc}
 800621c:	7fdfffff 	.word	0x7fdfffff
 8006220:	7ff00000 	.word	0x7ff00000

08006224 <siprintf>:
 8006224:	b40e      	push	{r1, r2, r3}
 8006226:	b500      	push	{lr}
 8006228:	b09c      	sub	sp, #112	; 0x70
 800622a:	f44f 7102 	mov.w	r1, #520	; 0x208
 800622e:	f8ad 1014 	strh.w	r1, [sp, #20]
 8006232:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006236:	9104      	str	r1, [sp, #16]
 8006238:	9107      	str	r1, [sp, #28]
 800623a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800623e:	ab1d      	add	r3, sp, #116	; 0x74
 8006240:	f8ad 1016 	strh.w	r1, [sp, #22]
 8006244:	4908      	ldr	r1, [pc, #32]	; (8006268 <siprintf+0x44>)
 8006246:	f853 2b04 	ldr.w	r2, [r3], #4
 800624a:	9002      	str	r0, [sp, #8]
 800624c:	9006      	str	r0, [sp, #24]
 800624e:	6808      	ldr	r0, [r1, #0]
 8006250:	9301      	str	r3, [sp, #4]
 8006252:	a902      	add	r1, sp, #8
 8006254:	f001 fa60 	bl	8007718 <_svfiprintf_r>
 8006258:	9b02      	ldr	r3, [sp, #8]
 800625a:	2200      	movs	r2, #0
 800625c:	701a      	strb	r2, [r3, #0]
 800625e:	b01c      	add	sp, #112	; 0x70
 8006260:	f85d eb04 	ldr.w	lr, [sp], #4
 8006264:	b003      	add	sp, #12
 8006266:	4770      	bx	lr
 8006268:	1fffca70 	.word	0x1fffca70

0800626c <strlen>:
 800626c:	4603      	mov	r3, r0
 800626e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006272:	2a00      	cmp	r2, #0
 8006274:	d1fb      	bne.n	800626e <strlen+0x2>
 8006276:	1a18      	subs	r0, r3, r0
 8006278:	3801      	subs	r0, #1
 800627a:	4770      	bx	lr

0800627c <quorem>:
 800627c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006280:	6903      	ldr	r3, [r0, #16]
 8006282:	690c      	ldr	r4, [r1, #16]
 8006284:	42a3      	cmp	r3, r4
 8006286:	4680      	mov	r8, r0
 8006288:	f2c0 8081 	blt.w	800638e <quorem+0x112>
 800628c:	3c01      	subs	r4, #1
 800628e:	f101 0714 	add.w	r7, r1, #20
 8006292:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 8006296:	f100 0614 	add.w	r6, r0, #20
 800629a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800629e:	eb06 030e 	add.w	r3, r6, lr
 80062a2:	9301      	str	r3, [sp, #4]
 80062a4:	3501      	adds	r5, #1
 80062a6:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
 80062aa:	fbb3 f5f5 	udiv	r5, r3, r5
 80062ae:	eb07 090e 	add.w	r9, r7, lr
 80062b2:	b3c5      	cbz	r5, 8006326 <quorem+0xaa>
 80062b4:	f04f 0a00 	mov.w	sl, #0
 80062b8:	4638      	mov	r0, r7
 80062ba:	46b4      	mov	ip, r6
 80062bc:	46d3      	mov	fp, sl
 80062be:	f850 3b04 	ldr.w	r3, [r0], #4
 80062c2:	b29a      	uxth	r2, r3
 80062c4:	0c1b      	lsrs	r3, r3, #16
 80062c6:	fb02 a205 	mla	r2, r2, r5, sl
 80062ca:	436b      	muls	r3, r5
 80062cc:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 80062d0:	b292      	uxth	r2, r2
 80062d2:	ebc2 020b 	rsb	r2, r2, fp
 80062d6:	f8bc b000 	ldrh.w	fp, [ip]
 80062da:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80062de:	fa12 f28b 	uxtah	r2, r2, fp
 80062e2:	fa1f fb83 	uxth.w	fp, r3
 80062e6:	f8dc 3000 	ldr.w	r3, [ip]
 80062ea:	ebcb 4313 	rsb	r3, fp, r3, lsr #16
 80062ee:	eb03 4322 	add.w	r3, r3, r2, asr #16
 80062f2:	b292      	uxth	r2, r2
 80062f4:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80062f8:	4548      	cmp	r0, r9
 80062fa:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80062fe:	f84c 2b04 	str.w	r2, [ip], #4
 8006302:	d9dc      	bls.n	80062be <quorem+0x42>
 8006304:	f856 300e 	ldr.w	r3, [r6, lr]
 8006308:	b96b      	cbnz	r3, 8006326 <quorem+0xaa>
 800630a:	9b01      	ldr	r3, [sp, #4]
 800630c:	3b04      	subs	r3, #4
 800630e:	42b3      	cmp	r3, r6
 8006310:	461a      	mov	r2, r3
 8006312:	d802      	bhi.n	800631a <quorem+0x9e>
 8006314:	f8c8 4010 	str.w	r4, [r8, #16]
 8006318:	e005      	b.n	8006326 <quorem+0xaa>
 800631a:	6812      	ldr	r2, [r2, #0]
 800631c:	3b04      	subs	r3, #4
 800631e:	2a00      	cmp	r2, #0
 8006320:	d1f8      	bne.n	8006314 <quorem+0x98>
 8006322:	3c01      	subs	r4, #1
 8006324:	e7f3      	b.n	800630e <quorem+0x92>
 8006326:	4640      	mov	r0, r8
 8006328:	f001 f827 	bl	800737a <__mcmp>
 800632c:	2800      	cmp	r0, #0
 800632e:	db2c      	blt.n	800638a <quorem+0x10e>
 8006330:	3501      	adds	r5, #1
 8006332:	4630      	mov	r0, r6
 8006334:	f04f 0e00 	mov.w	lr, #0
 8006338:	f857 1b04 	ldr.w	r1, [r7], #4
 800633c:	f8d0 c000 	ldr.w	ip, [r0]
 8006340:	b28a      	uxth	r2, r1
 8006342:	ebc2 030e 	rsb	r3, r2, lr
 8006346:	0c09      	lsrs	r1, r1, #16
 8006348:	fa13 f38c 	uxtah	r3, r3, ip
 800634c:	ebc1 421c 	rsb	r2, r1, ip, lsr #16
 8006350:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006354:	b29b      	uxth	r3, r3
 8006356:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800635a:	454f      	cmp	r7, r9
 800635c:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8006360:	f840 3b04 	str.w	r3, [r0], #4
 8006364:	d9e8      	bls.n	8006338 <quorem+0xbc>
 8006366:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800636a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800636e:	b962      	cbnz	r2, 800638a <quorem+0x10e>
 8006370:	3b04      	subs	r3, #4
 8006372:	42b3      	cmp	r3, r6
 8006374:	461a      	mov	r2, r3
 8006376:	d802      	bhi.n	800637e <quorem+0x102>
 8006378:	f8c8 4010 	str.w	r4, [r8, #16]
 800637c:	e005      	b.n	800638a <quorem+0x10e>
 800637e:	6812      	ldr	r2, [r2, #0]
 8006380:	3b04      	subs	r3, #4
 8006382:	2a00      	cmp	r2, #0
 8006384:	d1f8      	bne.n	8006378 <quorem+0xfc>
 8006386:	3c01      	subs	r4, #1
 8006388:	e7f3      	b.n	8006372 <quorem+0xf6>
 800638a:	4628      	mov	r0, r5
 800638c:	e000      	b.n	8006390 <quorem+0x114>
 800638e:	2000      	movs	r0, #0
 8006390:	b003      	add	sp, #12
 8006392:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08006398 <_dtoa_r>:
 8006398:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800639c:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800639e:	b097      	sub	sp, #92	; 0x5c
 80063a0:	4682      	mov	sl, r0
 80063a2:	9c23      	ldr	r4, [sp, #140]	; 0x8c
 80063a4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80063a8:	b945      	cbnz	r5, 80063bc <_dtoa_r+0x24>
 80063aa:	2010      	movs	r0, #16
 80063ac:	f000 fdbc 	bl	8006f28 <malloc>
 80063b0:	f8ca 0024 	str.w	r0, [sl, #36]	; 0x24
 80063b4:	6045      	str	r5, [r0, #4]
 80063b6:	6085      	str	r5, [r0, #8]
 80063b8:	6005      	str	r5, [r0, #0]
 80063ba:	60c5      	str	r5, [r0, #12]
 80063bc:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
 80063c0:	6819      	ldr	r1, [r3, #0]
 80063c2:	b159      	cbz	r1, 80063dc <_dtoa_r+0x44>
 80063c4:	685a      	ldr	r2, [r3, #4]
 80063c6:	604a      	str	r2, [r1, #4]
 80063c8:	2301      	movs	r3, #1
 80063ca:	4093      	lsls	r3, r2
 80063cc:	608b      	str	r3, [r1, #8]
 80063ce:	4650      	mov	r0, sl
 80063d0:	f000 fdf6 	bl	8006fc0 <_Bfree>
 80063d4:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
 80063d8:	2200      	movs	r2, #0
 80063da:	601a      	str	r2, [r3, #0]
 80063dc:	9b03      	ldr	r3, [sp, #12]
 80063de:	4aa2      	ldr	r2, [pc, #648]	; (8006668 <_dtoa_r+0x2d0>)
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	bfbf      	itttt	lt
 80063e4:	2301      	movlt	r3, #1
 80063e6:	6023      	strlt	r3, [r4, #0]
 80063e8:	9b03      	ldrlt	r3, [sp, #12]
 80063ea:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80063ee:	bfb8      	it	lt
 80063f0:	9303      	strlt	r3, [sp, #12]
 80063f2:	9f03      	ldr	r7, [sp, #12]
 80063f4:	bfa4      	itt	ge
 80063f6:	2300      	movge	r3, #0
 80063f8:	6023      	strge	r3, [r4, #0]
 80063fa:	f027 4300 	bic.w	r3, r7, #2147483648	; 0x80000000
 80063fe:	0d1b      	lsrs	r3, r3, #20
 8006400:	051b      	lsls	r3, r3, #20
 8006402:	4293      	cmp	r3, r2
 8006404:	d11d      	bne.n	8006442 <_dtoa_r+0xaa>
 8006406:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8006408:	f242 730f 	movw	r3, #9999	; 0x270f
 800640c:	6013      	str	r3, [r2, #0]
 800640e:	9b02      	ldr	r3, [sp, #8]
 8006410:	b943      	cbnz	r3, 8006424 <_dtoa_r+0x8c>
 8006412:	4a96      	ldr	r2, [pc, #600]	; (800666c <_dtoa_r+0x2d4>)
 8006414:	4b96      	ldr	r3, [pc, #600]	; (8006670 <_dtoa_r+0x2d8>)
 8006416:	f3c7 0013 	ubfx	r0, r7, #0, #20
 800641a:	2800      	cmp	r0, #0
 800641c:	bf14      	ite	ne
 800641e:	4618      	movne	r0, r3
 8006420:	4610      	moveq	r0, r2
 8006422:	e000      	b.n	8006426 <_dtoa_r+0x8e>
 8006424:	4892      	ldr	r0, [pc, #584]	; (8006670 <_dtoa_r+0x2d8>)
 8006426:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8006428:	2b00      	cmp	r3, #0
 800642a:	f000 8573 	beq.w	8006f14 <_dtoa_r+0xb7c>
 800642e:	78c3      	ldrb	r3, [r0, #3]
 8006430:	b113      	cbz	r3, 8006438 <_dtoa_r+0xa0>
 8006432:	f100 0308 	add.w	r3, r0, #8
 8006436:	e000      	b.n	800643a <_dtoa_r+0xa2>
 8006438:	1cc3      	adds	r3, r0, #3
 800643a:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800643c:	6013      	str	r3, [r2, #0]
 800643e:	f000 bd69 	b.w	8006f14 <_dtoa_r+0xb7c>
 8006442:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006446:	2200      	movs	r2, #0
 8006448:	4620      	mov	r0, r4
 800644a:	4629      	mov	r1, r5
 800644c:	2300      	movs	r3, #0
 800644e:	f001 fb07 	bl	8007a60 <__aeabi_dcmpeq>
 8006452:	4680      	mov	r8, r0
 8006454:	b158      	cbz	r0, 800646e <_dtoa_r+0xd6>
 8006456:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8006458:	2301      	movs	r3, #1
 800645a:	6013      	str	r3, [r2, #0]
 800645c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800645e:	2b00      	cmp	r3, #0
 8006460:	f000 8546 	beq.w	8006ef0 <_dtoa_r+0xb58>
 8006464:	4883      	ldr	r0, [pc, #524]	; (8006674 <_dtoa_r+0x2dc>)
 8006466:	6018      	str	r0, [r3, #0]
 8006468:	3801      	subs	r0, #1
 800646a:	f000 bd53 	b.w	8006f14 <_dtoa_r+0xb7c>
 800646e:	ab15      	add	r3, sp, #84	; 0x54
 8006470:	9300      	str	r3, [sp, #0]
 8006472:	ab14      	add	r3, sp, #80	; 0x50
 8006474:	9301      	str	r3, [sp, #4]
 8006476:	4650      	mov	r0, sl
 8006478:	4622      	mov	r2, r4
 800647a:	462b      	mov	r3, r5
 800647c:	f000 fff8 	bl	8007470 <__d2b>
 8006480:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8006484:	9007      	str	r0, [sp, #28]
 8006486:	b15e      	cbz	r6, 80064a0 <_dtoa_r+0x108>
 8006488:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800648c:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8006490:	4620      	mov	r0, r4
 8006492:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8006496:	f2a6 36ff 	subw	r6, r6, #1023	; 0x3ff
 800649a:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800649e:	e01d      	b.n	80064dc <_dtoa_r+0x144>
 80064a0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80064a2:	9e14      	ldr	r6, [sp, #80]	; 0x50
 80064a4:	441e      	add	r6, r3
 80064a6:	f46f 6382 	mvn.w	r3, #1040	; 0x410
 80064aa:	429e      	cmp	r6, r3
 80064ac:	bfad      	iteet	ge
 80064ae:	9a02      	ldrge	r2, [sp, #8]
 80064b0:	4b71      	ldrlt	r3, [pc, #452]	; (8006678 <_dtoa_r+0x2e0>)
 80064b2:	9a02      	ldrlt	r2, [sp, #8]
 80064b4:	f206 4312 	addwge	r3, r6, #1042	; 0x412
 80064b8:	bfa3      	ittte	ge
 80064ba:	fa22 f003 	lsrge.w	r0, r2, r3
 80064be:	4b6f      	ldrge	r3, [pc, #444]	; (800667c <_dtoa_r+0x2e4>)
 80064c0:	1b9b      	subge	r3, r3, r6
 80064c2:	1b9b      	sublt	r3, r3, r6
 80064c4:	bfaa      	itet	ge
 80064c6:	409f      	lslge	r7, r3
 80064c8:	fa02 f003 	lsllt.w	r0, r2, r3
 80064cc:	4338      	orrge	r0, r7
 80064ce:	f7fe ff03 	bl	80052d8 <__aeabi_ui2d>
 80064d2:	2301      	movs	r3, #1
 80064d4:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 80064d8:	3e01      	subs	r6, #1
 80064da:	9313      	str	r3, [sp, #76]	; 0x4c
 80064dc:	2200      	movs	r2, #0
 80064de:	4b68      	ldr	r3, [pc, #416]	; (8006680 <_dtoa_r+0x2e8>)
 80064e0:	f7fe fdbc 	bl	800505c <__aeabi_dsub>
 80064e4:	a35a      	add	r3, pc, #360	; (adr r3, 8006650 <_dtoa_r+0x2b8>)
 80064e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064ea:	f7fe ff6b 	bl	80053c4 <__aeabi_dmul>
 80064ee:	a35a      	add	r3, pc, #360	; (adr r3, 8006658 <_dtoa_r+0x2c0>)
 80064f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064f4:	f7fe fdb4 	bl	8005060 <__adddf3>
 80064f8:	4604      	mov	r4, r0
 80064fa:	4630      	mov	r0, r6
 80064fc:	460d      	mov	r5, r1
 80064fe:	f7fe fefb 	bl	80052f8 <__aeabi_i2d>
 8006502:	a357      	add	r3, pc, #348	; (adr r3, 8006660 <_dtoa_r+0x2c8>)
 8006504:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006508:	f7fe ff5c 	bl	80053c4 <__aeabi_dmul>
 800650c:	4602      	mov	r2, r0
 800650e:	460b      	mov	r3, r1
 8006510:	4620      	mov	r0, r4
 8006512:	4629      	mov	r1, r5
 8006514:	f7fe fda4 	bl	8005060 <__adddf3>
 8006518:	4604      	mov	r4, r0
 800651a:	460d      	mov	r5, r1
 800651c:	f001 fad2 	bl	8007ac4 <__aeabi_d2iz>
 8006520:	4629      	mov	r1, r5
 8006522:	4683      	mov	fp, r0
 8006524:	2200      	movs	r2, #0
 8006526:	4620      	mov	r0, r4
 8006528:	2300      	movs	r3, #0
 800652a:	f001 faa3 	bl	8007a74 <__aeabi_dcmplt>
 800652e:	b158      	cbz	r0, 8006548 <_dtoa_r+0x1b0>
 8006530:	4658      	mov	r0, fp
 8006532:	f7fe fee1 	bl	80052f8 <__aeabi_i2d>
 8006536:	4602      	mov	r2, r0
 8006538:	460b      	mov	r3, r1
 800653a:	4620      	mov	r0, r4
 800653c:	4629      	mov	r1, r5
 800653e:	f001 fa8f 	bl	8007a60 <__aeabi_dcmpeq>
 8006542:	b908      	cbnz	r0, 8006548 <_dtoa_r+0x1b0>
 8006544:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006548:	f1bb 0f16 	cmp.w	fp, #22
 800654c:	d80d      	bhi.n	800656a <_dtoa_r+0x1d2>
 800654e:	4b4d      	ldr	r3, [pc, #308]	; (8006684 <_dtoa_r+0x2ec>)
 8006550:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006554:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006558:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800655c:	f001 faa8 	bl	8007ab0 <__aeabi_dcmpgt>
 8006560:	b130      	cbz	r0, 8006570 <_dtoa_r+0x1d8>
 8006562:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006566:	2300      	movs	r3, #0
 8006568:	e000      	b.n	800656c <_dtoa_r+0x1d4>
 800656a:	2301      	movs	r3, #1
 800656c:	9312      	str	r3, [sp, #72]	; 0x48
 800656e:	e000      	b.n	8006572 <_dtoa_r+0x1da>
 8006570:	9012      	str	r0, [sp, #72]	; 0x48
 8006572:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006574:	1b9e      	subs	r6, r3, r6
 8006576:	1e73      	subs	r3, r6, #1
 8006578:	930a      	str	r3, [sp, #40]	; 0x28
 800657a:	bf45      	ittet	mi
 800657c:	425b      	negmi	r3, r3
 800657e:	9309      	strmi	r3, [sp, #36]	; 0x24
 8006580:	2300      	movpl	r3, #0
 8006582:	2300      	movmi	r3, #0
 8006584:	bf4c      	ite	mi
 8006586:	930a      	strmi	r3, [sp, #40]	; 0x28
 8006588:	9309      	strpl	r3, [sp, #36]	; 0x24
 800658a:	f1bb 0f00 	cmp.w	fp, #0
 800658e:	db07      	blt.n	80065a0 <_dtoa_r+0x208>
 8006590:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006592:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
 8006596:	445b      	add	r3, fp
 8006598:	930a      	str	r3, [sp, #40]	; 0x28
 800659a:	2300      	movs	r3, #0
 800659c:	930b      	str	r3, [sp, #44]	; 0x2c
 800659e:	e008      	b.n	80065b2 <_dtoa_r+0x21a>
 80065a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80065a2:	ebcb 0303 	rsb	r3, fp, r3
 80065a6:	9309      	str	r3, [sp, #36]	; 0x24
 80065a8:	f1cb 0300 	rsb	r3, fp, #0
 80065ac:	930b      	str	r3, [sp, #44]	; 0x2c
 80065ae:	2300      	movs	r3, #0
 80065b0:	930d      	str	r3, [sp, #52]	; 0x34
 80065b2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80065b4:	2b09      	cmp	r3, #9
 80065b6:	d828      	bhi.n	800660a <_dtoa_r+0x272>
 80065b8:	2b05      	cmp	r3, #5
 80065ba:	bfc4      	itt	gt
 80065bc:	3b04      	subgt	r3, #4
 80065be:	9320      	strgt	r3, [sp, #128]	; 0x80
 80065c0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80065c2:	f1a3 0302 	sub.w	r3, r3, #2
 80065c6:	bfcc      	ite	gt
 80065c8:	2500      	movgt	r5, #0
 80065ca:	2501      	movle	r5, #1
 80065cc:	2b03      	cmp	r3, #3
 80065ce:	d821      	bhi.n	8006614 <_dtoa_r+0x27c>
 80065d0:	e8df f003 	tbb	[pc, r3]
 80065d4:	10040e02 	.word	0x10040e02
 80065d8:	2300      	movs	r3, #0
 80065da:	e000      	b.n	80065de <_dtoa_r+0x246>
 80065dc:	2301      	movs	r3, #1
 80065de:	930c      	str	r3, [sp, #48]	; 0x30
 80065e0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	dc20      	bgt.n	8006628 <_dtoa_r+0x290>
 80065e6:	2301      	movs	r3, #1
 80065e8:	9306      	str	r3, [sp, #24]
 80065ea:	9305      	str	r3, [sp, #20]
 80065ec:	461a      	mov	r2, r3
 80065ee:	e019      	b.n	8006624 <_dtoa_r+0x28c>
 80065f0:	2300      	movs	r3, #0
 80065f2:	e000      	b.n	80065f6 <_dtoa_r+0x25e>
 80065f4:	2301      	movs	r3, #1
 80065f6:	930c      	str	r3, [sp, #48]	; 0x30
 80065f8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80065fa:	445b      	add	r3, fp
 80065fc:	9306      	str	r3, [sp, #24]
 80065fe:	3301      	adds	r3, #1
 8006600:	2b01      	cmp	r3, #1
 8006602:	9305      	str	r3, [sp, #20]
 8006604:	bfb8      	it	lt
 8006606:	2301      	movlt	r3, #1
 8006608:	e011      	b.n	800662e <_dtoa_r+0x296>
 800660a:	2501      	movs	r5, #1
 800660c:	2300      	movs	r3, #0
 800660e:	9320      	str	r3, [sp, #128]	; 0x80
 8006610:	950c      	str	r5, [sp, #48]	; 0x30
 8006612:	e001      	b.n	8006618 <_dtoa_r+0x280>
 8006614:	2301      	movs	r3, #1
 8006616:	930c      	str	r3, [sp, #48]	; 0x30
 8006618:	f04f 33ff 	mov.w	r3, #4294967295
 800661c:	9306      	str	r3, [sp, #24]
 800661e:	9305      	str	r3, [sp, #20]
 8006620:	2200      	movs	r2, #0
 8006622:	2312      	movs	r3, #18
 8006624:	9221      	str	r2, [sp, #132]	; 0x84
 8006626:	e002      	b.n	800662e <_dtoa_r+0x296>
 8006628:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800662a:	9306      	str	r3, [sp, #24]
 800662c:	9305      	str	r3, [sp, #20]
 800662e:	f8da 4024 	ldr.w	r4, [sl, #36]	; 0x24
 8006632:	2200      	movs	r2, #0
 8006634:	6062      	str	r2, [r4, #4]
 8006636:	2104      	movs	r1, #4
 8006638:	f101 0214 	add.w	r2, r1, #20
 800663c:	429a      	cmp	r2, r3
 800663e:	d823      	bhi.n	8006688 <_dtoa_r+0x2f0>
 8006640:	6862      	ldr	r2, [r4, #4]
 8006642:	3201      	adds	r2, #1
 8006644:	6062      	str	r2, [r4, #4]
 8006646:	0049      	lsls	r1, r1, #1
 8006648:	e7f6      	b.n	8006638 <_dtoa_r+0x2a0>
 800664a:	bf00      	nop
 800664c:	f3af 8000 	nop.w
 8006650:	636f4361 	.word	0x636f4361
 8006654:	3fd287a7 	.word	0x3fd287a7
 8006658:	8b60c8b3 	.word	0x8b60c8b3
 800665c:	3fc68a28 	.word	0x3fc68a28
 8006660:	509f79fb 	.word	0x509f79fb
 8006664:	3fd34413 	.word	0x3fd34413
 8006668:	7ff00000 	.word	0x7ff00000
 800666c:	08007de6 	.word	0x08007de6
 8006670:	08007def 	.word	0x08007def
 8006674:	08007dc3 	.word	0x08007dc3
 8006678:	fffffbee 	.word	0xfffffbee
 800667c:	fffffc0e 	.word	0xfffffc0e
 8006680:	3ff80000 	.word	0x3ff80000
 8006684:	08007e00 	.word	0x08007e00
 8006688:	4650      	mov	r0, sl
 800668a:	6861      	ldr	r1, [r4, #4]
 800668c:	f000 fc63 	bl	8006f56 <_Balloc>
 8006690:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
 8006694:	6020      	str	r0, [r4, #0]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	9308      	str	r3, [sp, #32]
 800669a:	9b05      	ldr	r3, [sp, #20]
 800669c:	2b0e      	cmp	r3, #14
 800669e:	f200 814b 	bhi.w	8006938 <_dtoa_r+0x5a0>
 80066a2:	2d00      	cmp	r5, #0
 80066a4:	f000 8148 	beq.w	8006938 <_dtoa_r+0x5a0>
 80066a8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80066ac:	f1bb 0f00 	cmp.w	fp, #0
 80066b0:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 80066b4:	dd31      	ble.n	800671a <_dtoa_r+0x382>
 80066b6:	4ab3      	ldr	r2, [pc, #716]	; (8006984 <_dtoa_r+0x5ec>)
 80066b8:	f00b 030f 	and.w	r3, fp, #15
 80066bc:	ea4f 172b 	mov.w	r7, fp, asr #4
 80066c0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80066c4:	06f8      	lsls	r0, r7, #27
 80066c6:	e9d3 4500 	ldrd	r4, r5, [r3]
 80066ca:	d50c      	bpl.n	80066e6 <_dtoa_r+0x34e>
 80066cc:	4bae      	ldr	r3, [pc, #696]	; (8006988 <_dtoa_r+0x5f0>)
 80066ce:	ec51 0b17 	vmov	r0, r1, d7
 80066d2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80066d6:	f7fe ff9f 	bl	8005618 <__aeabi_ddiv>
 80066da:	f007 070f 	and.w	r7, r7, #15
 80066de:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80066e2:	2603      	movs	r6, #3
 80066e4:	e000      	b.n	80066e8 <_dtoa_r+0x350>
 80066e6:	2602      	movs	r6, #2
 80066e8:	f8df 829c 	ldr.w	r8, [pc, #668]	; 8006988 <_dtoa_r+0x5f0>
 80066ec:	b177      	cbz	r7, 800670c <_dtoa_r+0x374>
 80066ee:	07f9      	lsls	r1, r7, #31
 80066f0:	d508      	bpl.n	8006704 <_dtoa_r+0x36c>
 80066f2:	4620      	mov	r0, r4
 80066f4:	4629      	mov	r1, r5
 80066f6:	e9d8 2300 	ldrd	r2, r3, [r8]
 80066fa:	f7fe fe63 	bl	80053c4 <__aeabi_dmul>
 80066fe:	3601      	adds	r6, #1
 8006700:	4604      	mov	r4, r0
 8006702:	460d      	mov	r5, r1
 8006704:	107f      	asrs	r7, r7, #1
 8006706:	f108 0808 	add.w	r8, r8, #8
 800670a:	e7ef      	b.n	80066ec <_dtoa_r+0x354>
 800670c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006710:	4622      	mov	r2, r4
 8006712:	462b      	mov	r3, r5
 8006714:	f7fe ff80 	bl	8005618 <__aeabi_ddiv>
 8006718:	e01b      	b.n	8006752 <_dtoa_r+0x3ba>
 800671a:	f1cb 0400 	rsb	r4, fp, #0
 800671e:	b1dc      	cbz	r4, 8006758 <_dtoa_r+0x3c0>
 8006720:	4b98      	ldr	r3, [pc, #608]	; (8006984 <_dtoa_r+0x5ec>)
 8006722:	4d99      	ldr	r5, [pc, #612]	; (8006988 <_dtoa_r+0x5f0>)
 8006724:	f004 020f 	and.w	r2, r4, #15
 8006728:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800672c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006730:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006734:	f7fe fe46 	bl	80053c4 <__aeabi_dmul>
 8006738:	1124      	asrs	r4, r4, #4
 800673a:	2602      	movs	r6, #2
 800673c:	b14c      	cbz	r4, 8006752 <_dtoa_r+0x3ba>
 800673e:	07e2      	lsls	r2, r4, #31
 8006740:	d504      	bpl.n	800674c <_dtoa_r+0x3b4>
 8006742:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006746:	3601      	adds	r6, #1
 8006748:	f7fe fe3c 	bl	80053c4 <__aeabi_dmul>
 800674c:	1064      	asrs	r4, r4, #1
 800674e:	3508      	adds	r5, #8
 8006750:	e7f4      	b.n	800673c <_dtoa_r+0x3a4>
 8006752:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006756:	e000      	b.n	800675a <_dtoa_r+0x3c2>
 8006758:	2602      	movs	r6, #2
 800675a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800675c:	b1db      	cbz	r3, 8006796 <_dtoa_r+0x3fe>
 800675e:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006762:	2200      	movs	r2, #0
 8006764:	4620      	mov	r0, r4
 8006766:	4629      	mov	r1, r5
 8006768:	4b88      	ldr	r3, [pc, #544]	; (800698c <_dtoa_r+0x5f4>)
 800676a:	f001 f983 	bl	8007a74 <__aeabi_dcmplt>
 800676e:	b190      	cbz	r0, 8006796 <_dtoa_r+0x3fe>
 8006770:	9b05      	ldr	r3, [sp, #20]
 8006772:	b183      	cbz	r3, 8006796 <_dtoa_r+0x3fe>
 8006774:	9b06      	ldr	r3, [sp, #24]
 8006776:	2b00      	cmp	r3, #0
 8006778:	f340 80da 	ble.w	8006930 <_dtoa_r+0x598>
 800677c:	4629      	mov	r1, r5
 800677e:	4620      	mov	r0, r4
 8006780:	2200      	movs	r2, #0
 8006782:	4b83      	ldr	r3, [pc, #524]	; (8006990 <_dtoa_r+0x5f8>)
 8006784:	f7fe fe1e 	bl	80053c4 <__aeabi_dmul>
 8006788:	f10b 37ff 	add.w	r7, fp, #4294967295
 800678c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006790:	3601      	adds	r6, #1
 8006792:	9d06      	ldr	r5, [sp, #24]
 8006794:	e001      	b.n	800679a <_dtoa_r+0x402>
 8006796:	9d05      	ldr	r5, [sp, #20]
 8006798:	465f      	mov	r7, fp
 800679a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800679e:	4630      	mov	r0, r6
 80067a0:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 80067a4:	f7fe fda8 	bl	80052f8 <__aeabi_i2d>
 80067a8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80067ac:	f7fe fe0a 	bl	80053c4 <__aeabi_dmul>
 80067b0:	2200      	movs	r2, #0
 80067b2:	4b78      	ldr	r3, [pc, #480]	; (8006994 <_dtoa_r+0x5fc>)
 80067b4:	f7fe fc54 	bl	8005060 <__adddf3>
 80067b8:	4680      	mov	r8, r0
 80067ba:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
 80067be:	b9cd      	cbnz	r5, 80067f4 <_dtoa_r+0x45c>
 80067c0:	2200      	movs	r2, #0
 80067c2:	4b75      	ldr	r3, [pc, #468]	; (8006998 <_dtoa_r+0x600>)
 80067c4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80067c8:	f7fe fc48 	bl	800505c <__aeabi_dsub>
 80067cc:	4642      	mov	r2, r8
 80067ce:	464b      	mov	r3, r9
 80067d0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80067d4:	f001 f96c 	bl	8007ab0 <__aeabi_dcmpgt>
 80067d8:	2800      	cmp	r0, #0
 80067da:	f040 8246 	bne.w	8006c6a <_dtoa_r+0x8d2>
 80067de:	4642      	mov	r2, r8
 80067e0:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80067e4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80067e8:	f001 f944 	bl	8007a74 <__aeabi_dcmplt>
 80067ec:	2800      	cmp	r0, #0
 80067ee:	f040 8236 	bne.w	8006c5e <_dtoa_r+0x8c6>
 80067f2:	e09d      	b.n	8006930 <_dtoa_r+0x598>
 80067f4:	4b63      	ldr	r3, [pc, #396]	; (8006984 <_dtoa_r+0x5ec>)
 80067f6:	990c      	ldr	r1, [sp, #48]	; 0x30
 80067f8:	1e6a      	subs	r2, r5, #1
 80067fa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80067fe:	2900      	cmp	r1, #0
 8006800:	d049      	beq.n	8006896 <_dtoa_r+0x4fe>
 8006802:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006806:	2000      	movs	r0, #0
 8006808:	4964      	ldr	r1, [pc, #400]	; (800699c <_dtoa_r+0x604>)
 800680a:	f7fe ff05 	bl	8005618 <__aeabi_ddiv>
 800680e:	4642      	mov	r2, r8
 8006810:	464b      	mov	r3, r9
 8006812:	f7fe fc23 	bl	800505c <__aeabi_dsub>
 8006816:	e9dd 890e 	ldrd	r8, r9, [sp, #56]	; 0x38
 800681a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800681e:	9c08      	ldr	r4, [sp, #32]
 8006820:	4649      	mov	r1, r9
 8006822:	4640      	mov	r0, r8
 8006824:	f001 f94e 	bl	8007ac4 <__aeabi_d2iz>
 8006828:	4606      	mov	r6, r0
 800682a:	f7fe fd65 	bl	80052f8 <__aeabi_i2d>
 800682e:	4602      	mov	r2, r0
 8006830:	460b      	mov	r3, r1
 8006832:	4640      	mov	r0, r8
 8006834:	4649      	mov	r1, r9
 8006836:	f7fe fc11 	bl	800505c <__aeabi_dsub>
 800683a:	3630      	adds	r6, #48	; 0x30
 800683c:	f804 6b01 	strb.w	r6, [r4], #1
 8006840:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006844:	4680      	mov	r8, r0
 8006846:	4689      	mov	r9, r1
 8006848:	f001 f914 	bl	8007a74 <__aeabi_dcmplt>
 800684c:	2800      	cmp	r0, #0
 800684e:	f040 8340 	bne.w	8006ed2 <_dtoa_r+0xb3a>
 8006852:	4642      	mov	r2, r8
 8006854:	464b      	mov	r3, r9
 8006856:	2000      	movs	r0, #0
 8006858:	494c      	ldr	r1, [pc, #304]	; (800698c <_dtoa_r+0x5f4>)
 800685a:	f7fe fbff 	bl	800505c <__aeabi_dsub>
 800685e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006862:	f001 f907 	bl	8007a74 <__aeabi_dcmplt>
 8006866:	2800      	cmp	r0, #0
 8006868:	f040 80d3 	bne.w	8006a12 <_dtoa_r+0x67a>
 800686c:	9b08      	ldr	r3, [sp, #32]
 800686e:	1ae3      	subs	r3, r4, r3
 8006870:	42ab      	cmp	r3, r5
 8006872:	da5d      	bge.n	8006930 <_dtoa_r+0x598>
 8006874:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006878:	2200      	movs	r2, #0
 800687a:	4b45      	ldr	r3, [pc, #276]	; (8006990 <_dtoa_r+0x5f8>)
 800687c:	f7fe fda2 	bl	80053c4 <__aeabi_dmul>
 8006880:	2200      	movs	r2, #0
 8006882:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006886:	4b42      	ldr	r3, [pc, #264]	; (8006990 <_dtoa_r+0x5f8>)
 8006888:	4640      	mov	r0, r8
 800688a:	4649      	mov	r1, r9
 800688c:	f7fe fd9a 	bl	80053c4 <__aeabi_dmul>
 8006890:	4680      	mov	r8, r0
 8006892:	4689      	mov	r9, r1
 8006894:	e7c4      	b.n	8006820 <_dtoa_r+0x488>
 8006896:	e9d3 0100 	ldrd	r0, r1, [r3]
 800689a:	4642      	mov	r2, r8
 800689c:	464b      	mov	r3, r9
 800689e:	f7fe fd91 	bl	80053c4 <__aeabi_dmul>
 80068a2:	9b08      	ldr	r3, [sp, #32]
 80068a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80068a8:	e9dd 890e 	ldrd	r8, r9, [sp, #56]	; 0x38
 80068ac:	195c      	adds	r4, r3, r5
 80068ae:	461d      	mov	r5, r3
 80068b0:	4649      	mov	r1, r9
 80068b2:	4640      	mov	r0, r8
 80068b4:	f001 f906 	bl	8007ac4 <__aeabi_d2iz>
 80068b8:	4606      	mov	r6, r0
 80068ba:	f7fe fd1d 	bl	80052f8 <__aeabi_i2d>
 80068be:	3630      	adds	r6, #48	; 0x30
 80068c0:	4602      	mov	r2, r0
 80068c2:	460b      	mov	r3, r1
 80068c4:	4640      	mov	r0, r8
 80068c6:	4649      	mov	r1, r9
 80068c8:	f7fe fbc8 	bl	800505c <__aeabi_dsub>
 80068cc:	f805 6b01 	strb.w	r6, [r5], #1
 80068d0:	42a5      	cmp	r5, r4
 80068d2:	4680      	mov	r8, r0
 80068d4:	4689      	mov	r9, r1
 80068d6:	d124      	bne.n	8006922 <_dtoa_r+0x58a>
 80068d8:	2200      	movs	r2, #0
 80068da:	4b30      	ldr	r3, [pc, #192]	; (800699c <_dtoa_r+0x604>)
 80068dc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80068e0:	f7fe fbbe 	bl	8005060 <__adddf3>
 80068e4:	4602      	mov	r2, r0
 80068e6:	460b      	mov	r3, r1
 80068e8:	4640      	mov	r0, r8
 80068ea:	4649      	mov	r1, r9
 80068ec:	f001 f8e0 	bl	8007ab0 <__aeabi_dcmpgt>
 80068f0:	2800      	cmp	r0, #0
 80068f2:	f040 808e 	bne.w	8006a12 <_dtoa_r+0x67a>
 80068f6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80068fa:	2000      	movs	r0, #0
 80068fc:	4927      	ldr	r1, [pc, #156]	; (800699c <_dtoa_r+0x604>)
 80068fe:	f7fe fbad 	bl	800505c <__aeabi_dsub>
 8006902:	4602      	mov	r2, r0
 8006904:	460b      	mov	r3, r1
 8006906:	4640      	mov	r0, r8
 8006908:	4649      	mov	r1, r9
 800690a:	f001 f8b3 	bl	8007a74 <__aeabi_dcmplt>
 800690e:	b178      	cbz	r0, 8006930 <_dtoa_r+0x598>
 8006910:	f814 3c01 	ldrb.w	r3, [r4, #-1]
 8006914:	2b30      	cmp	r3, #48	; 0x30
 8006916:	f104 32ff 	add.w	r2, r4, #4294967295
 800691a:	f040 82da 	bne.w	8006ed2 <_dtoa_r+0xb3a>
 800691e:	4614      	mov	r4, r2
 8006920:	e7f6      	b.n	8006910 <_dtoa_r+0x578>
 8006922:	2200      	movs	r2, #0
 8006924:	4b1a      	ldr	r3, [pc, #104]	; (8006990 <_dtoa_r+0x5f8>)
 8006926:	f7fe fd4d 	bl	80053c4 <__aeabi_dmul>
 800692a:	4680      	mov	r8, r0
 800692c:	4689      	mov	r9, r1
 800692e:	e7bf      	b.n	80068b0 <_dtoa_r+0x518>
 8006930:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006934:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006938:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800693a:	2b00      	cmp	r3, #0
 800693c:	f2c0 808b 	blt.w	8006a56 <_dtoa_r+0x6be>
 8006940:	f1bb 0f0e 	cmp.w	fp, #14
 8006944:	f300 8087 	bgt.w	8006a56 <_dtoa_r+0x6be>
 8006948:	4b0e      	ldr	r3, [pc, #56]	; (8006984 <_dtoa_r+0x5ec>)
 800694a:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800694e:	e9d3 6700 	ldrd	r6, r7, [r3]
 8006952:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006954:	2b00      	cmp	r3, #0
 8006956:	da23      	bge.n	80069a0 <_dtoa_r+0x608>
 8006958:	9b05      	ldr	r3, [sp, #20]
 800695a:	2b00      	cmp	r3, #0
 800695c:	dc20      	bgt.n	80069a0 <_dtoa_r+0x608>
 800695e:	f040 817d 	bne.w	8006c5c <_dtoa_r+0x8c4>
 8006962:	4630      	mov	r0, r6
 8006964:	2200      	movs	r2, #0
 8006966:	4b0c      	ldr	r3, [pc, #48]	; (8006998 <_dtoa_r+0x600>)
 8006968:	4639      	mov	r1, r7
 800696a:	f7fe fd2b 	bl	80053c4 <__aeabi_dmul>
 800696e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006972:	f001 f893 	bl	8007a9c <__aeabi_dcmpge>
 8006976:	9d05      	ldr	r5, [sp, #20]
 8006978:	462e      	mov	r6, r5
 800697a:	2800      	cmp	r0, #0
 800697c:	f040 8170 	bne.w	8006c60 <_dtoa_r+0x8c8>
 8006980:	e175      	b.n	8006c6e <_dtoa_r+0x8d6>
 8006982:	bf00      	nop
 8006984:	08007e00 	.word	0x08007e00
 8006988:	08007ec8 	.word	0x08007ec8
 800698c:	3ff00000 	.word	0x3ff00000
 8006990:	40240000 	.word	0x40240000
 8006994:	401c0000 	.word	0x401c0000
 8006998:	40140000 	.word	0x40140000
 800699c:	3fe00000 	.word	0x3fe00000
 80069a0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80069a4:	9c08      	ldr	r4, [sp, #32]
 80069a6:	4632      	mov	r2, r6
 80069a8:	463b      	mov	r3, r7
 80069aa:	4640      	mov	r0, r8
 80069ac:	4649      	mov	r1, r9
 80069ae:	f7fe fe33 	bl	8005618 <__aeabi_ddiv>
 80069b2:	f001 f887 	bl	8007ac4 <__aeabi_d2iz>
 80069b6:	4605      	mov	r5, r0
 80069b8:	f7fe fc9e 	bl	80052f8 <__aeabi_i2d>
 80069bc:	4632      	mov	r2, r6
 80069be:	463b      	mov	r3, r7
 80069c0:	f7fe fd00 	bl	80053c4 <__aeabi_dmul>
 80069c4:	460b      	mov	r3, r1
 80069c6:	4602      	mov	r2, r0
 80069c8:	4649      	mov	r1, r9
 80069ca:	4640      	mov	r0, r8
 80069cc:	f7fe fb46 	bl	800505c <__aeabi_dsub>
 80069d0:	f105 0e30 	add.w	lr, r5, #48	; 0x30
 80069d4:	9b08      	ldr	r3, [sp, #32]
 80069d6:	f804 eb01 	strb.w	lr, [r4], #1
 80069da:	ebc3 0e04 	rsb	lr, r3, r4
 80069de:	9b05      	ldr	r3, [sp, #20]
 80069e0:	459e      	cmp	lr, r3
 80069e2:	d12b      	bne.n	8006a3c <_dtoa_r+0x6a4>
 80069e4:	4602      	mov	r2, r0
 80069e6:	460b      	mov	r3, r1
 80069e8:	f7fe fb3a 	bl	8005060 <__adddf3>
 80069ec:	4632      	mov	r2, r6
 80069ee:	463b      	mov	r3, r7
 80069f0:	4680      	mov	r8, r0
 80069f2:	4689      	mov	r9, r1
 80069f4:	f001 f85c 	bl	8007ab0 <__aeabi_dcmpgt>
 80069f8:	b970      	cbnz	r0, 8006a18 <_dtoa_r+0x680>
 80069fa:	4640      	mov	r0, r8
 80069fc:	4649      	mov	r1, r9
 80069fe:	4632      	mov	r2, r6
 8006a00:	463b      	mov	r3, r7
 8006a02:	f001 f82d 	bl	8007a60 <__aeabi_dcmpeq>
 8006a06:	2800      	cmp	r0, #0
 8006a08:	f000 8264 	beq.w	8006ed4 <_dtoa_r+0xb3c>
 8006a0c:	07eb      	lsls	r3, r5, #31
 8006a0e:	d403      	bmi.n	8006a18 <_dtoa_r+0x680>
 8006a10:	e260      	b.n	8006ed4 <_dtoa_r+0xb3c>
 8006a12:	46bb      	mov	fp, r7
 8006a14:	e000      	b.n	8006a18 <_dtoa_r+0x680>
 8006a16:	461c      	mov	r4, r3
 8006a18:	f814 2c01 	ldrb.w	r2, [r4, #-1]
 8006a1c:	2a39      	cmp	r2, #57	; 0x39
 8006a1e:	f104 33ff 	add.w	r3, r4, #4294967295
 8006a22:	d107      	bne.n	8006a34 <_dtoa_r+0x69c>
 8006a24:	9a08      	ldr	r2, [sp, #32]
 8006a26:	4293      	cmp	r3, r2
 8006a28:	d1f5      	bne.n	8006a16 <_dtoa_r+0x67e>
 8006a2a:	2330      	movs	r3, #48	; 0x30
 8006a2c:	7013      	strb	r3, [r2, #0]
 8006a2e:	f10b 0b01 	add.w	fp, fp, #1
 8006a32:	4613      	mov	r3, r2
 8006a34:	781a      	ldrb	r2, [r3, #0]
 8006a36:	3201      	adds	r2, #1
 8006a38:	701a      	strb	r2, [r3, #0]
 8006a3a:	e24b      	b.n	8006ed4 <_dtoa_r+0xb3c>
 8006a3c:	2200      	movs	r2, #0
 8006a3e:	4ba4      	ldr	r3, [pc, #656]	; (8006cd0 <_dtoa_r+0x938>)
 8006a40:	f7fe fcc0 	bl	80053c4 <__aeabi_dmul>
 8006a44:	2200      	movs	r2, #0
 8006a46:	2300      	movs	r3, #0
 8006a48:	4680      	mov	r8, r0
 8006a4a:	4689      	mov	r9, r1
 8006a4c:	f001 f808 	bl	8007a60 <__aeabi_dcmpeq>
 8006a50:	2800      	cmp	r0, #0
 8006a52:	d0a8      	beq.n	80069a6 <_dtoa_r+0x60e>
 8006a54:	e23e      	b.n	8006ed4 <_dtoa_r+0xb3c>
 8006a56:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006a58:	2a00      	cmp	r2, #0
 8006a5a:	d032      	beq.n	8006ac2 <_dtoa_r+0x72a>
 8006a5c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006a5e:	2a01      	cmp	r2, #1
 8006a60:	dc0a      	bgt.n	8006a78 <_dtoa_r+0x6e0>
 8006a62:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006a64:	b112      	cbz	r2, 8006a6c <_dtoa_r+0x6d4>
 8006a66:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006a6a:	e002      	b.n	8006a72 <_dtoa_r+0x6da>
 8006a6c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006a6e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006a72:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8006a74:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8006a76:	e018      	b.n	8006aaa <_dtoa_r+0x712>
 8006a78:	9b05      	ldr	r3, [sp, #20]
 8006a7a:	1e5d      	subs	r5, r3, #1
 8006a7c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006a7e:	42ab      	cmp	r3, r5
 8006a80:	bfbf      	itttt	lt
 8006a82:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 8006a84:	950b      	strlt	r5, [sp, #44]	; 0x2c
 8006a86:	1aea      	sublt	r2, r5, r3
 8006a88:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8006a8a:	bfb6      	itet	lt
 8006a8c:	189b      	addlt	r3, r3, r2
 8006a8e:	1b5d      	subge	r5, r3, r5
 8006a90:	930d      	strlt	r3, [sp, #52]	; 0x34
 8006a92:	9b05      	ldr	r3, [sp, #20]
 8006a94:	bfb8      	it	lt
 8006a96:	2500      	movlt	r5, #0
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	bfb9      	ittee	lt
 8006a9c:	9b09      	ldrlt	r3, [sp, #36]	; 0x24
 8006a9e:	9a05      	ldrlt	r2, [sp, #20]
 8006aa0:	9c09      	ldrge	r4, [sp, #36]	; 0x24
 8006aa2:	9b05      	ldrge	r3, [sp, #20]
 8006aa4:	bfbc      	itt	lt
 8006aa6:	1a9c      	sublt	r4, r3, r2
 8006aa8:	2300      	movlt	r3, #0
 8006aaa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006aac:	441a      	add	r2, r3
 8006aae:	9209      	str	r2, [sp, #36]	; 0x24
 8006ab0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006ab2:	4650      	mov	r0, sl
 8006ab4:	441a      	add	r2, r3
 8006ab6:	2101      	movs	r1, #1
 8006ab8:	920a      	str	r2, [sp, #40]	; 0x28
 8006aba:	f000 fb23 	bl	8007104 <__i2b>
 8006abe:	4606      	mov	r6, r0
 8006ac0:	e002      	b.n	8006ac8 <_dtoa_r+0x730>
 8006ac2:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8006ac4:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8006ac6:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8006ac8:	b164      	cbz	r4, 8006ae4 <_dtoa_r+0x74c>
 8006aca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	dd09      	ble.n	8006ae4 <_dtoa_r+0x74c>
 8006ad0:	42a3      	cmp	r3, r4
 8006ad2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006ad4:	bfa8      	it	ge
 8006ad6:	4623      	movge	r3, r4
 8006ad8:	1ad2      	subs	r2, r2, r3
 8006ada:	9209      	str	r2, [sp, #36]	; 0x24
 8006adc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006ade:	1ae4      	subs	r4, r4, r3
 8006ae0:	1ad3      	subs	r3, r2, r3
 8006ae2:	930a      	str	r3, [sp, #40]	; 0x28
 8006ae4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	dd20      	ble.n	8006b2c <_dtoa_r+0x794>
 8006aea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006aec:	b1c3      	cbz	r3, 8006b20 <_dtoa_r+0x788>
 8006aee:	2d00      	cmp	r5, #0
 8006af0:	dd10      	ble.n	8006b14 <_dtoa_r+0x77c>
 8006af2:	4631      	mov	r1, r6
 8006af4:	462a      	mov	r2, r5
 8006af6:	4650      	mov	r0, sl
 8006af8:	f000 fb9e 	bl	8007238 <__pow5mult>
 8006afc:	4606      	mov	r6, r0
 8006afe:	4631      	mov	r1, r6
 8006b00:	9a07      	ldr	r2, [sp, #28]
 8006b02:	4650      	mov	r0, sl
 8006b04:	f000 fb07 	bl	8007116 <__multiply>
 8006b08:	9907      	ldr	r1, [sp, #28]
 8006b0a:	4607      	mov	r7, r0
 8006b0c:	4650      	mov	r0, sl
 8006b0e:	f000 fa57 	bl	8006fc0 <_Bfree>
 8006b12:	9707      	str	r7, [sp, #28]
 8006b14:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006b16:	1b5a      	subs	r2, r3, r5
 8006b18:	d008      	beq.n	8006b2c <_dtoa_r+0x794>
 8006b1a:	4650      	mov	r0, sl
 8006b1c:	9907      	ldr	r1, [sp, #28]
 8006b1e:	e002      	b.n	8006b26 <_dtoa_r+0x78e>
 8006b20:	9907      	ldr	r1, [sp, #28]
 8006b22:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006b24:	4650      	mov	r0, sl
 8006b26:	f000 fb87 	bl	8007238 <__pow5mult>
 8006b2a:	9007      	str	r0, [sp, #28]
 8006b2c:	4650      	mov	r0, sl
 8006b2e:	2101      	movs	r1, #1
 8006b30:	f000 fae8 	bl	8007104 <__i2b>
 8006b34:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	4605      	mov	r5, r0
 8006b3a:	dd0a      	ble.n	8006b52 <_dtoa_r+0x7ba>
 8006b3c:	4629      	mov	r1, r5
 8006b3e:	461a      	mov	r2, r3
 8006b40:	4650      	mov	r0, sl
 8006b42:	f000 fb79 	bl	8007238 <__pow5mult>
 8006b46:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8006b48:	2b01      	cmp	r3, #1
 8006b4a:	4605      	mov	r5, r0
 8006b4c:	dd04      	ble.n	8006b58 <_dtoa_r+0x7c0>
 8006b4e:	2700      	movs	r7, #0
 8006b50:	e01b      	b.n	8006b8a <_dtoa_r+0x7f2>
 8006b52:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8006b54:	2b01      	cmp	r3, #1
 8006b56:	dc13      	bgt.n	8006b80 <_dtoa_r+0x7e8>
 8006b58:	9b02      	ldr	r3, [sp, #8]
 8006b5a:	b98b      	cbnz	r3, 8006b80 <_dtoa_r+0x7e8>
 8006b5c:	9b03      	ldr	r3, [sp, #12]
 8006b5e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006b62:	b97b      	cbnz	r3, 8006b84 <_dtoa_r+0x7ec>
 8006b64:	9b03      	ldr	r3, [sp, #12]
 8006b66:	f023 4700 	bic.w	r7, r3, #2147483648	; 0x80000000
 8006b6a:	0d3f      	lsrs	r7, r7, #20
 8006b6c:	053f      	lsls	r7, r7, #20
 8006b6e:	b157      	cbz	r7, 8006b86 <_dtoa_r+0x7ee>
 8006b70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b72:	3301      	adds	r3, #1
 8006b74:	9309      	str	r3, [sp, #36]	; 0x24
 8006b76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b78:	3301      	adds	r3, #1
 8006b7a:	930a      	str	r3, [sp, #40]	; 0x28
 8006b7c:	2701      	movs	r7, #1
 8006b7e:	e002      	b.n	8006b86 <_dtoa_r+0x7ee>
 8006b80:	2700      	movs	r7, #0
 8006b82:	e000      	b.n	8006b86 <_dtoa_r+0x7ee>
 8006b84:	9f02      	ldr	r7, [sp, #8]
 8006b86:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006b88:	b143      	cbz	r3, 8006b9c <_dtoa_r+0x804>
 8006b8a:	692b      	ldr	r3, [r5, #16]
 8006b8c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8006b90:	6918      	ldr	r0, [r3, #16]
 8006b92:	f000 fa6a 	bl	800706a <__hi0bits>
 8006b96:	f1c0 0020 	rsb	r0, r0, #32
 8006b9a:	e000      	b.n	8006b9e <_dtoa_r+0x806>
 8006b9c:	2001      	movs	r0, #1
 8006b9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ba0:	4418      	add	r0, r3
 8006ba2:	f010 001f 	ands.w	r0, r0, #31
 8006ba6:	d008      	beq.n	8006bba <_dtoa_r+0x822>
 8006ba8:	f1c0 0320 	rsb	r3, r0, #32
 8006bac:	2b04      	cmp	r3, #4
 8006bae:	dd02      	ble.n	8006bb6 <_dtoa_r+0x81e>
 8006bb0:	f1c0 001c 	rsb	r0, r0, #28
 8006bb4:	e002      	b.n	8006bbc <_dtoa_r+0x824>
 8006bb6:	d008      	beq.n	8006bca <_dtoa_r+0x832>
 8006bb8:	4618      	mov	r0, r3
 8006bba:	301c      	adds	r0, #28
 8006bbc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006bbe:	4403      	add	r3, r0
 8006bc0:	9309      	str	r3, [sp, #36]	; 0x24
 8006bc2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006bc4:	4403      	add	r3, r0
 8006bc6:	4404      	add	r4, r0
 8006bc8:	930a      	str	r3, [sp, #40]	; 0x28
 8006bca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	dd05      	ble.n	8006bdc <_dtoa_r+0x844>
 8006bd0:	4650      	mov	r0, sl
 8006bd2:	9907      	ldr	r1, [sp, #28]
 8006bd4:	461a      	mov	r2, r3
 8006bd6:	f000 fb7d 	bl	80072d4 <__lshift>
 8006bda:	9007      	str	r0, [sp, #28]
 8006bdc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	dd05      	ble.n	8006bee <_dtoa_r+0x856>
 8006be2:	4629      	mov	r1, r5
 8006be4:	4650      	mov	r0, sl
 8006be6:	461a      	mov	r2, r3
 8006be8:	f000 fb74 	bl	80072d4 <__lshift>
 8006bec:	4605      	mov	r5, r0
 8006bee:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006bf0:	b1eb      	cbz	r3, 8006c2e <_dtoa_r+0x896>
 8006bf2:	9807      	ldr	r0, [sp, #28]
 8006bf4:	4629      	mov	r1, r5
 8006bf6:	f000 fbc0 	bl	800737a <__mcmp>
 8006bfa:	2800      	cmp	r0, #0
 8006bfc:	da17      	bge.n	8006c2e <_dtoa_r+0x896>
 8006bfe:	2300      	movs	r3, #0
 8006c00:	4650      	mov	r0, sl
 8006c02:	9907      	ldr	r1, [sp, #28]
 8006c04:	220a      	movs	r2, #10
 8006c06:	f000 f9f2 	bl	8006fee <__multadd>
 8006c0a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006c0c:	9007      	str	r0, [sp, #28]
 8006c0e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	f000 8170 	beq.w	8006ef8 <_dtoa_r+0xb60>
 8006c18:	4631      	mov	r1, r6
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	4650      	mov	r0, sl
 8006c1e:	220a      	movs	r2, #10
 8006c20:	f000 f9e5 	bl	8006fee <__multadd>
 8006c24:	9b06      	ldr	r3, [sp, #24]
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	4606      	mov	r6, r0
 8006c2a:	dc33      	bgt.n	8006c94 <_dtoa_r+0x8fc>
 8006c2c:	e16d      	b.n	8006f0a <_dtoa_r+0xb72>
 8006c2e:	9b05      	ldr	r3, [sp, #20]
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	dc26      	bgt.n	8006c82 <_dtoa_r+0x8ea>
 8006c34:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8006c36:	2b02      	cmp	r3, #2
 8006c38:	dd23      	ble.n	8006c82 <_dtoa_r+0x8ea>
 8006c3a:	9b05      	ldr	r3, [sp, #20]
 8006c3c:	9306      	str	r3, [sp, #24]
 8006c3e:	9b06      	ldr	r3, [sp, #24]
 8006c40:	b973      	cbnz	r3, 8006c60 <_dtoa_r+0x8c8>
 8006c42:	4629      	mov	r1, r5
 8006c44:	2205      	movs	r2, #5
 8006c46:	4650      	mov	r0, sl
 8006c48:	f000 f9d1 	bl	8006fee <__multadd>
 8006c4c:	4605      	mov	r5, r0
 8006c4e:	4629      	mov	r1, r5
 8006c50:	9807      	ldr	r0, [sp, #28]
 8006c52:	f000 fb92 	bl	800737a <__mcmp>
 8006c56:	2800      	cmp	r0, #0
 8006c58:	dc09      	bgt.n	8006c6e <_dtoa_r+0x8d6>
 8006c5a:	e001      	b.n	8006c60 <_dtoa_r+0x8c8>
 8006c5c:	2500      	movs	r5, #0
 8006c5e:	462e      	mov	r6, r5
 8006c60:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006c62:	9c08      	ldr	r4, [sp, #32]
 8006c64:	ea6f 0b03 	mvn.w	fp, r3
 8006c68:	e008      	b.n	8006c7c <_dtoa_r+0x8e4>
 8006c6a:	46bb      	mov	fp, r7
 8006c6c:	462e      	mov	r6, r5
 8006c6e:	9b08      	ldr	r3, [sp, #32]
 8006c70:	9a08      	ldr	r2, [sp, #32]
 8006c72:	1c5c      	adds	r4, r3, #1
 8006c74:	2331      	movs	r3, #49	; 0x31
 8006c76:	7013      	strb	r3, [r2, #0]
 8006c78:	f10b 0b01 	add.w	fp, fp, #1
 8006c7c:	46b1      	mov	r9, r6
 8006c7e:	2600      	movs	r6, #0
 8006c80:	e114      	b.n	8006eac <_dtoa_r+0xb14>
 8006c82:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006c84:	b923      	cbnz	r3, 8006c90 <_dtoa_r+0x8f8>
 8006c86:	9b05      	ldr	r3, [sp, #20]
 8006c88:	9306      	str	r3, [sp, #24]
 8006c8a:	9f08      	ldr	r7, [sp, #32]
 8006c8c:	9c07      	ldr	r4, [sp, #28]
 8006c8e:	e0cc      	b.n	8006e2a <_dtoa_r+0xa92>
 8006c90:	9b05      	ldr	r3, [sp, #20]
 8006c92:	9306      	str	r3, [sp, #24]
 8006c94:	2c00      	cmp	r4, #0
 8006c96:	dd05      	ble.n	8006ca4 <_dtoa_r+0x90c>
 8006c98:	4631      	mov	r1, r6
 8006c9a:	4650      	mov	r0, sl
 8006c9c:	4622      	mov	r2, r4
 8006c9e:	f000 fb19 	bl	80072d4 <__lshift>
 8006ca2:	4606      	mov	r6, r0
 8006ca4:	b1b7      	cbz	r7, 8006cd4 <_dtoa_r+0x93c>
 8006ca6:	6871      	ldr	r1, [r6, #4]
 8006ca8:	4650      	mov	r0, sl
 8006caa:	f000 f954 	bl	8006f56 <_Balloc>
 8006cae:	6932      	ldr	r2, [r6, #16]
 8006cb0:	3202      	adds	r2, #2
 8006cb2:	4604      	mov	r4, r0
 8006cb4:	f106 010c 	add.w	r1, r6, #12
 8006cb8:	0092      	lsls	r2, r2, #2
 8006cba:	300c      	adds	r0, #12
 8006cbc:	f7fe fe10 	bl	80058e0 <memcpy>
 8006cc0:	4650      	mov	r0, sl
 8006cc2:	4621      	mov	r1, r4
 8006cc4:	2201      	movs	r2, #1
 8006cc6:	f000 fb05 	bl	80072d4 <__lshift>
 8006cca:	4681      	mov	r9, r0
 8006ccc:	e003      	b.n	8006cd6 <_dtoa_r+0x93e>
 8006cce:	bf00      	nop
 8006cd0:	40240000 	.word	0x40240000
 8006cd4:	46b1      	mov	r9, r6
 8006cd6:	9f08      	ldr	r7, [sp, #32]
 8006cd8:	9c07      	ldr	r4, [sp, #28]
 8006cda:	4629      	mov	r1, r5
 8006cdc:	4620      	mov	r0, r4
 8006cde:	f7ff facd 	bl	800627c <quorem>
 8006ce2:	4631      	mov	r1, r6
 8006ce4:	9009      	str	r0, [sp, #36]	; 0x24
 8006ce6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8006cea:	4620      	mov	r0, r4
 8006cec:	f000 fb45 	bl	800737a <__mcmp>
 8006cf0:	464a      	mov	r2, r9
 8006cf2:	9005      	str	r0, [sp, #20]
 8006cf4:	4629      	mov	r1, r5
 8006cf6:	4650      	mov	r0, sl
 8006cf8:	f000 fb5b 	bl	80073b2 <__mdiff>
 8006cfc:	68c2      	ldr	r2, [r0, #12]
 8006cfe:	4603      	mov	r3, r0
 8006d00:	b93a      	cbnz	r2, 8006d12 <_dtoa_r+0x97a>
 8006d02:	4619      	mov	r1, r3
 8006d04:	4620      	mov	r0, r4
 8006d06:	9307      	str	r3, [sp, #28]
 8006d08:	f000 fb37 	bl	800737a <__mcmp>
 8006d0c:	9b07      	ldr	r3, [sp, #28]
 8006d0e:	4602      	mov	r2, r0
 8006d10:	e000      	b.n	8006d14 <_dtoa_r+0x97c>
 8006d12:	2201      	movs	r2, #1
 8006d14:	4650      	mov	r0, sl
 8006d16:	4619      	mov	r1, r3
 8006d18:	9207      	str	r2, [sp, #28]
 8006d1a:	f000 f951 	bl	8006fc0 <_Bfree>
 8006d1e:	9a07      	ldr	r2, [sp, #28]
 8006d20:	b9a2      	cbnz	r2, 8006d4c <_dtoa_r+0x9b4>
 8006d22:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8006d24:	b993      	cbnz	r3, 8006d4c <_dtoa_r+0x9b4>
 8006d26:	9b02      	ldr	r3, [sp, #8]
 8006d28:	f003 0301 	and.w	r3, r3, #1
 8006d2c:	b973      	cbnz	r3, 8006d4c <_dtoa_r+0x9b4>
 8006d2e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8006d32:	463b      	mov	r3, r7
 8006d34:	9407      	str	r4, [sp, #28]
 8006d36:	d040      	beq.n	8006dba <_dtoa_r+0xa22>
 8006d38:	9b05      	ldr	r3, [sp, #20]
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	bfc8      	it	gt
 8006d3e:	9b09      	ldrgt	r3, [sp, #36]	; 0x24
 8006d40:	f107 0401 	add.w	r4, r7, #1
 8006d44:	bfc8      	it	gt
 8006d46:	f103 0831 	addgt.w	r8, r3, #49	; 0x31
 8006d4a:	e03d      	b.n	8006dc8 <_dtoa_r+0xa30>
 8006d4c:	9b05      	ldr	r3, [sp, #20]
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	da04      	bge.n	8006d5c <_dtoa_r+0x9c4>
 8006d52:	2a00      	cmp	r2, #0
 8006d54:	46c4      	mov	ip, r8
 8006d56:	9407      	str	r4, [sp, #28]
 8006d58:	dc08      	bgt.n	8006d6c <_dtoa_r+0x9d4>
 8006d5a:	e021      	b.n	8006da0 <_dtoa_r+0xa08>
 8006d5c:	d124      	bne.n	8006da8 <_dtoa_r+0xa10>
 8006d5e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8006d60:	bb13      	cbnz	r3, 8006da8 <_dtoa_r+0xa10>
 8006d62:	9b02      	ldr	r3, [sp, #8]
 8006d64:	f003 0301 	and.w	r3, r3, #1
 8006d68:	b9f3      	cbnz	r3, 8006da8 <_dtoa_r+0xa10>
 8006d6a:	e7f2      	b.n	8006d52 <_dtoa_r+0x9ba>
 8006d6c:	4621      	mov	r1, r4
 8006d6e:	2201      	movs	r2, #1
 8006d70:	4650      	mov	r0, sl
 8006d72:	9705      	str	r7, [sp, #20]
 8006d74:	f8cd 8008 	str.w	r8, [sp, #8]
 8006d78:	f000 faac 	bl	80072d4 <__lshift>
 8006d7c:	4629      	mov	r1, r5
 8006d7e:	9007      	str	r0, [sp, #28]
 8006d80:	f000 fafb 	bl	800737a <__mcmp>
 8006d84:	2800      	cmp	r0, #0
 8006d86:	f8dd c008 	ldr.w	ip, [sp, #8]
 8006d8a:	9b05      	ldr	r3, [sp, #20]
 8006d8c:	dc03      	bgt.n	8006d96 <_dtoa_r+0x9fe>
 8006d8e:	d107      	bne.n	8006da0 <_dtoa_r+0xa08>
 8006d90:	f018 0f01 	tst.w	r8, #1
 8006d94:	d004      	beq.n	8006da0 <_dtoa_r+0xa08>
 8006d96:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8006d9a:	d00e      	beq.n	8006dba <_dtoa_r+0xa22>
 8006d9c:	f108 0c01 	add.w	ip, r8, #1
 8006da0:	1c7c      	adds	r4, r7, #1
 8006da2:	f887 c000 	strb.w	ip, [r7]
 8006da6:	e081      	b.n	8006eac <_dtoa_r+0xb14>
 8006da8:	2a00      	cmp	r2, #0
 8006daa:	f107 0201 	add.w	r2, r7, #1
 8006dae:	dd0e      	ble.n	8006dce <_dtoa_r+0xa36>
 8006db0:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8006db4:	463b      	mov	r3, r7
 8006db6:	9407      	str	r4, [sp, #28]
 8006db8:	d103      	bne.n	8006dc2 <_dtoa_r+0xa2a>
 8006dba:	2239      	movs	r2, #57	; 0x39
 8006dbc:	3701      	adds	r7, #1
 8006dbe:	701a      	strb	r2, [r3, #0]
 8006dc0:	e057      	b.n	8006e72 <_dtoa_r+0xada>
 8006dc2:	4614      	mov	r4, r2
 8006dc4:	f108 0801 	add.w	r8, r8, #1
 8006dc8:	f887 8000 	strb.w	r8, [r7]
 8006dcc:	e06e      	b.n	8006eac <_dtoa_r+0xb14>
 8006dce:	9b08      	ldr	r3, [sp, #32]
 8006dd0:	f802 8c01 	strb.w	r8, [r2, #-1]
 8006dd4:	1ad3      	subs	r3, r2, r3
 8006dd6:	4617      	mov	r7, r2
 8006dd8:	9a06      	ldr	r2, [sp, #24]
 8006dda:	4293      	cmp	r3, r2
 8006ddc:	d03a      	beq.n	8006e54 <_dtoa_r+0xabc>
 8006dde:	4621      	mov	r1, r4
 8006de0:	220a      	movs	r2, #10
 8006de2:	2300      	movs	r3, #0
 8006de4:	4650      	mov	r0, sl
 8006de6:	f000 f902 	bl	8006fee <__multadd>
 8006dea:	454e      	cmp	r6, r9
 8006dec:	4604      	mov	r4, r0
 8006dee:	4631      	mov	r1, r6
 8006df0:	4650      	mov	r0, sl
 8006df2:	f04f 020a 	mov.w	r2, #10
 8006df6:	f04f 0300 	mov.w	r3, #0
 8006dfa:	d104      	bne.n	8006e06 <_dtoa_r+0xa6e>
 8006dfc:	f000 f8f7 	bl	8006fee <__multadd>
 8006e00:	4606      	mov	r6, r0
 8006e02:	4681      	mov	r9, r0
 8006e04:	e769      	b.n	8006cda <_dtoa_r+0x942>
 8006e06:	f000 f8f2 	bl	8006fee <__multadd>
 8006e0a:	4649      	mov	r1, r9
 8006e0c:	4606      	mov	r6, r0
 8006e0e:	220a      	movs	r2, #10
 8006e10:	4650      	mov	r0, sl
 8006e12:	2300      	movs	r3, #0
 8006e14:	f000 f8eb 	bl	8006fee <__multadd>
 8006e18:	4681      	mov	r9, r0
 8006e1a:	e75e      	b.n	8006cda <_dtoa_r+0x942>
 8006e1c:	4621      	mov	r1, r4
 8006e1e:	4650      	mov	r0, sl
 8006e20:	220a      	movs	r2, #10
 8006e22:	2300      	movs	r3, #0
 8006e24:	f000 f8e3 	bl	8006fee <__multadd>
 8006e28:	4604      	mov	r4, r0
 8006e2a:	4620      	mov	r0, r4
 8006e2c:	4629      	mov	r1, r5
 8006e2e:	f7ff fa25 	bl	800627c <quorem>
 8006e32:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8006e36:	f807 8b01 	strb.w	r8, [r7], #1
 8006e3a:	9b08      	ldr	r3, [sp, #32]
 8006e3c:	9a06      	ldr	r2, [sp, #24]
 8006e3e:	1afb      	subs	r3, r7, r3
 8006e40:	4293      	cmp	r3, r2
 8006e42:	dbeb      	blt.n	8006e1c <_dtoa_r+0xa84>
 8006e44:	9b08      	ldr	r3, [sp, #32]
 8006e46:	2a01      	cmp	r2, #1
 8006e48:	bfac      	ite	ge
 8006e4a:	189b      	addge	r3, r3, r2
 8006e4c:	3301      	addlt	r3, #1
 8006e4e:	46b1      	mov	r9, r6
 8006e50:	461f      	mov	r7, r3
 8006e52:	2600      	movs	r6, #0
 8006e54:	4621      	mov	r1, r4
 8006e56:	2201      	movs	r2, #1
 8006e58:	4650      	mov	r0, sl
 8006e5a:	f000 fa3b 	bl	80072d4 <__lshift>
 8006e5e:	4629      	mov	r1, r5
 8006e60:	9007      	str	r0, [sp, #28]
 8006e62:	f000 fa8a 	bl	800737a <__mcmp>
 8006e66:	2800      	cmp	r0, #0
 8006e68:	dc03      	bgt.n	8006e72 <_dtoa_r+0xada>
 8006e6a:	d116      	bne.n	8006e9a <_dtoa_r+0xb02>
 8006e6c:	f018 0f01 	tst.w	r8, #1
 8006e70:	d013      	beq.n	8006e9a <_dtoa_r+0xb02>
 8006e72:	463c      	mov	r4, r7
 8006e74:	f814 3c01 	ldrb.w	r3, [r4, #-1]
 8006e78:	2b39      	cmp	r3, #57	; 0x39
 8006e7a:	f104 32ff 	add.w	r2, r4, #4294967295
 8006e7e:	d109      	bne.n	8006e94 <_dtoa_r+0xafc>
 8006e80:	9b08      	ldr	r3, [sp, #32]
 8006e82:	429a      	cmp	r2, r3
 8006e84:	d104      	bne.n	8006e90 <_dtoa_r+0xaf8>
 8006e86:	f10b 0b01 	add.w	fp, fp, #1
 8006e8a:	2331      	movs	r3, #49	; 0x31
 8006e8c:	9a08      	ldr	r2, [sp, #32]
 8006e8e:	e002      	b.n	8006e96 <_dtoa_r+0xafe>
 8006e90:	4614      	mov	r4, r2
 8006e92:	e7ef      	b.n	8006e74 <_dtoa_r+0xadc>
 8006e94:	3301      	adds	r3, #1
 8006e96:	7013      	strb	r3, [r2, #0]
 8006e98:	e008      	b.n	8006eac <_dtoa_r+0xb14>
 8006e9a:	463c      	mov	r4, r7
 8006e9c:	f814 3c01 	ldrb.w	r3, [r4, #-1]
 8006ea0:	2b30      	cmp	r3, #48	; 0x30
 8006ea2:	f104 32ff 	add.w	r2, r4, #4294967295
 8006ea6:	d101      	bne.n	8006eac <_dtoa_r+0xb14>
 8006ea8:	4614      	mov	r4, r2
 8006eaa:	e7f7      	b.n	8006e9c <_dtoa_r+0xb04>
 8006eac:	4650      	mov	r0, sl
 8006eae:	4629      	mov	r1, r5
 8006eb0:	f000 f886 	bl	8006fc0 <_Bfree>
 8006eb4:	f1b9 0f00 	cmp.w	r9, #0
 8006eb8:	d00c      	beq.n	8006ed4 <_dtoa_r+0xb3c>
 8006eba:	b12e      	cbz	r6, 8006ec8 <_dtoa_r+0xb30>
 8006ebc:	454e      	cmp	r6, r9
 8006ebe:	d003      	beq.n	8006ec8 <_dtoa_r+0xb30>
 8006ec0:	4650      	mov	r0, sl
 8006ec2:	4631      	mov	r1, r6
 8006ec4:	f000 f87c 	bl	8006fc0 <_Bfree>
 8006ec8:	4650      	mov	r0, sl
 8006eca:	4649      	mov	r1, r9
 8006ecc:	f000 f878 	bl	8006fc0 <_Bfree>
 8006ed0:	e000      	b.n	8006ed4 <_dtoa_r+0xb3c>
 8006ed2:	46bb      	mov	fp, r7
 8006ed4:	4650      	mov	r0, sl
 8006ed6:	9907      	ldr	r1, [sp, #28]
 8006ed8:	f000 f872 	bl	8006fc0 <_Bfree>
 8006edc:	2300      	movs	r3, #0
 8006ede:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8006ee0:	7023      	strb	r3, [r4, #0]
 8006ee2:	f10b 0301 	add.w	r3, fp, #1
 8006ee6:	6013      	str	r3, [r2, #0]
 8006ee8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8006eea:	b11b      	cbz	r3, 8006ef4 <_dtoa_r+0xb5c>
 8006eec:	601c      	str	r4, [r3, #0]
 8006eee:	e001      	b.n	8006ef4 <_dtoa_r+0xb5c>
 8006ef0:	480a      	ldr	r0, [pc, #40]	; (8006f1c <_dtoa_r+0xb84>)
 8006ef2:	e00f      	b.n	8006f14 <_dtoa_r+0xb7c>
 8006ef4:	9808      	ldr	r0, [sp, #32]
 8006ef6:	e00d      	b.n	8006f14 <_dtoa_r+0xb7c>
 8006ef8:	9b06      	ldr	r3, [sp, #24]
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	f73f aec5 	bgt.w	8006c8a <_dtoa_r+0x8f2>
 8006f00:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8006f02:	2b02      	cmp	r3, #2
 8006f04:	f73f ae9b 	bgt.w	8006c3e <_dtoa_r+0x8a6>
 8006f08:	e6bf      	b.n	8006c8a <_dtoa_r+0x8f2>
 8006f0a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8006f0c:	2b02      	cmp	r3, #2
 8006f0e:	f73f ae96 	bgt.w	8006c3e <_dtoa_r+0x8a6>
 8006f12:	e6bf      	b.n	8006c94 <_dtoa_r+0x8fc>
 8006f14:	b017      	add	sp, #92	; 0x5c
 8006f16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f1a:	bf00      	nop
 8006f1c:	08007dc2 	.word	0x08007dc2

08006f20 <_localeconv_r>:
 8006f20:	4800      	ldr	r0, [pc, #0]	; (8006f24 <_localeconv_r+0x4>)
 8006f22:	4770      	bx	lr
 8006f24:	1fffca74 	.word	0x1fffca74

08006f28 <malloc>:
 8006f28:	4b02      	ldr	r3, [pc, #8]	; (8006f34 <malloc+0xc>)
 8006f2a:	4601      	mov	r1, r0
 8006f2c:	6818      	ldr	r0, [r3, #0]
 8006f2e:	f000 bb43 	b.w	80075b8 <_malloc_r>
 8006f32:	bf00      	nop
 8006f34:	1fffca70 	.word	0x1fffca70

08006f38 <memchr>:
 8006f38:	b510      	push	{r4, lr}
 8006f3a:	b2c9      	uxtb	r1, r1
 8006f3c:	4402      	add	r2, r0
 8006f3e:	4290      	cmp	r0, r2
 8006f40:	4603      	mov	r3, r0
 8006f42:	d006      	beq.n	8006f52 <memchr+0x1a>
 8006f44:	781c      	ldrb	r4, [r3, #0]
 8006f46:	428c      	cmp	r4, r1
 8006f48:	f100 0001 	add.w	r0, r0, #1
 8006f4c:	d1f7      	bne.n	8006f3e <memchr+0x6>
 8006f4e:	4618      	mov	r0, r3
 8006f50:	bd10      	pop	{r4, pc}
 8006f52:	2000      	movs	r0, #0
 8006f54:	bd10      	pop	{r4, pc}

08006f56 <_Balloc>:
 8006f56:	b570      	push	{r4, r5, r6, lr}
 8006f58:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006f5a:	4604      	mov	r4, r0
 8006f5c:	460e      	mov	r6, r1
 8006f5e:	b93d      	cbnz	r5, 8006f70 <_Balloc+0x1a>
 8006f60:	2010      	movs	r0, #16
 8006f62:	f7ff ffe1 	bl	8006f28 <malloc>
 8006f66:	6260      	str	r0, [r4, #36]	; 0x24
 8006f68:	6045      	str	r5, [r0, #4]
 8006f6a:	6085      	str	r5, [r0, #8]
 8006f6c:	6005      	str	r5, [r0, #0]
 8006f6e:	60c5      	str	r5, [r0, #12]
 8006f70:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8006f72:	68eb      	ldr	r3, [r5, #12]
 8006f74:	b143      	cbz	r3, 8006f88 <_Balloc+0x32>
 8006f76:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006f78:	68db      	ldr	r3, [r3, #12]
 8006f7a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8006f7e:	b178      	cbz	r0, 8006fa0 <_Balloc+0x4a>
 8006f80:	6802      	ldr	r2, [r0, #0]
 8006f82:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8006f86:	e017      	b.n	8006fb8 <_Balloc+0x62>
 8006f88:	4620      	mov	r0, r4
 8006f8a:	2104      	movs	r1, #4
 8006f8c:	2221      	movs	r2, #33	; 0x21
 8006f8e:	f000 fac1 	bl	8007514 <_calloc_r>
 8006f92:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006f94:	60e8      	str	r0, [r5, #12]
 8006f96:	68db      	ldr	r3, [r3, #12]
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d1ec      	bne.n	8006f76 <_Balloc+0x20>
 8006f9c:	2000      	movs	r0, #0
 8006f9e:	bd70      	pop	{r4, r5, r6, pc}
 8006fa0:	2101      	movs	r1, #1
 8006fa2:	fa01 f506 	lsl.w	r5, r1, r6
 8006fa6:	1d6a      	adds	r2, r5, #5
 8006fa8:	4620      	mov	r0, r4
 8006faa:	0092      	lsls	r2, r2, #2
 8006fac:	f000 fab2 	bl	8007514 <_calloc_r>
 8006fb0:	2800      	cmp	r0, #0
 8006fb2:	d0f3      	beq.n	8006f9c <_Balloc+0x46>
 8006fb4:	6046      	str	r6, [r0, #4]
 8006fb6:	6085      	str	r5, [r0, #8]
 8006fb8:	2300      	movs	r3, #0
 8006fba:	6103      	str	r3, [r0, #16]
 8006fbc:	60c3      	str	r3, [r0, #12]
 8006fbe:	bd70      	pop	{r4, r5, r6, pc}

08006fc0 <_Bfree>:
 8006fc0:	b570      	push	{r4, r5, r6, lr}
 8006fc2:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8006fc4:	4606      	mov	r6, r0
 8006fc6:	460d      	mov	r5, r1
 8006fc8:	b93c      	cbnz	r4, 8006fda <_Bfree+0x1a>
 8006fca:	2010      	movs	r0, #16
 8006fcc:	f7ff ffac 	bl	8006f28 <malloc>
 8006fd0:	6270      	str	r0, [r6, #36]	; 0x24
 8006fd2:	6044      	str	r4, [r0, #4]
 8006fd4:	6084      	str	r4, [r0, #8]
 8006fd6:	6004      	str	r4, [r0, #0]
 8006fd8:	60c4      	str	r4, [r0, #12]
 8006fda:	b13d      	cbz	r5, 8006fec <_Bfree+0x2c>
 8006fdc:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8006fde:	686a      	ldr	r2, [r5, #4]
 8006fe0:	68db      	ldr	r3, [r3, #12]
 8006fe2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006fe6:	6029      	str	r1, [r5, #0]
 8006fe8:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8006fec:	bd70      	pop	{r4, r5, r6, pc}

08006fee <__multadd>:
 8006fee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ff2:	690f      	ldr	r7, [r1, #16]
 8006ff4:	4698      	mov	r8, r3
 8006ff6:	4606      	mov	r6, r0
 8006ff8:	460c      	mov	r4, r1
 8006ffa:	f101 0e14 	add.w	lr, r1, #20
 8006ffe:	2300      	movs	r3, #0
 8007000:	f8de 0000 	ldr.w	r0, [lr]
 8007004:	b285      	uxth	r5, r0
 8007006:	0c01      	lsrs	r1, r0, #16
 8007008:	fb02 8505 	mla	r5, r2, r5, r8
 800700c:	4351      	muls	r1, r2
 800700e:	eb01 4115 	add.w	r1, r1, r5, lsr #16
 8007012:	3301      	adds	r3, #1
 8007014:	b2ad      	uxth	r5, r5
 8007016:	ea4f 4811 	mov.w	r8, r1, lsr #16
 800701a:	42bb      	cmp	r3, r7
 800701c:	eb05 4101 	add.w	r1, r5, r1, lsl #16
 8007020:	f84e 1b04 	str.w	r1, [lr], #4
 8007024:	dbec      	blt.n	8007000 <__multadd+0x12>
 8007026:	f1b8 0f00 	cmp.w	r8, #0
 800702a:	d01b      	beq.n	8007064 <__multadd+0x76>
 800702c:	68a3      	ldr	r3, [r4, #8]
 800702e:	429f      	cmp	r7, r3
 8007030:	db12      	blt.n	8007058 <__multadd+0x6a>
 8007032:	6861      	ldr	r1, [r4, #4]
 8007034:	4630      	mov	r0, r6
 8007036:	3101      	adds	r1, #1
 8007038:	f7ff ff8d 	bl	8006f56 <_Balloc>
 800703c:	6922      	ldr	r2, [r4, #16]
 800703e:	3202      	adds	r2, #2
 8007040:	f104 010c 	add.w	r1, r4, #12
 8007044:	4605      	mov	r5, r0
 8007046:	0092      	lsls	r2, r2, #2
 8007048:	300c      	adds	r0, #12
 800704a:	f7fe fc49 	bl	80058e0 <memcpy>
 800704e:	4621      	mov	r1, r4
 8007050:	4630      	mov	r0, r6
 8007052:	f7ff ffb5 	bl	8006fc0 <_Bfree>
 8007056:	462c      	mov	r4, r5
 8007058:	eb04 0387 	add.w	r3, r4, r7, lsl #2
 800705c:	3701      	adds	r7, #1
 800705e:	f8c3 8014 	str.w	r8, [r3, #20]
 8007062:	6127      	str	r7, [r4, #16]
 8007064:	4620      	mov	r0, r4
 8007066:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800706a <__hi0bits>:
 800706a:	0c03      	lsrs	r3, r0, #16
 800706c:	041b      	lsls	r3, r3, #16
 800706e:	b913      	cbnz	r3, 8007076 <__hi0bits+0xc>
 8007070:	0400      	lsls	r0, r0, #16
 8007072:	2310      	movs	r3, #16
 8007074:	e000      	b.n	8007078 <__hi0bits+0xe>
 8007076:	2300      	movs	r3, #0
 8007078:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800707c:	bf04      	itt	eq
 800707e:	0200      	lsleq	r0, r0, #8
 8007080:	3308      	addeq	r3, #8
 8007082:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007086:	bf04      	itt	eq
 8007088:	0100      	lsleq	r0, r0, #4
 800708a:	3304      	addeq	r3, #4
 800708c:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007090:	bf04      	itt	eq
 8007092:	0080      	lsleq	r0, r0, #2
 8007094:	3302      	addeq	r3, #2
 8007096:	2800      	cmp	r0, #0
 8007098:	db03      	blt.n	80070a2 <__hi0bits+0x38>
 800709a:	0042      	lsls	r2, r0, #1
 800709c:	d503      	bpl.n	80070a6 <__hi0bits+0x3c>
 800709e:	1c58      	adds	r0, r3, #1
 80070a0:	4770      	bx	lr
 80070a2:	4618      	mov	r0, r3
 80070a4:	4770      	bx	lr
 80070a6:	2020      	movs	r0, #32
 80070a8:	4770      	bx	lr

080070aa <__lo0bits>:
 80070aa:	6803      	ldr	r3, [r0, #0]
 80070ac:	f013 0207 	ands.w	r2, r3, #7
 80070b0:	d00b      	beq.n	80070ca <__lo0bits+0x20>
 80070b2:	07d9      	lsls	r1, r3, #31
 80070b4:	d422      	bmi.n	80070fc <__lo0bits+0x52>
 80070b6:	079a      	lsls	r2, r3, #30
 80070b8:	bf4b      	itete	mi
 80070ba:	085b      	lsrmi	r3, r3, #1
 80070bc:	089b      	lsrpl	r3, r3, #2
 80070be:	6003      	strmi	r3, [r0, #0]
 80070c0:	6003      	strpl	r3, [r0, #0]
 80070c2:	bf4c      	ite	mi
 80070c4:	2001      	movmi	r0, #1
 80070c6:	2002      	movpl	r0, #2
 80070c8:	4770      	bx	lr
 80070ca:	b299      	uxth	r1, r3
 80070cc:	b909      	cbnz	r1, 80070d2 <__lo0bits+0x28>
 80070ce:	0c1b      	lsrs	r3, r3, #16
 80070d0:	2210      	movs	r2, #16
 80070d2:	f013 0fff 	tst.w	r3, #255	; 0xff
 80070d6:	bf04      	itt	eq
 80070d8:	0a1b      	lsreq	r3, r3, #8
 80070da:	3208      	addeq	r2, #8
 80070dc:	0719      	lsls	r1, r3, #28
 80070de:	bf04      	itt	eq
 80070e0:	091b      	lsreq	r3, r3, #4
 80070e2:	3204      	addeq	r2, #4
 80070e4:	0799      	lsls	r1, r3, #30
 80070e6:	bf04      	itt	eq
 80070e8:	089b      	lsreq	r3, r3, #2
 80070ea:	3202      	addeq	r2, #2
 80070ec:	07d9      	lsls	r1, r3, #31
 80070ee:	d402      	bmi.n	80070f6 <__lo0bits+0x4c>
 80070f0:	085b      	lsrs	r3, r3, #1
 80070f2:	d005      	beq.n	8007100 <__lo0bits+0x56>
 80070f4:	3201      	adds	r2, #1
 80070f6:	6003      	str	r3, [r0, #0]
 80070f8:	4610      	mov	r0, r2
 80070fa:	4770      	bx	lr
 80070fc:	2000      	movs	r0, #0
 80070fe:	4770      	bx	lr
 8007100:	2020      	movs	r0, #32
 8007102:	4770      	bx	lr

08007104 <__i2b>:
 8007104:	b510      	push	{r4, lr}
 8007106:	460c      	mov	r4, r1
 8007108:	2101      	movs	r1, #1
 800710a:	f7ff ff24 	bl	8006f56 <_Balloc>
 800710e:	2201      	movs	r2, #1
 8007110:	6144      	str	r4, [r0, #20]
 8007112:	6102      	str	r2, [r0, #16]
 8007114:	bd10      	pop	{r4, pc}

08007116 <__multiply>:
 8007116:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800711a:	4614      	mov	r4, r2
 800711c:	690a      	ldr	r2, [r1, #16]
 800711e:	6923      	ldr	r3, [r4, #16]
 8007120:	429a      	cmp	r2, r3
 8007122:	bfb8      	it	lt
 8007124:	460b      	movlt	r3, r1
 8007126:	4688      	mov	r8, r1
 8007128:	bfbc      	itt	lt
 800712a:	46a0      	movlt	r8, r4
 800712c:	461c      	movlt	r4, r3
 800712e:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007132:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8007136:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800713a:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800713e:	eb07 0609 	add.w	r6, r7, r9
 8007142:	429e      	cmp	r6, r3
 8007144:	bfc8      	it	gt
 8007146:	3101      	addgt	r1, #1
 8007148:	f7ff ff05 	bl	8006f56 <_Balloc>
 800714c:	f100 0514 	add.w	r5, r0, #20
 8007150:	eb05 0c86 	add.w	ip, r5, r6, lsl #2
 8007154:	462b      	mov	r3, r5
 8007156:	4563      	cmp	r3, ip
 8007158:	d203      	bcs.n	8007162 <__multiply+0x4c>
 800715a:	2200      	movs	r2, #0
 800715c:	f843 2b04 	str.w	r2, [r3], #4
 8007160:	e7f9      	b.n	8007156 <__multiply+0x40>
 8007162:	f104 0214 	add.w	r2, r4, #20
 8007166:	f108 0114 	add.w	r1, r8, #20
 800716a:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800716e:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8007172:	9300      	str	r3, [sp, #0]
 8007174:	9b00      	ldr	r3, [sp, #0]
 8007176:	9201      	str	r2, [sp, #4]
 8007178:	429a      	cmp	r2, r3
 800717a:	d257      	bcs.n	800722c <__multiply+0x116>
 800717c:	f8b2 b000 	ldrh.w	fp, [r2]
 8007180:	f1bb 0f00 	cmp.w	fp, #0
 8007184:	d023      	beq.n	80071ce <__multiply+0xb8>
 8007186:	4689      	mov	r9, r1
 8007188:	46ae      	mov	lr, r5
 800718a:	f04f 0800 	mov.w	r8, #0
 800718e:	f859 4b04 	ldr.w	r4, [r9], #4
 8007192:	f8be a000 	ldrh.w	sl, [lr]
 8007196:	b2a3      	uxth	r3, r4
 8007198:	fb0b a303 	mla	r3, fp, r3, sl
 800719c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80071a0:	f8de 4000 	ldr.w	r4, [lr]
 80071a4:	4443      	add	r3, r8
 80071a6:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80071aa:	fb0b 840a 	mla	r4, fp, sl, r8
 80071ae:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80071b2:	46f2      	mov	sl, lr
 80071b4:	b29b      	uxth	r3, r3
 80071b6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80071ba:	454f      	cmp	r7, r9
 80071bc:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80071c0:	f84a 3b04 	str.w	r3, [sl], #4
 80071c4:	d901      	bls.n	80071ca <__multiply+0xb4>
 80071c6:	46d6      	mov	lr, sl
 80071c8:	e7e1      	b.n	800718e <__multiply+0x78>
 80071ca:	f8ce 8004 	str.w	r8, [lr, #4]
 80071ce:	9b01      	ldr	r3, [sp, #4]
 80071d0:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80071d4:	3204      	adds	r2, #4
 80071d6:	f1ba 0f00 	cmp.w	sl, #0
 80071da:	d021      	beq.n	8007220 <__multiply+0x10a>
 80071dc:	682b      	ldr	r3, [r5, #0]
 80071de:	462c      	mov	r4, r5
 80071e0:	4689      	mov	r9, r1
 80071e2:	f04f 0800 	mov.w	r8, #0
 80071e6:	f8b9 e000 	ldrh.w	lr, [r9]
 80071ea:	f8b4 b002 	ldrh.w	fp, [r4, #2]
 80071ee:	fb0a be0e 	mla	lr, sl, lr, fp
 80071f2:	44f0      	add	r8, lr
 80071f4:	46a3      	mov	fp, r4
 80071f6:	b29b      	uxth	r3, r3
 80071f8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80071fc:	f84b 3b04 	str.w	r3, [fp], #4
 8007200:	f859 3b04 	ldr.w	r3, [r9], #4
 8007204:	f8b4 e004 	ldrh.w	lr, [r4, #4]
 8007208:	0c1b      	lsrs	r3, r3, #16
 800720a:	fb0a e303 	mla	r3, sl, r3, lr
 800720e:	eb03 4318 	add.w	r3, r3, r8, lsr #16
 8007212:	45b9      	cmp	r9, r7
 8007214:	ea4f 4813 	mov.w	r8, r3, lsr #16
 8007218:	d201      	bcs.n	800721e <__multiply+0x108>
 800721a:	465c      	mov	r4, fp
 800721c:	e7e3      	b.n	80071e6 <__multiply+0xd0>
 800721e:	6063      	str	r3, [r4, #4]
 8007220:	3504      	adds	r5, #4
 8007222:	e7a7      	b.n	8007174 <__multiply+0x5e>
 8007224:	f85c 3d04 	ldr.w	r3, [ip, #-4]!
 8007228:	b913      	cbnz	r3, 8007230 <__multiply+0x11a>
 800722a:	3e01      	subs	r6, #1
 800722c:	2e00      	cmp	r6, #0
 800722e:	dcf9      	bgt.n	8007224 <__multiply+0x10e>
 8007230:	6106      	str	r6, [r0, #16]
 8007232:	b003      	add	sp, #12
 8007234:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007238 <__pow5mult>:
 8007238:	f012 0303 	ands.w	r3, r2, #3
 800723c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007240:	4606      	mov	r6, r0
 8007242:	460f      	mov	r7, r1
 8007244:	4615      	mov	r5, r2
 8007246:	d007      	beq.n	8007258 <__pow5mult+0x20>
 8007248:	3b01      	subs	r3, #1
 800724a:	4a21      	ldr	r2, [pc, #132]	; (80072d0 <__pow5mult+0x98>)
 800724c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8007250:	2300      	movs	r3, #0
 8007252:	f7ff fecc 	bl	8006fee <__multadd>
 8007256:	4607      	mov	r7, r0
 8007258:	10ad      	asrs	r5, r5, #2
 800725a:	d035      	beq.n	80072c8 <__pow5mult+0x90>
 800725c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800725e:	b93c      	cbnz	r4, 8007270 <__pow5mult+0x38>
 8007260:	2010      	movs	r0, #16
 8007262:	f7ff fe61 	bl	8006f28 <malloc>
 8007266:	6270      	str	r0, [r6, #36]	; 0x24
 8007268:	6044      	str	r4, [r0, #4]
 800726a:	6084      	str	r4, [r0, #8]
 800726c:	6004      	str	r4, [r0, #0]
 800726e:	60c4      	str	r4, [r0, #12]
 8007270:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007274:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007278:	b97c      	cbnz	r4, 800729a <__pow5mult+0x62>
 800727a:	4630      	mov	r0, r6
 800727c:	f240 2171 	movw	r1, #625	; 0x271
 8007280:	f7ff ff40 	bl	8007104 <__i2b>
 8007284:	2300      	movs	r3, #0
 8007286:	f8c8 0008 	str.w	r0, [r8, #8]
 800728a:	4604      	mov	r4, r0
 800728c:	6003      	str	r3, [r0, #0]
 800728e:	e004      	b.n	800729a <__pow5mult+0x62>
 8007290:	106d      	asrs	r5, r5, #1
 8007292:	d019      	beq.n	80072c8 <__pow5mult+0x90>
 8007294:	6820      	ldr	r0, [r4, #0]
 8007296:	b170      	cbz	r0, 80072b6 <__pow5mult+0x7e>
 8007298:	4604      	mov	r4, r0
 800729a:	07eb      	lsls	r3, r5, #31
 800729c:	d5f8      	bpl.n	8007290 <__pow5mult+0x58>
 800729e:	4639      	mov	r1, r7
 80072a0:	4622      	mov	r2, r4
 80072a2:	4630      	mov	r0, r6
 80072a4:	f7ff ff37 	bl	8007116 <__multiply>
 80072a8:	4639      	mov	r1, r7
 80072aa:	4680      	mov	r8, r0
 80072ac:	4630      	mov	r0, r6
 80072ae:	f7ff fe87 	bl	8006fc0 <_Bfree>
 80072b2:	4647      	mov	r7, r8
 80072b4:	e7ec      	b.n	8007290 <__pow5mult+0x58>
 80072b6:	4630      	mov	r0, r6
 80072b8:	4621      	mov	r1, r4
 80072ba:	4622      	mov	r2, r4
 80072bc:	f7ff ff2b 	bl	8007116 <__multiply>
 80072c0:	2300      	movs	r3, #0
 80072c2:	6020      	str	r0, [r4, #0]
 80072c4:	6003      	str	r3, [r0, #0]
 80072c6:	e7e7      	b.n	8007298 <__pow5mult+0x60>
 80072c8:	4638      	mov	r0, r7
 80072ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80072ce:	bf00      	nop
 80072d0:	08007ef0 	.word	0x08007ef0

080072d4 <__lshift>:
 80072d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80072d8:	460c      	mov	r4, r1
 80072da:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80072de:	6923      	ldr	r3, [r4, #16]
 80072e0:	6849      	ldr	r1, [r1, #4]
 80072e2:	eb0a 0903 	add.w	r9, sl, r3
 80072e6:	68a3      	ldr	r3, [r4, #8]
 80072e8:	4607      	mov	r7, r0
 80072ea:	4616      	mov	r6, r2
 80072ec:	f109 0501 	add.w	r5, r9, #1
 80072f0:	429d      	cmp	r5, r3
 80072f2:	dd02      	ble.n	80072fa <__lshift+0x26>
 80072f4:	3101      	adds	r1, #1
 80072f6:	005b      	lsls	r3, r3, #1
 80072f8:	e7fa      	b.n	80072f0 <__lshift+0x1c>
 80072fa:	4638      	mov	r0, r7
 80072fc:	f7ff fe2b 	bl	8006f56 <_Balloc>
 8007300:	2300      	movs	r3, #0
 8007302:	4680      	mov	r8, r0
 8007304:	f100 0114 	add.w	r1, r0, #20
 8007308:	4553      	cmp	r3, sl
 800730a:	da04      	bge.n	8007316 <__lshift+0x42>
 800730c:	2200      	movs	r2, #0
 800730e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8007312:	3301      	adds	r3, #1
 8007314:	e7f8      	b.n	8007308 <__lshift+0x34>
 8007316:	ea2a 73ea 	bic.w	r3, sl, sl, asr #31
 800731a:	6920      	ldr	r0, [r4, #16]
 800731c:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8007320:	f016 021f 	ands.w	r2, r6, #31
 8007324:	f104 0114 	add.w	r1, r4, #20
 8007328:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 800732c:	d014      	beq.n	8007358 <__lshift+0x84>
 800732e:	f1c2 0c20 	rsb	ip, r2, #32
 8007332:	2000      	movs	r0, #0
 8007334:	680e      	ldr	r6, [r1, #0]
 8007336:	4096      	lsls	r6, r2
 8007338:	4330      	orrs	r0, r6
 800733a:	469a      	mov	sl, r3
 800733c:	f843 0b04 	str.w	r0, [r3], #4
 8007340:	f851 0b04 	ldr.w	r0, [r1], #4
 8007344:	4571      	cmp	r1, lr
 8007346:	fa20 f00c 	lsr.w	r0, r0, ip
 800734a:	d3f3      	bcc.n	8007334 <__lshift+0x60>
 800734c:	f8ca 0004 	str.w	r0, [sl, #4]
 8007350:	b148      	cbz	r0, 8007366 <__lshift+0x92>
 8007352:	f109 0502 	add.w	r5, r9, #2
 8007356:	e006      	b.n	8007366 <__lshift+0x92>
 8007358:	3b04      	subs	r3, #4
 800735a:	f851 2b04 	ldr.w	r2, [r1], #4
 800735e:	f843 2f04 	str.w	r2, [r3, #4]!
 8007362:	4571      	cmp	r1, lr
 8007364:	d3f9      	bcc.n	800735a <__lshift+0x86>
 8007366:	3d01      	subs	r5, #1
 8007368:	4638      	mov	r0, r7
 800736a:	f8c8 5010 	str.w	r5, [r8, #16]
 800736e:	4621      	mov	r1, r4
 8007370:	f7ff fe26 	bl	8006fc0 <_Bfree>
 8007374:	4640      	mov	r0, r8
 8007376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800737a <__mcmp>:
 800737a:	6903      	ldr	r3, [r0, #16]
 800737c:	690a      	ldr	r2, [r1, #16]
 800737e:	1a9b      	subs	r3, r3, r2
 8007380:	b510      	push	{r4, lr}
 8007382:	d111      	bne.n	80073a8 <__mcmp+0x2e>
 8007384:	0092      	lsls	r2, r2, #2
 8007386:	3014      	adds	r0, #20
 8007388:	3114      	adds	r1, #20
 800738a:	1883      	adds	r3, r0, r2
 800738c:	440a      	add	r2, r1
 800738e:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 8007392:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8007396:	428c      	cmp	r4, r1
 8007398:	d002      	beq.n	80073a0 <__mcmp+0x26>
 800739a:	d307      	bcc.n	80073ac <__mcmp+0x32>
 800739c:	2001      	movs	r0, #1
 800739e:	bd10      	pop	{r4, pc}
 80073a0:	4283      	cmp	r3, r0
 80073a2:	d8f4      	bhi.n	800738e <__mcmp+0x14>
 80073a4:	2000      	movs	r0, #0
 80073a6:	bd10      	pop	{r4, pc}
 80073a8:	4618      	mov	r0, r3
 80073aa:	bd10      	pop	{r4, pc}
 80073ac:	f04f 30ff 	mov.w	r0, #4294967295
 80073b0:	bd10      	pop	{r4, pc}

080073b2 <__mdiff>:
 80073b2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80073b6:	4607      	mov	r7, r0
 80073b8:	460c      	mov	r4, r1
 80073ba:	4608      	mov	r0, r1
 80073bc:	4611      	mov	r1, r2
 80073be:	4615      	mov	r5, r2
 80073c0:	f7ff ffdb 	bl	800737a <__mcmp>
 80073c4:	1e06      	subs	r6, r0, #0
 80073c6:	d108      	bne.n	80073da <__mdiff+0x28>
 80073c8:	4638      	mov	r0, r7
 80073ca:	4631      	mov	r1, r6
 80073cc:	f7ff fdc3 	bl	8006f56 <_Balloc>
 80073d0:	2301      	movs	r3, #1
 80073d2:	6103      	str	r3, [r0, #16]
 80073d4:	6146      	str	r6, [r0, #20]
 80073d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80073da:	bfbc      	itt	lt
 80073dc:	4623      	movlt	r3, r4
 80073de:	462c      	movlt	r4, r5
 80073e0:	4638      	mov	r0, r7
 80073e2:	6861      	ldr	r1, [r4, #4]
 80073e4:	bfba      	itte	lt
 80073e6:	461d      	movlt	r5, r3
 80073e8:	2601      	movlt	r6, #1
 80073ea:	2600      	movge	r6, #0
 80073ec:	f7ff fdb3 	bl	8006f56 <_Balloc>
 80073f0:	692b      	ldr	r3, [r5, #16]
 80073f2:	60c6      	str	r6, [r0, #12]
 80073f4:	6926      	ldr	r6, [r4, #16]
 80073f6:	f105 0914 	add.w	r9, r5, #20
 80073fa:	3414      	adds	r4, #20
 80073fc:	eb04 0786 	add.w	r7, r4, r6, lsl #2
 8007400:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8007404:	f100 0514 	add.w	r5, r0, #20
 8007408:	f04f 0c00 	mov.w	ip, #0
 800740c:	f854 3b04 	ldr.w	r3, [r4], #4
 8007410:	f859 2b04 	ldr.w	r2, [r9], #4
 8007414:	fa1c f183 	uxtah	r1, ip, r3
 8007418:	fa1f fe82 	uxth.w	lr, r2
 800741c:	0c12      	lsrs	r2, r2, #16
 800741e:	ebce 0101 	rsb	r1, lr, r1
 8007422:	ebc2 4313 	rsb	r3, r2, r3, lsr #16
 8007426:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800742a:	b289      	uxth	r1, r1
 800742c:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8007430:	45c8      	cmp	r8, r9
 8007432:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8007436:	46a6      	mov	lr, r4
 8007438:	f845 3b04 	str.w	r3, [r5], #4
 800743c:	d8e6      	bhi.n	800740c <__mdiff+0x5a>
 800743e:	45be      	cmp	lr, r7
 8007440:	d20e      	bcs.n	8007460 <__mdiff+0xae>
 8007442:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007446:	fa1c f482 	uxtah	r4, ip, r2
 800744a:	0c12      	lsrs	r2, r2, #16
 800744c:	eb02 4224 	add.w	r2, r2, r4, asr #16
 8007450:	b2a4      	uxth	r4, r4
 8007452:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007456:	ea44 4202 	orr.w	r2, r4, r2, lsl #16
 800745a:	f845 2b04 	str.w	r2, [r5], #4
 800745e:	e7ee      	b.n	800743e <__mdiff+0x8c>
 8007460:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8007464:	b90b      	cbnz	r3, 800746a <__mdiff+0xb8>
 8007466:	3e01      	subs	r6, #1
 8007468:	e7fa      	b.n	8007460 <__mdiff+0xae>
 800746a:	6106      	str	r6, [r0, #16]
 800746c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08007470 <__d2b>:
 8007470:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8007474:	2101      	movs	r1, #1
 8007476:	461d      	mov	r5, r3
 8007478:	9f08      	ldr	r7, [sp, #32]
 800747a:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800747c:	4614      	mov	r4, r2
 800747e:	f7ff fd6a 	bl	8006f56 <_Balloc>
 8007482:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8007486:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800748a:	4680      	mov	r8, r0
 800748c:	b10d      	cbz	r5, 8007492 <__d2b+0x22>
 800748e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007492:	9301      	str	r3, [sp, #4]
 8007494:	b1ec      	cbz	r4, 80074d2 <__d2b+0x62>
 8007496:	a802      	add	r0, sp, #8
 8007498:	f840 4d08 	str.w	r4, [r0, #-8]!
 800749c:	f7ff fe05 	bl	80070aa <__lo0bits>
 80074a0:	9b00      	ldr	r3, [sp, #0]
 80074a2:	b150      	cbz	r0, 80074ba <__d2b+0x4a>
 80074a4:	9a01      	ldr	r2, [sp, #4]
 80074a6:	f1c0 0120 	rsb	r1, r0, #32
 80074aa:	fa02 f101 	lsl.w	r1, r2, r1
 80074ae:	430b      	orrs	r3, r1
 80074b0:	40c2      	lsrs	r2, r0
 80074b2:	f8c8 3014 	str.w	r3, [r8, #20]
 80074b6:	9201      	str	r2, [sp, #4]
 80074b8:	e001      	b.n	80074be <__d2b+0x4e>
 80074ba:	f8c8 3014 	str.w	r3, [r8, #20]
 80074be:	9b01      	ldr	r3, [sp, #4]
 80074c0:	f8c8 3018 	str.w	r3, [r8, #24]
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	bf14      	ite	ne
 80074c8:	2402      	movne	r4, #2
 80074ca:	2401      	moveq	r4, #1
 80074cc:	f8c8 4010 	str.w	r4, [r8, #16]
 80074d0:	e009      	b.n	80074e6 <__d2b+0x76>
 80074d2:	a801      	add	r0, sp, #4
 80074d4:	f7ff fde9 	bl	80070aa <__lo0bits>
 80074d8:	2401      	movs	r4, #1
 80074da:	9b01      	ldr	r3, [sp, #4]
 80074dc:	f8c8 3014 	str.w	r3, [r8, #20]
 80074e0:	f8c8 4010 	str.w	r4, [r8, #16]
 80074e4:	3020      	adds	r0, #32
 80074e6:	b135      	cbz	r5, 80074f6 <__d2b+0x86>
 80074e8:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80074ec:	4405      	add	r5, r0
 80074ee:	603d      	str	r5, [r7, #0]
 80074f0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80074f4:	e009      	b.n	800750a <__d2b+0x9a>
 80074f6:	eb08 0384 	add.w	r3, r8, r4, lsl #2
 80074fa:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80074fe:	6038      	str	r0, [r7, #0]
 8007500:	6918      	ldr	r0, [r3, #16]
 8007502:	f7ff fdb2 	bl	800706a <__hi0bits>
 8007506:	ebc0 1044 	rsb	r0, r0, r4, lsl #5
 800750a:	6030      	str	r0, [r6, #0]
 800750c:	4640      	mov	r0, r8
 800750e:	b002      	add	sp, #8
 8007510:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08007514 <_calloc_r>:
 8007514:	b538      	push	{r3, r4, r5, lr}
 8007516:	fb02 f401 	mul.w	r4, r2, r1
 800751a:	4621      	mov	r1, r4
 800751c:	f000 f84c 	bl	80075b8 <_malloc_r>
 8007520:	4605      	mov	r5, r0
 8007522:	b118      	cbz	r0, 800752c <_calloc_r+0x18>
 8007524:	2100      	movs	r1, #0
 8007526:	4622      	mov	r2, r4
 8007528:	f7fe f9e5 	bl	80058f6 <memset>
 800752c:	4628      	mov	r0, r5
 800752e:	bd38      	pop	{r3, r4, r5, pc}

08007530 <_free_r>:
 8007530:	b530      	push	{r4, r5, lr}
 8007532:	2900      	cmp	r1, #0
 8007534:	d03d      	beq.n	80075b2 <_free_r+0x82>
 8007536:	f851 2c04 	ldr.w	r2, [r1, #-4]
 800753a:	1f0b      	subs	r3, r1, #4
 800753c:	491d      	ldr	r1, [pc, #116]	; (80075b4 <_free_r+0x84>)
 800753e:	2a00      	cmp	r2, #0
 8007540:	bfb8      	it	lt
 8007542:	189b      	addlt	r3, r3, r2
 8007544:	680a      	ldr	r2, [r1, #0]
 8007546:	460c      	mov	r4, r1
 8007548:	b912      	cbnz	r2, 8007550 <_free_r+0x20>
 800754a:	605a      	str	r2, [r3, #4]
 800754c:	600b      	str	r3, [r1, #0]
 800754e:	bd30      	pop	{r4, r5, pc}
 8007550:	4293      	cmp	r3, r2
 8007552:	d20d      	bcs.n	8007570 <_free_r+0x40>
 8007554:	6819      	ldr	r1, [r3, #0]
 8007556:	1858      	adds	r0, r3, r1
 8007558:	4290      	cmp	r0, r2
 800755a:	bf01      	itttt	eq
 800755c:	585a      	ldreq	r2, [r3, r1]
 800755e:	1852      	addeq	r2, r2, r1
 8007560:	601a      	streq	r2, [r3, #0]
 8007562:	6842      	ldreq	r2, [r0, #4]
 8007564:	605a      	str	r2, [r3, #4]
 8007566:	6023      	str	r3, [r4, #0]
 8007568:	bd30      	pop	{r4, r5, pc}
 800756a:	4299      	cmp	r1, r3
 800756c:	d803      	bhi.n	8007576 <_free_r+0x46>
 800756e:	460a      	mov	r2, r1
 8007570:	6851      	ldr	r1, [r2, #4]
 8007572:	2900      	cmp	r1, #0
 8007574:	d1f9      	bne.n	800756a <_free_r+0x3a>
 8007576:	6814      	ldr	r4, [r2, #0]
 8007578:	1915      	adds	r5, r2, r4
 800757a:	429d      	cmp	r5, r3
 800757c:	d10a      	bne.n	8007594 <_free_r+0x64>
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	4423      	add	r3, r4
 8007582:	18d0      	adds	r0, r2, r3
 8007584:	4288      	cmp	r0, r1
 8007586:	6013      	str	r3, [r2, #0]
 8007588:	d113      	bne.n	80075b2 <_free_r+0x82>
 800758a:	6808      	ldr	r0, [r1, #0]
 800758c:	4403      	add	r3, r0
 800758e:	6013      	str	r3, [r2, #0]
 8007590:	684b      	ldr	r3, [r1, #4]
 8007592:	e00d      	b.n	80075b0 <_free_r+0x80>
 8007594:	d902      	bls.n	800759c <_free_r+0x6c>
 8007596:	230c      	movs	r3, #12
 8007598:	6003      	str	r3, [r0, #0]
 800759a:	bd30      	pop	{r4, r5, pc}
 800759c:	681c      	ldr	r4, [r3, #0]
 800759e:	1918      	adds	r0, r3, r4
 80075a0:	4288      	cmp	r0, r1
 80075a2:	bf04      	itt	eq
 80075a4:	6808      	ldreq	r0, [r1, #0]
 80075a6:	6849      	ldreq	r1, [r1, #4]
 80075a8:	6059      	str	r1, [r3, #4]
 80075aa:	bf04      	itt	eq
 80075ac:	1900      	addeq	r0, r0, r4
 80075ae:	6018      	streq	r0, [r3, #0]
 80075b0:	6053      	str	r3, [r2, #4]
 80075b2:	bd30      	pop	{r4, r5, pc}
 80075b4:	1fffcb1c 	.word	0x1fffcb1c

080075b8 <_malloc_r>:
 80075b8:	b570      	push	{r4, r5, r6, lr}
 80075ba:	1ccc      	adds	r4, r1, #3
 80075bc:	f024 0403 	bic.w	r4, r4, #3
 80075c0:	3408      	adds	r4, #8
 80075c2:	2c0c      	cmp	r4, #12
 80075c4:	bf38      	it	cc
 80075c6:	240c      	movcc	r4, #12
 80075c8:	2c00      	cmp	r4, #0
 80075ca:	4606      	mov	r6, r0
 80075cc:	da03      	bge.n	80075d6 <_malloc_r+0x1e>
 80075ce:	230c      	movs	r3, #12
 80075d0:	6033      	str	r3, [r6, #0]
 80075d2:	2000      	movs	r0, #0
 80075d4:	bd70      	pop	{r4, r5, r6, pc}
 80075d6:	428c      	cmp	r4, r1
 80075d8:	d3f9      	bcc.n	80075ce <_malloc_r+0x16>
 80075da:	4a20      	ldr	r2, [pc, #128]	; (800765c <_malloc_r+0xa4>)
 80075dc:	6813      	ldr	r3, [r2, #0]
 80075de:	4610      	mov	r0, r2
 80075e0:	4619      	mov	r1, r3
 80075e2:	b1a1      	cbz	r1, 800760e <_malloc_r+0x56>
 80075e4:	680a      	ldr	r2, [r1, #0]
 80075e6:	1b12      	subs	r2, r2, r4
 80075e8:	d40e      	bmi.n	8007608 <_malloc_r+0x50>
 80075ea:	2a0b      	cmp	r2, #11
 80075ec:	d903      	bls.n	80075f6 <_malloc_r+0x3e>
 80075ee:	600a      	str	r2, [r1, #0]
 80075f0:	188b      	adds	r3, r1, r2
 80075f2:	508c      	str	r4, [r1, r2]
 80075f4:	e01f      	b.n	8007636 <_malloc_r+0x7e>
 80075f6:	428b      	cmp	r3, r1
 80075f8:	bf0d      	iteet	eq
 80075fa:	685a      	ldreq	r2, [r3, #4]
 80075fc:	684a      	ldrne	r2, [r1, #4]
 80075fe:	605a      	strne	r2, [r3, #4]
 8007600:	6002      	streq	r2, [r0, #0]
 8007602:	bf18      	it	ne
 8007604:	460b      	movne	r3, r1
 8007606:	e016      	b.n	8007636 <_malloc_r+0x7e>
 8007608:	460b      	mov	r3, r1
 800760a:	6849      	ldr	r1, [r1, #4]
 800760c:	e7e9      	b.n	80075e2 <_malloc_r+0x2a>
 800760e:	4d14      	ldr	r5, [pc, #80]	; (8007660 <_malloc_r+0xa8>)
 8007610:	682b      	ldr	r3, [r5, #0]
 8007612:	b91b      	cbnz	r3, 800761c <_malloc_r+0x64>
 8007614:	4630      	mov	r0, r6
 8007616:	f000 f971 	bl	80078fc <_sbrk_r>
 800761a:	6028      	str	r0, [r5, #0]
 800761c:	4630      	mov	r0, r6
 800761e:	4621      	mov	r1, r4
 8007620:	f000 f96c 	bl	80078fc <_sbrk_r>
 8007624:	1c42      	adds	r2, r0, #1
 8007626:	4603      	mov	r3, r0
 8007628:	d0d1      	beq.n	80075ce <_malloc_r+0x16>
 800762a:	1cc5      	adds	r5, r0, #3
 800762c:	f025 0503 	bic.w	r5, r5, #3
 8007630:	4285      	cmp	r5, r0
 8007632:	d10a      	bne.n	800764a <_malloc_r+0x92>
 8007634:	601c      	str	r4, [r3, #0]
 8007636:	f103 000b 	add.w	r0, r3, #11
 800763a:	1d1a      	adds	r2, r3, #4
 800763c:	f020 0007 	bic.w	r0, r0, #7
 8007640:	1a82      	subs	r2, r0, r2
 8007642:	d00a      	beq.n	800765a <_malloc_r+0xa2>
 8007644:	4251      	negs	r1, r2
 8007646:	5099      	str	r1, [r3, r2]
 8007648:	bd70      	pop	{r4, r5, r6, pc}
 800764a:	4630      	mov	r0, r6
 800764c:	1ae9      	subs	r1, r5, r3
 800764e:	f000 f955 	bl	80078fc <_sbrk_r>
 8007652:	3001      	adds	r0, #1
 8007654:	d0bb      	beq.n	80075ce <_malloc_r+0x16>
 8007656:	462b      	mov	r3, r5
 8007658:	e7ec      	b.n	8007634 <_malloc_r+0x7c>
 800765a:	bd70      	pop	{r4, r5, r6, pc}
 800765c:	1fffcb1c 	.word	0x1fffcb1c
 8007660:	1fffcb18 	.word	0x1fffcb18

08007664 <__ssputs_r>:
 8007664:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007668:	688e      	ldr	r6, [r1, #8]
 800766a:	42b3      	cmp	r3, r6
 800766c:	4682      	mov	sl, r0
 800766e:	460c      	mov	r4, r1
 8007670:	4690      	mov	r8, r2
 8007672:	4699      	mov	r9, r3
 8007674:	d340      	bcc.n	80076f8 <__ssputs_r+0x94>
 8007676:	898a      	ldrh	r2, [r1, #12]
 8007678:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800767c:	d03a      	beq.n	80076f4 <__ssputs_r+0x90>
 800767e:	6825      	ldr	r5, [r4, #0]
 8007680:	6909      	ldr	r1, [r1, #16]
 8007682:	1a6f      	subs	r7, r5, r1
 8007684:	6965      	ldr	r5, [r4, #20]
 8007686:	2302      	movs	r3, #2
 8007688:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800768c:	fb95 f5f3 	sdiv	r5, r5, r3
 8007690:	1c7b      	adds	r3, r7, #1
 8007692:	444b      	add	r3, r9
 8007694:	429d      	cmp	r5, r3
 8007696:	bf38      	it	cc
 8007698:	461d      	movcc	r5, r3
 800769a:	0553      	lsls	r3, r2, #21
 800769c:	d50f      	bpl.n	80076be <__ssputs_r+0x5a>
 800769e:	4629      	mov	r1, r5
 80076a0:	f7ff ff8a 	bl	80075b8 <_malloc_r>
 80076a4:	4606      	mov	r6, r0
 80076a6:	b198      	cbz	r0, 80076d0 <__ssputs_r+0x6c>
 80076a8:	6921      	ldr	r1, [r4, #16]
 80076aa:	463a      	mov	r2, r7
 80076ac:	f7fe f918 	bl	80058e0 <memcpy>
 80076b0:	89a3      	ldrh	r3, [r4, #12]
 80076b2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80076b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80076ba:	81a3      	strh	r3, [r4, #12]
 80076bc:	e013      	b.n	80076e6 <__ssputs_r+0x82>
 80076be:	462a      	mov	r2, r5
 80076c0:	f000 f947 	bl	8007952 <_realloc_r>
 80076c4:	4606      	mov	r6, r0
 80076c6:	b970      	cbnz	r0, 80076e6 <__ssputs_r+0x82>
 80076c8:	4650      	mov	r0, sl
 80076ca:	6921      	ldr	r1, [r4, #16]
 80076cc:	f7ff ff30 	bl	8007530 <_free_r>
 80076d0:	230c      	movs	r3, #12
 80076d2:	f8ca 3000 	str.w	r3, [sl]
 80076d6:	89a3      	ldrh	r3, [r4, #12]
 80076d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80076dc:	81a3      	strh	r3, [r4, #12]
 80076de:	f04f 30ff 	mov.w	r0, #4294967295
 80076e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80076e6:	6126      	str	r6, [r4, #16]
 80076e8:	6165      	str	r5, [r4, #20]
 80076ea:	443e      	add	r6, r7
 80076ec:	1bed      	subs	r5, r5, r7
 80076ee:	6026      	str	r6, [r4, #0]
 80076f0:	60a5      	str	r5, [r4, #8]
 80076f2:	464e      	mov	r6, r9
 80076f4:	45b1      	cmp	r9, r6
 80076f6:	d200      	bcs.n	80076fa <__ssputs_r+0x96>
 80076f8:	464e      	mov	r6, r9
 80076fa:	4632      	mov	r2, r6
 80076fc:	6820      	ldr	r0, [r4, #0]
 80076fe:	4641      	mov	r1, r8
 8007700:	f000 f90c 	bl	800791c <memmove>
 8007704:	68a3      	ldr	r3, [r4, #8]
 8007706:	1b9b      	subs	r3, r3, r6
 8007708:	60a3      	str	r3, [r4, #8]
 800770a:	6823      	ldr	r3, [r4, #0]
 800770c:	441e      	add	r6, r3
 800770e:	6026      	str	r6, [r4, #0]
 8007710:	2000      	movs	r0, #0
 8007712:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

08007718 <_svfiprintf_r>:
 8007718:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800771c:	b09d      	sub	sp, #116	; 0x74
 800771e:	4606      	mov	r6, r0
 8007720:	9303      	str	r3, [sp, #12]
 8007722:	898b      	ldrh	r3, [r1, #12]
 8007724:	061c      	lsls	r4, r3, #24
 8007726:	460d      	mov	r5, r1
 8007728:	4690      	mov	r8, r2
 800772a:	d50c      	bpl.n	8007746 <_svfiprintf_r+0x2e>
 800772c:	690b      	ldr	r3, [r1, #16]
 800772e:	b953      	cbnz	r3, 8007746 <_svfiprintf_r+0x2e>
 8007730:	2140      	movs	r1, #64	; 0x40
 8007732:	f7ff ff41 	bl	80075b8 <_malloc_r>
 8007736:	6028      	str	r0, [r5, #0]
 8007738:	6128      	str	r0, [r5, #16]
 800773a:	b910      	cbnz	r0, 8007742 <_svfiprintf_r+0x2a>
 800773c:	230c      	movs	r3, #12
 800773e:	6033      	str	r3, [r6, #0]
 8007740:	e0cc      	b.n	80078dc <_svfiprintf_r+0x1c4>
 8007742:	2340      	movs	r3, #64	; 0x40
 8007744:	616b      	str	r3, [r5, #20]
 8007746:	2300      	movs	r3, #0
 8007748:	9309      	str	r3, [sp, #36]	; 0x24
 800774a:	2320      	movs	r3, #32
 800774c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007750:	2330      	movs	r3, #48	; 0x30
 8007752:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007756:	4643      	mov	r3, r8
 8007758:	461c      	mov	r4, r3
 800775a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800775e:	b91a      	cbnz	r2, 8007768 <_svfiprintf_r+0x50>
 8007760:	ebb4 0908 	subs.w	r9, r4, r8
 8007764:	d00f      	beq.n	8007786 <_svfiprintf_r+0x6e>
 8007766:	e002      	b.n	800776e <_svfiprintf_r+0x56>
 8007768:	2a25      	cmp	r2, #37	; 0x25
 800776a:	d1f5      	bne.n	8007758 <_svfiprintf_r+0x40>
 800776c:	e7f8      	b.n	8007760 <_svfiprintf_r+0x48>
 800776e:	4630      	mov	r0, r6
 8007770:	4629      	mov	r1, r5
 8007772:	4642      	mov	r2, r8
 8007774:	464b      	mov	r3, r9
 8007776:	f7ff ff75 	bl	8007664 <__ssputs_r>
 800777a:	3001      	adds	r0, #1
 800777c:	f000 80a9 	beq.w	80078d2 <_svfiprintf_r+0x1ba>
 8007780:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007782:	444b      	add	r3, r9
 8007784:	9309      	str	r3, [sp, #36]	; 0x24
 8007786:	7823      	ldrb	r3, [r4, #0]
 8007788:	2b00      	cmp	r3, #0
 800778a:	f000 80a2 	beq.w	80078d2 <_svfiprintf_r+0x1ba>
 800778e:	2300      	movs	r3, #0
 8007790:	f04f 32ff 	mov.w	r2, #4294967295
 8007794:	9304      	str	r3, [sp, #16]
 8007796:	9307      	str	r3, [sp, #28]
 8007798:	9205      	str	r2, [sp, #20]
 800779a:	9306      	str	r3, [sp, #24]
 800779c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80077a0:	931a      	str	r3, [sp, #104]	; 0x68
 80077a2:	f104 0801 	add.w	r8, r4, #1
 80077a6:	4644      	mov	r4, r8
 80077a8:	f8df 9148 	ldr.w	r9, [pc, #328]	; 80078f4 <_svfiprintf_r+0x1dc>
 80077ac:	7821      	ldrb	r1, [r4, #0]
 80077ae:	4648      	mov	r0, r9
 80077b0:	2205      	movs	r2, #5
 80077b2:	f7ff fbc1 	bl	8006f38 <memchr>
 80077b6:	f108 0801 	add.w	r8, r8, #1
 80077ba:	9b04      	ldr	r3, [sp, #16]
 80077bc:	b130      	cbz	r0, 80077cc <_svfiprintf_r+0xb4>
 80077be:	ebc9 0000 	rsb	r0, r9, r0
 80077c2:	2201      	movs	r2, #1
 80077c4:	4082      	lsls	r2, r0
 80077c6:	4313      	orrs	r3, r2
 80077c8:	9304      	str	r3, [sp, #16]
 80077ca:	e7ec      	b.n	80077a6 <_svfiprintf_r+0x8e>
 80077cc:	06d8      	lsls	r0, r3, #27
 80077ce:	bf44      	itt	mi
 80077d0:	2220      	movmi	r2, #32
 80077d2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80077d6:	0719      	lsls	r1, r3, #28
 80077d8:	bf44      	itt	mi
 80077da:	222b      	movmi	r2, #43	; 0x2b
 80077dc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80077e0:	7822      	ldrb	r2, [r4, #0]
 80077e2:	2a2a      	cmp	r2, #42	; 0x2a
 80077e4:	d002      	beq.n	80077ec <_svfiprintf_r+0xd4>
 80077e6:	9907      	ldr	r1, [sp, #28]
 80077e8:	4623      	mov	r3, r4
 80077ea:	e00e      	b.n	800780a <_svfiprintf_r+0xf2>
 80077ec:	9a03      	ldr	r2, [sp, #12]
 80077ee:	1d11      	adds	r1, r2, #4
 80077f0:	6812      	ldr	r2, [r2, #0]
 80077f2:	9103      	str	r1, [sp, #12]
 80077f4:	2a00      	cmp	r2, #0
 80077f6:	bfbb      	ittet	lt
 80077f8:	4252      	neglt	r2, r2
 80077fa:	f043 0302 	orrlt.w	r3, r3, #2
 80077fe:	9207      	strge	r2, [sp, #28]
 8007800:	9207      	strlt	r2, [sp, #28]
 8007802:	bfb8      	it	lt
 8007804:	9304      	strlt	r3, [sp, #16]
 8007806:	3401      	adds	r4, #1
 8007808:	e00a      	b.n	8007820 <_svfiprintf_r+0x108>
 800780a:	461c      	mov	r4, r3
 800780c:	3301      	adds	r3, #1
 800780e:	7822      	ldrb	r2, [r4, #0]
 8007810:	3a30      	subs	r2, #48	; 0x30
 8007812:	2a09      	cmp	r2, #9
 8007814:	d803      	bhi.n	800781e <_svfiprintf_r+0x106>
 8007816:	200a      	movs	r0, #10
 8007818:	fb00 2101 	mla	r1, r0, r1, r2
 800781c:	e7f5      	b.n	800780a <_svfiprintf_r+0xf2>
 800781e:	9107      	str	r1, [sp, #28]
 8007820:	7823      	ldrb	r3, [r4, #0]
 8007822:	2b2e      	cmp	r3, #46	; 0x2e
 8007824:	d11a      	bne.n	800785c <_svfiprintf_r+0x144>
 8007826:	7863      	ldrb	r3, [r4, #1]
 8007828:	2b2a      	cmp	r3, #42	; 0x2a
 800782a:	d10a      	bne.n	8007842 <_svfiprintf_r+0x12a>
 800782c:	9b03      	ldr	r3, [sp, #12]
 800782e:	1d1a      	adds	r2, r3, #4
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	9203      	str	r2, [sp, #12]
 8007834:	2b00      	cmp	r3, #0
 8007836:	bfb8      	it	lt
 8007838:	f04f 33ff 	movlt.w	r3, #4294967295
 800783c:	3402      	adds	r4, #2
 800783e:	9305      	str	r3, [sp, #20]
 8007840:	e00c      	b.n	800785c <_svfiprintf_r+0x144>
 8007842:	1c61      	adds	r1, r4, #1
 8007844:	2200      	movs	r2, #0
 8007846:	460c      	mov	r4, r1
 8007848:	3101      	adds	r1, #1
 800784a:	7823      	ldrb	r3, [r4, #0]
 800784c:	3b30      	subs	r3, #48	; 0x30
 800784e:	2b09      	cmp	r3, #9
 8007850:	d803      	bhi.n	800785a <_svfiprintf_r+0x142>
 8007852:	200a      	movs	r0, #10
 8007854:	fb00 3202 	mla	r2, r0, r2, r3
 8007858:	e7f5      	b.n	8007846 <_svfiprintf_r+0x12e>
 800785a:	9205      	str	r2, [sp, #20]
 800785c:	f8df 8098 	ldr.w	r8, [pc, #152]	; 80078f8 <_svfiprintf_r+0x1e0>
 8007860:	7821      	ldrb	r1, [r4, #0]
 8007862:	4640      	mov	r0, r8
 8007864:	2203      	movs	r2, #3
 8007866:	f7ff fb67 	bl	8006f38 <memchr>
 800786a:	b138      	cbz	r0, 800787c <_svfiprintf_r+0x164>
 800786c:	9a04      	ldr	r2, [sp, #16]
 800786e:	ebc8 0000 	rsb	r0, r8, r0
 8007872:	2340      	movs	r3, #64	; 0x40
 8007874:	4083      	lsls	r3, r0
 8007876:	4313      	orrs	r3, r2
 8007878:	9304      	str	r3, [sp, #16]
 800787a:	3401      	adds	r4, #1
 800787c:	7821      	ldrb	r1, [r4, #0]
 800787e:	481a      	ldr	r0, [pc, #104]	; (80078e8 <_svfiprintf_r+0x1d0>)
 8007880:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007884:	2206      	movs	r2, #6
 8007886:	f104 0801 	add.w	r8, r4, #1
 800788a:	f7ff fb55 	bl	8006f38 <memchr>
 800788e:	b188      	cbz	r0, 80078b4 <_svfiprintf_r+0x19c>
 8007890:	4b16      	ldr	r3, [pc, #88]	; (80078ec <_svfiprintf_r+0x1d4>)
 8007892:	b933      	cbnz	r3, 80078a2 <_svfiprintf_r+0x18a>
 8007894:	9b03      	ldr	r3, [sp, #12]
 8007896:	3307      	adds	r3, #7
 8007898:	f023 0307 	bic.w	r3, r3, #7
 800789c:	3308      	adds	r3, #8
 800789e:	9303      	str	r3, [sp, #12]
 80078a0:	e013      	b.n	80078ca <_svfiprintf_r+0x1b2>
 80078a2:	ab03      	add	r3, sp, #12
 80078a4:	9300      	str	r3, [sp, #0]
 80078a6:	4630      	mov	r0, r6
 80078a8:	a904      	add	r1, sp, #16
 80078aa:	462a      	mov	r2, r5
 80078ac:	4b10      	ldr	r3, [pc, #64]	; (80078f0 <_svfiprintf_r+0x1d8>)
 80078ae:	f7fe f8bb 	bl	8005a28 <_printf_float>
 80078b2:	e007      	b.n	80078c4 <_svfiprintf_r+0x1ac>
 80078b4:	ab03      	add	r3, sp, #12
 80078b6:	9300      	str	r3, [sp, #0]
 80078b8:	4630      	mov	r0, r6
 80078ba:	a904      	add	r1, sp, #16
 80078bc:	462a      	mov	r2, r5
 80078be:	4b0c      	ldr	r3, [pc, #48]	; (80078f0 <_svfiprintf_r+0x1d8>)
 80078c0:	f7fe fb6c 	bl	8005f9c <_printf_i>
 80078c4:	1c42      	adds	r2, r0, #1
 80078c6:	4607      	mov	r7, r0
 80078c8:	d003      	beq.n	80078d2 <_svfiprintf_r+0x1ba>
 80078ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80078cc:	443b      	add	r3, r7
 80078ce:	9309      	str	r3, [sp, #36]	; 0x24
 80078d0:	e741      	b.n	8007756 <_svfiprintf_r+0x3e>
 80078d2:	89ab      	ldrh	r3, [r5, #12]
 80078d4:	065b      	lsls	r3, r3, #25
 80078d6:	d401      	bmi.n	80078dc <_svfiprintf_r+0x1c4>
 80078d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80078da:	e001      	b.n	80078e0 <_svfiprintf_r+0x1c8>
 80078dc:	f04f 30ff 	mov.w	r0, #4294967295
 80078e0:	b01d      	add	sp, #116	; 0x74
 80078e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80078e6:	bf00      	nop
 80078e8:	08007f06 	.word	0x08007f06
 80078ec:	08005a29 	.word	0x08005a29
 80078f0:	08007665 	.word	0x08007665
 80078f4:	08007efc 	.word	0x08007efc
 80078f8:	08007f02 	.word	0x08007f02

080078fc <_sbrk_r>:
 80078fc:	b538      	push	{r3, r4, r5, lr}
 80078fe:	4c06      	ldr	r4, [pc, #24]	; (8007918 <_sbrk_r+0x1c>)
 8007900:	2300      	movs	r3, #0
 8007902:	4605      	mov	r5, r0
 8007904:	4608      	mov	r0, r1
 8007906:	6023      	str	r3, [r4, #0]
 8007908:	f7fa ff64 	bl	80027d4 <_sbrk>
 800790c:	1c43      	adds	r3, r0, #1
 800790e:	d102      	bne.n	8007916 <_sbrk_r+0x1a>
 8007910:	6823      	ldr	r3, [r4, #0]
 8007912:	b103      	cbz	r3, 8007916 <_sbrk_r+0x1a>
 8007914:	602b      	str	r3, [r5, #0]
 8007916:	bd38      	pop	{r3, r4, r5, pc}
 8007918:	1fffcb34 	.word	0x1fffcb34

0800791c <memmove>:
 800791c:	4281      	cmp	r1, r0
 800791e:	b510      	push	{r4, lr}
 8007920:	eb01 0302 	add.w	r3, r1, r2
 8007924:	d301      	bcc.n	800792a <memmove+0xe>
 8007926:	1e42      	subs	r2, r0, #1
 8007928:	e00b      	b.n	8007942 <memmove+0x26>
 800792a:	4298      	cmp	r0, r3
 800792c:	d2fb      	bcs.n	8007926 <memmove+0xa>
 800792e:	1881      	adds	r1, r0, r2
 8007930:	1ad2      	subs	r2, r2, r3
 8007932:	42d3      	cmn	r3, r2
 8007934:	d004      	beq.n	8007940 <memmove+0x24>
 8007936:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800793a:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800793e:	e7f8      	b.n	8007932 <memmove+0x16>
 8007940:	bd10      	pop	{r4, pc}
 8007942:	4299      	cmp	r1, r3
 8007944:	d004      	beq.n	8007950 <memmove+0x34>
 8007946:	f811 4b01 	ldrb.w	r4, [r1], #1
 800794a:	f802 4f01 	strb.w	r4, [r2, #1]!
 800794e:	e7f8      	b.n	8007942 <memmove+0x26>
 8007950:	bd10      	pop	{r4, pc}

08007952 <_realloc_r>:
 8007952:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007954:	4607      	mov	r7, r0
 8007956:	4615      	mov	r5, r2
 8007958:	460e      	mov	r6, r1
 800795a:	b921      	cbnz	r1, 8007966 <_realloc_r+0x14>
 800795c:	4611      	mov	r1, r2
 800795e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007962:	f7ff be29 	b.w	80075b8 <_malloc_r>
 8007966:	b91a      	cbnz	r2, 8007970 <_realloc_r+0x1e>
 8007968:	f7ff fde2 	bl	8007530 <_free_r>
 800796c:	4628      	mov	r0, r5
 800796e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007970:	f000 f815 	bl	800799e <_malloc_usable_size_r>
 8007974:	42a8      	cmp	r0, r5
 8007976:	d20e      	bcs.n	8007996 <_realloc_r+0x44>
 8007978:	4638      	mov	r0, r7
 800797a:	4629      	mov	r1, r5
 800797c:	f7ff fe1c 	bl	80075b8 <_malloc_r>
 8007980:	4604      	mov	r4, r0
 8007982:	b150      	cbz	r0, 800799a <_realloc_r+0x48>
 8007984:	4631      	mov	r1, r6
 8007986:	462a      	mov	r2, r5
 8007988:	f7fd ffaa 	bl	80058e0 <memcpy>
 800798c:	4638      	mov	r0, r7
 800798e:	4631      	mov	r1, r6
 8007990:	f7ff fdce 	bl	8007530 <_free_r>
 8007994:	e001      	b.n	800799a <_realloc_r+0x48>
 8007996:	4630      	mov	r0, r6
 8007998:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800799a:	4620      	mov	r0, r4
 800799c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800799e <_malloc_usable_size_r>:
 800799e:	f851 0c04 	ldr.w	r0, [r1, #-4]
 80079a2:	2800      	cmp	r0, #0
 80079a4:	bfbe      	ittt	lt
 80079a6:	1809      	addlt	r1, r1, r0
 80079a8:	f851 3c04 	ldrlt.w	r3, [r1, #-4]
 80079ac:	18c0      	addlt	r0, r0, r3
 80079ae:	3804      	subs	r0, #4
 80079b0:	4770      	bx	lr
	...

080079b4 <__gedf2>:
 80079b4:	f04f 3cff 	mov.w	ip, #4294967295
 80079b8:	e006      	b.n	80079c8 <__cmpdf2+0x4>
 80079ba:	bf00      	nop

080079bc <__ledf2>:
 80079bc:	f04f 0c01 	mov.w	ip, #1
 80079c0:	e002      	b.n	80079c8 <__cmpdf2+0x4>
 80079c2:	bf00      	nop

080079c4 <__cmpdf2>:
 80079c4:	f04f 0c01 	mov.w	ip, #1
 80079c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80079cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80079d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80079d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80079d8:	bf18      	it	ne
 80079da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80079de:	d01b      	beq.n	8007a18 <__cmpdf2+0x54>
 80079e0:	b001      	add	sp, #4
 80079e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80079e6:	bf0c      	ite	eq
 80079e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80079ec:	ea91 0f03 	teqne	r1, r3
 80079f0:	bf02      	ittt	eq
 80079f2:	ea90 0f02 	teqeq	r0, r2
 80079f6:	2000      	moveq	r0, #0
 80079f8:	4770      	bxeq	lr
 80079fa:	f110 0f00 	cmn.w	r0, #0
 80079fe:	ea91 0f03 	teq	r1, r3
 8007a02:	bf58      	it	pl
 8007a04:	4299      	cmppl	r1, r3
 8007a06:	bf08      	it	eq
 8007a08:	4290      	cmpeq	r0, r2
 8007a0a:	bf2c      	ite	cs
 8007a0c:	17d8      	asrcs	r0, r3, #31
 8007a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8007a12:	f040 0001 	orr.w	r0, r0, #1
 8007a16:	4770      	bx	lr
 8007a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8007a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8007a20:	d102      	bne.n	8007a28 <__cmpdf2+0x64>
 8007a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8007a26:	d107      	bne.n	8007a38 <__cmpdf2+0x74>
 8007a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8007a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8007a30:	d1d6      	bne.n	80079e0 <__cmpdf2+0x1c>
 8007a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8007a36:	d0d3      	beq.n	80079e0 <__cmpdf2+0x1c>
 8007a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8007a3c:	4770      	bx	lr
 8007a3e:	bf00      	nop

08007a40 <__aeabi_cdrcmple>:
 8007a40:	4684      	mov	ip, r0
 8007a42:	4610      	mov	r0, r2
 8007a44:	4662      	mov	r2, ip
 8007a46:	468c      	mov	ip, r1
 8007a48:	4619      	mov	r1, r3
 8007a4a:	4663      	mov	r3, ip
 8007a4c:	e000      	b.n	8007a50 <__aeabi_cdcmpeq>
 8007a4e:	bf00      	nop

08007a50 <__aeabi_cdcmpeq>:
 8007a50:	b501      	push	{r0, lr}
 8007a52:	f7ff ffb7 	bl	80079c4 <__cmpdf2>
 8007a56:	2800      	cmp	r0, #0
 8007a58:	bf48      	it	mi
 8007a5a:	f110 0f00 	cmnmi.w	r0, #0
 8007a5e:	bd01      	pop	{r0, pc}

08007a60 <__aeabi_dcmpeq>:
 8007a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8007a64:	f7ff fff4 	bl	8007a50 <__aeabi_cdcmpeq>
 8007a68:	bf0c      	ite	eq
 8007a6a:	2001      	moveq	r0, #1
 8007a6c:	2000      	movne	r0, #0
 8007a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8007a72:	bf00      	nop

08007a74 <__aeabi_dcmplt>:
 8007a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8007a78:	f7ff ffea 	bl	8007a50 <__aeabi_cdcmpeq>
 8007a7c:	bf34      	ite	cc
 8007a7e:	2001      	movcc	r0, #1
 8007a80:	2000      	movcs	r0, #0
 8007a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8007a86:	bf00      	nop

08007a88 <__aeabi_dcmple>:
 8007a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8007a8c:	f7ff ffe0 	bl	8007a50 <__aeabi_cdcmpeq>
 8007a90:	bf94      	ite	ls
 8007a92:	2001      	movls	r0, #1
 8007a94:	2000      	movhi	r0, #0
 8007a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8007a9a:	bf00      	nop

08007a9c <__aeabi_dcmpge>:
 8007a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8007aa0:	f7ff ffce 	bl	8007a40 <__aeabi_cdrcmple>
 8007aa4:	bf94      	ite	ls
 8007aa6:	2001      	movls	r0, #1
 8007aa8:	2000      	movhi	r0, #0
 8007aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8007aae:	bf00      	nop

08007ab0 <__aeabi_dcmpgt>:
 8007ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8007ab4:	f7ff ffc4 	bl	8007a40 <__aeabi_cdrcmple>
 8007ab8:	bf34      	ite	cc
 8007aba:	2001      	movcc	r0, #1
 8007abc:	2000      	movcs	r0, #0
 8007abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8007ac2:	bf00      	nop

08007ac4 <__aeabi_d2iz>:
 8007ac4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8007ac8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8007acc:	d215      	bcs.n	8007afa <__aeabi_d2iz+0x36>
 8007ace:	d511      	bpl.n	8007af4 <__aeabi_d2iz+0x30>
 8007ad0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8007ad4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8007ad8:	d912      	bls.n	8007b00 <__aeabi_d2iz+0x3c>
 8007ada:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8007ade:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007ae2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8007ae6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8007aea:	fa23 f002 	lsr.w	r0, r3, r2
 8007aee:	bf18      	it	ne
 8007af0:	4240      	negne	r0, r0
 8007af2:	4770      	bx	lr
 8007af4:	f04f 0000 	mov.w	r0, #0
 8007af8:	4770      	bx	lr
 8007afa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8007afe:	d105      	bne.n	8007b0c <__aeabi_d2iz+0x48>
 8007b00:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8007b04:	bf08      	it	eq
 8007b06:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8007b0a:	4770      	bx	lr
 8007b0c:	f04f 0000 	mov.w	r0, #0
 8007b10:	4770      	bx	lr
 8007b12:	bf00      	nop

08007b14 <g_xmc_vadc_group_array>:
 8007b14:	4400 4000 4800 4000                         .D.@.H.@

08007b1c <UART_0_channel_config>:
 8007b1c:	4b00 0000 0800 0108 0010 0000               .K..........

08007b28 <UART_0_tx_pin_config>:
 8007b28:	0090 0000 0001 0000 0002 0000               ............

08007b34 <UART_0_tx_pin>:
 8007b34:	8100 4802 0005 0000 7b28 0800               ...H....({..

08007b40 <UART_0_config>:
 8007b40:	7b1c 0800 2a61 0800 0000 0000 0000 0000     .{..a*..........
	...
 8007b5c:	7b34 0800 0200 0402 0004 0000               4{..........

08007b68 <UART_0_rx_pin_config>:
 8007b68:	0000 0000 0001 0000 0002 0000               ............

08007b74 <PWM_0_compare_config>:
	...

08007b7c <PWM_0_gpio_out_config>:
 8007b7c:	0098 0000 0000 0001 0004 0000               ............

08007b88 <PIN_INTERRUPT_0>:
 8007b88:	4000 4004 8100 4802 0000 0000 0000 0000     .@.@...H........
	...
 8007ba0:	0005 0000 3f05 0100 0f00 0001               .....?......

08007bac <INTERRUPT_0>:
 8007bac:	3f2e 0100                                   .?..

08007bb0 <INTERRUPT_CAN_A>:
 8007bb0:	3f3f 0000                                   ??..

08007bb4 <TIMER_INT>:
 8007bb4:	3f03 0000                                   .?..

08007bb8 <I2C_MASTER_0_sda_pin_config>:
 8007bb8:	00d0 0000 0001 0000 0000 0000               ............

08007bc4 <I2C_MASTER_0_scl_pin_config>:
 8007bc4:	00d0 0000 0001 0000 0000 0000               ............

08007bd0 <I2C_MASTER_0_channel_config>:
 8007bd0:	86a0 0001 0000 0000                         ........

08007bd8 <I2C_MASTER_0_config>:
 8007bd8:	7bd0 0800 3b3d 0800 3b15 0800 3af1 0800     .{..=;...;...:..
	...
 8007bfc:	0202 0404 ffff 0000                         ........

08007c04 <group_init_handle0>:
	...

08007c18 <group_init_handle1>:
	...

08007c2c <global_config>:
 8007c2c:	0000 0000 0002 0000 0000 0000 0000 0000     ................
	...

08007c44 <DIGITAL_IO_0>:
 8007c44:	8000 4802 0080 0000 0000 0001 0000 0000     ...H............
 8007c54:	0001 0000 0350 0104 0000 0001 0000 0000     ....P...........
 8007c64:	0000 0001 0101 0101                         ........

08007c6c <CAN_NODE_A_gpio_out>:
 8007c6c:	8200 4802 0000 0000                         ...H....

08007c74 <CAN_NODE_A_gpio_out_config>:
 8007c74:	0088 0000 0001 0000 0002 0000               ............

08007c80 <CAN_NODE_A_gpio_in>:
 8007c80:	8e00 4802 0003 0000                         ...H....

08007c88 <CAN_NODE_A_gpio_in_config>:
	...

08007c94 <CAN_NODE_A_BitTimeConfig>:
 8007c94:	b400 04c4 a120 0007 1f40 0001               .... ...@...

08007ca0 <CAN_NODE_A_sr>:
 8007ca0:	0000 0000                                   ....

08007ca4 <CAN_NODE_A_LMO_01_Config>:
 8007ca4:	c8d8 1fff 0023 0000 0001 0000               ....#.......

08007cb0 <CAN_NODE_A_LMO_02_Config>:
 8007cb0:	c8f8 1fff 0022 0100 0000 0000               ....".......

08007cbc <CAN_NODE_A>:
 8007cbc:	c89c 1fff 4200 4801 7c94 0800 7ca4 0800     .....B.H.|...|..
 8007ccc:	7cb0 0800 0000 0000 0000 0000 0000 0000     .|..............
	...
 8007d48:	7ca0 0800 7c6c 0800 7c74 0800 7c80 0800     .|..l|..t|...|..
 8007d58:	7c88 0800 0001 0002 0000 0000               .|..........

08007d64 <ANALOG_IO_0>:
 8007d64:	0000 0000 cafc 1fff 8e00 4802 0007 0000     ...........H....

08007d74 <ANALOG_IO_1>:
 8007d74:	0000 0000 cafd 1fff 8e00 4802 0000 0000     ...........H....

08007d84 <global_iclass_config>:
 8007d84:	0010 0000                                   ....

08007d88 <backgnd_config>:
 8007d88:	0005 0000 0f00 0003 0010 0000 33ac 0000     .............3..
 8007d98:	2e25 6632 4320 0a0d 0000 0000 2e25 6632     %.2f C......%.2f
 8007da8:	2520 0d25 000a 0000 0043 4e49 0046 6e69      %%.....C.INF.in
 8007db8:	0066 414e 004e 616e 006e 0030 3130 3332     f.NAN.nan.0.0123
 8007dc8:	3534 3736 3938 4241 4443 4645 3000 3231     456789ABCDEF.012
 8007dd8:	3433 3635 3837 6139 6362 6564 0066 6e49     3456789abcdef.In
 8007de8:	6966 696e 7974 4e00 4e61 5000 534f 5849     finity.NaN.POSIX
 8007df8:	2e00 0000 0000 0000                         ........

08007e00 <__mprec_tens>:
 8007e00:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
 8007e10:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
 8007e20:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
 8007e30:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
 8007e40:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
 8007e50:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
 8007e60:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
 8007e70:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
 8007e80:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
 8007e90:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
 8007ea0:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
 8007eb0:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
 8007ec0:	9db4 79d9 7843 44ea                         ...yCx.D

08007ec8 <__mprec_bigtens>:
 8007ec8:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
 8007ed8:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
 8007ee8:	bf3c 7f73 4fdd 7515                         <.s..O.u

08007ef0 <p05.5277>:
 8007ef0:	0005 0000 0019 0000 007d 0000 2d23 2b30     ........}...#-0+
 8007f00:	0020 6c68 004c 6665 4567 4746 0000 0000      .hlL.efgEFG....
